/*
* generated by Xtext
*/
package gpp.boxmodel.defaultboxmodel.ui.contentassist;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import com.google.common.base.Predicate;

import gpp.boxmodel.defaultboxmodel.defaultBoxModelDefinition.DefaultTerminalRuleHeuristic;
import gpp.boxmodel.defaultboxmodel.defaultBoxModelDefinition.ParserRuleHeuristic;
import gpp.boxmodel.defaultboxmodel.defaultBoxModelDefinition.RootParserRuleHeuristic;
import gpp.boxmodel.defaultboxmodel.defaultBoxModelDefinition.TerminalRuleHeuristic;
import gpp.boxmodel.defaultboxmodel.ui.contentassist.AbstractDefaultBoxModelDefinitionProposalProvider;
import gpp.boxmodel.operators.boxModelOperators.OperatorDefinition;
import gpp.boxmodel.operators.utils.BoxModelOperatorsHelper;
/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class DefaultBoxModelDefinitionProposalProvider extends AbstractDefaultBoxModelDefinitionProposalProvider {
	
	@Override
	public void completeOperatorApplication_Operator(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		final EObject finalModel = model;
		lookupCrossReference(((CrossReference)assignment.getTerminal()), context, acceptor,
			new Predicate<IEObjectDescription>(){
				@Override
				public boolean apply(IEObjectDescription input) {
					EObject obj = input.getEObjectOrProxy();
					obj = EcoreUtil2.resolve(obj, obj.eResource());
					OperatorDefinition operatorDefinition = (OperatorDefinition)obj;
					if(finalModel.eContainer() instanceof TerminalRuleHeuristic || finalModel.eContainer() instanceof DefaultTerminalRuleHeuristic)
					{
						return BoxModelOperatorsHelper.isOperatorHighlight(operatorDefinition) || 
							   BoxModelOperatorsHelper.isOperatorTransforming(operatorDefinition);
					}
					if(finalModel.eContainer() instanceof ParserRuleHeuristic || finalModel.eContainer() instanceof RootParserRuleHeuristic)
					{
						return BoxModelOperatorsHelper.isOperatorHighlight(operatorDefinition) || 
							   BoxModelOperatorsHelper.isOperatorPositional(operatorDefinition);
					}
					return false;
				}
			});
	}
}
