/*
* generated by Xtext
*/
package gpp.boxmodel.operators.ui.contentassist;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import gpp.boxmodel.operators.boxModelOperators.BasicOperatorDefinition;
import gpp.boxmodel.operators.boxModelOperators.BoxModelOperators;
import gpp.boxmodel.operators.boxModelOperators.EnumAlternative;
import gpp.boxmodel.operators.boxModelOperators.EnumParameterDefinition;
import gpp.boxmodel.operators.boxModelOperators.IntConstant;
import gpp.boxmodel.operators.boxModelOperators.IntParameterDefinition;
import gpp.boxmodel.operators.boxModelOperators.OperatorDefinition;
import gpp.boxmodel.operators.boxModelOperators.ParameterApplication;
import gpp.boxmodel.operators.boxModelOperators.ParameterDefinition;
import gpp.boxmodel.operators.boxModelOperators.StringConstant;
import gpp.boxmodel.operators.boxModelOperators.StringParameterDefinition;
import gpp.boxmodel.operators.ui.contentassist.AbstractBoxModelOperatorsProposalProvider;
import gpp.boxmodel.operators.utils.BoxModelOperatorsHelper;
/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class BoxModelOperatorsProposalProvider extends AbstractBoxModelOperatorsProposalProvider {
	public void completeParameterApplication_ReferencedParameter(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		EObject obj = EcoreUtil2.resolve(model, model.eResource());
		EStructuralFeature feature = obj.eClass().getEStructuralFeature("operator");
		completeParameters((OperatorDefinition)obj.eGet(feature, true), context, acceptor);
	}
	
	protected void completeParameters(OperatorDefinition operatorDefinition, ContentAssistContext context, ICompletionProposalAcceptor acceptor)
	{
		BasicOperatorDefinition basicOperator = BoxModelOperatorsHelper.getBasicOperator(operatorDefinition);
		for(ParameterDefinition parameterDefinition : basicOperator.getParameters())
		{
			acceptor.accept(createCompletionProposal(parameterDefinition.getName(), parameterDefinition.getName(), getImage(parameterDefinition), context));
		}
	}
	
	public void complete_STRING(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if(model instanceof ParameterApplication)
		{
			ParameterApplication application = (ParameterApplication)EcoreUtil2.resolve(model, model.eResource());
			if(application.getReferencedParameter() instanceof StringParameterDefinition)
			{
				super.complete_STRING(model, ruleCall, context, acceptor);
			}
		}
		else
		{
			super.complete_STRING(model, ruleCall, context, acceptor);
		}
	}
	
	public void complete_INT(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if(model instanceof ParameterApplication)
		{
			ParameterApplication application = (ParameterApplication)EcoreUtil2.resolve(model, model.eResource());
			if(application.getReferencedParameter() instanceof IntParameterDefinition)
			{
				super.complete_INT(model, ruleCall, context, acceptor);
			}
		}
		else
		{
			super.complete_INT(model, ruleCall, context, acceptor);
		}
	}
	
	public void completeConstantReferenceValue_Value(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {}
	
	public void completeParameterApplication_Value(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor)
	{
		ParameterApplication parameterApplication = (ParameterApplication)EcoreUtil2.resolve(model, model.eResource());
		ParameterDefinition parameterDefinition = (ParameterDefinition)parameterApplication.getReferencedParameter();
		if(parameterDefinition == null)
		{
			return;
		}
		if(parameterDefinition instanceof EnumParameterDefinition)
		{
			EnumParameterDefinition enumParameterDefinition = (EnumParameterDefinition)parameterDefinition;
			for(EnumAlternative alternative : enumParameterDefinition.getAlternatives())
			{
				acceptor.accept(createCompletionProposal(alternative.getName(), alternative.getName(), getImage(alternative), context));
			}
			if(enumParameterDefinition.getEnumeration() != null)
			{
				for(EnumAlternative alternative : enumParameterDefinition.getEnumeration().getAlternatives())
				{
					acceptor.accept(createCompletionProposal(alternative.getName(), alternative.getName(), getImage(alternative), context));
				}
			}
		}
		else
		{
			EObject oBoxModel = model;
			while(oBoxModel.eContainer() != null) oBoxModel = oBoxModel.eContainer();
			BoxModelOperators boxModelOperators = (BoxModelOperators)oBoxModel;
			
			if(parameterDefinition instanceof StringParameterDefinition)
			{
				for(StringConstant constant : boxModelOperators.getStringConstants())
				{
					acceptor.accept(createCompletionProposal(constant.getName(), constant.getName(), getImage(constant), context));
				}
			}
			else if(parameterDefinition instanceof IntParameterDefinition)
			{
				for(IntConstant constant : boxModelOperators.getIntConstants())
				{
					acceptor.accept(createCompletionProposal(constant.getName(), constant.getName(), getImage(constant), context));
				}
			}
		}
	}
}
