/*
* generated by Xtext
*/
package gpp.boxmodel.ui.contentassist;

import java.util.regex.Pattern;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.naming.SimpleNameProvider;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import com.google.common.base.Function;
import com.google.common.base.Predicate;

import gpp.boxmodel.boxModel.AssignmentBox;
import gpp.boxmodel.boxModel.GroupBox;
import gpp.boxmodel.boxModel.MultipleBox;
import gpp.boxmodel.boxModel.ParserRuleFormatting;
import gpp.boxmodel.boxModel.ParserRuleOperatorApplication;
import gpp.boxmodel.boxModel.Reference;
import gpp.boxmodel.naming.GppQualifiedNameProvider;
import gpp.boxmodel.naming.GppXtextQualifiedNameProvider;
import gpp.boxmodel.naming.GppXtextStringRepresentationProvider;
import gpp.boxmodel.operators.boxModelOperators.OperatorDefinition;
import gpp.boxmodel.operators.utils.BoxModelOperatorsHelper;
import gpp.boxmodel.ui.contentassist.AbstractBoxModelProposalProvider;

public class BoxModelProposalProvider extends AbstractBoxModelProposalProvider {

	GppXtextStringRepresentationProvider xtextElementsRepresentationProvider = new GppXtextStringRepresentationProvider();
	
	GppQualifiedNameProvider gppQualifiedNameProvider = new GppQualifiedNameProvider();
	GppXtextQualifiedNameProvider gppXtextQualifiedNameProvider = new GppXtextQualifiedNameProvider();
	
	@Override
	public void completeTerminalRuleOperatorApplication_Operator(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		lookupCrossReference(((CrossReference)assignment.getTerminal()), context, acceptor,new Predicate<IEObjectDescription>() {
			@Override
			public boolean apply(IEObjectDescription input) {
				EObject obj = input.getEObjectOrProxy();
				obj = EcoreUtil2.resolve(obj, obj.eResource());
				OperatorDefinition operatorDefinition = (OperatorDefinition)obj;
				return BoxModelOperatorsHelper.isOperatorHighlight(operatorDefinition) || 
					   BoxModelOperatorsHelper.isOperatorTransforming(operatorDefinition);
			}
		});
	}
	
	@Override
	public void completeAlternativesOperatorApplication_Operator(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if(model.eContainer() instanceof ParserRuleFormatting)
		{
			lookupCrossReference(((CrossReference)assignment.getTerminal()), context, acceptor,new Predicate<IEObjectDescription>() {
				@Override
				public boolean apply(IEObjectDescription input) {
					EObject obj = input.getEObjectOrProxy();
					obj = EcoreUtil2.resolve(obj, obj.eResource());
					OperatorDefinition operatorDefinition = (OperatorDefinition)obj;
					return BoxModelOperatorsHelper.isOperatorPositional(operatorDefinition);
				}
			});
		}
		else
		{
			completeParserRuleOperatorApplication_Operator(assignment, context, acceptor);
		}
	}
	
	@Override
	public void completeAssignableTerminalOperatorApplication_Operator(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		completeParserRuleOperatorApplication_Operator(assignment, context, acceptor);
	}
	
	private void completeParserRuleOperatorApplication_Operator(Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		lookupCrossReference(((CrossReference)assignment.getTerminal()), context, acceptor,new Predicate<IEObjectDescription>() {
			@Override
			public boolean apply(IEObjectDescription input) {
				EObject obj = input.getEObjectOrProxy();
				obj = EcoreUtil2.resolve(obj, obj.eResource());
				OperatorDefinition operatorDefinition = (OperatorDefinition)obj;
				return BoxModelOperatorsHelper.isOperatorHighlight(operatorDefinition) || 
					   BoxModelOperatorsHelper.isOperatorPositional(operatorDefinition);
			}
		});
	}
	
	protected void lookupCrossReference(CrossReference crossReference, ContentAssistContext contentAssistContext,
			ICompletionProposalAcceptor acceptor, Predicate<IEObjectDescription> filter,
			Function<IEObjectDescription, ICompletionProposal> proposalFactory) {
		ParserRule containingParserRule = GrammarUtil.containingParserRule(crossReference);
		if (!GrammarUtil.isDatatypeRule(containingParserRule)) {
			EReference ref = GrammarUtil.getReference(crossReference);
			lookupCrossReference(contentAssistContext.getCurrentModel(), ref, acceptor, filter, proposalFactory);
		}
	}
	@Override
	public void completeReference_Element(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		completeBoxElements(model, assignment, context, acceptor);
	}
	
	@Override
	public void completeAssignmentBox_Assignment(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		completeBoxElements(model, assignment, context, acceptor);
	}
	
	@Override
	public void completeAssignableTerminalReference_Element(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		completeBoxElements(model, assignment, context, acceptor);
	}
	
	protected void completeBoxElements(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		final ContentAssistContext finalContentAssistContext = context;
		String modelName = "";
		EObject modelToQualify = model;
		if(model instanceof ParserRuleOperatorApplication)
		{
			ParserRuleOperatorApplication pModel = (ParserRuleOperatorApplication)model;
			if(pModel.getContent() instanceof GroupBox || pModel.getContent() instanceof MultipleBox)
			{
				modelToQualify = pModel.getContent();
			}
		}
		while(modelToQualify !=null)
		{
			QualifiedName qName = gppQualifiedNameProvider.getFullyQualifiedName(modelToQualify,true);
			if(qName != null)
			{
				modelName = qName.toString();
				break;
			}
			modelToQualify = modelToQualify.eContainer();
		}
		final String finalModelName = modelName;
		lookupCrossReference(((CrossReference)assignment.getTerminal()), context, acceptor,
			new Predicate<IEObjectDescription>(){
				
				@Override
				public boolean apply(IEObjectDescription input) {
					EObject object = input.getEObjectOrProxy();
					boolean supportedType = (object instanceof Keyword) ||
											(object instanceof RuleCall) ||
											(object instanceof CrossReference) ||
											(object instanceof Assignment);
					if(!supportedType)
					{
						return false;
					}
					QualifiedName qName = gppXtextQualifiedNameProvider.getFullyQualifiedName(object).skipLast(1);
					if(Pattern.matches("^\\d*$", qName.getLastSegment()))
					{
						qName = qName.skipLast(1);
					}
					return finalModelName.equals(qName.toString());
				}
				
			},
			new Function<IEObjectDescription, ICompletionProposal>() {
				@Override
				public ICompletionProposal apply(IEObjectDescription from) {
					EObject object = EcoreUtil2.resolve(from.getEObjectOrProxy(), from.getEObjectOrProxy().eResource());
					String name = xtextElementsRepresentationProvider.getStringRepresentation(object);
					if(name == null)
					{
						name = object.toString();
					}
					if(object instanceof Keyword)
					{
						name = "'" + name + "'";
					}
					return createCompletionProposal(name, name, getImage(object), finalContentAssistContext);
				}
			});
	}
	
}
