grammar gpp.boxmodel.BoxModel with gpp.boxmodel.operators.BoxModelOperators  hidden(WS, ML_COMMENT, SL_COMMENT)

generate boxModel "http://www.boxmodel.gpp/BoxModel"

import "classpath:/org/eclipse/xtext/Xtext.ecore" as xtext
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.boxmodel.gpp/operators/BoxModelOperators" as operators

BoxModel:
	xtextFile = XtextFileImport
	operatorsSection = BoxModelOperators
	formatting = Formatting
	end = End
;

KeywordID returns ecore::EString: 
	 STRING 
;

RuleCallID returns ecore::EString:
	 ID 
;

CrossReferenceID returns ecore::EString:
	 '[' TypeRefID ('|' CrossReferenceableTerminalID )? ']' 
;


CrossReferenceableTerminalID returns ecore::EString:
	 STRING | ID
;


TypeRefID:
	(ID '::')? ID
;

Formatting:
	{Formatting}
	((parserRuleFormatings += ParserRuleFormatting | terminalRuleFormattings += TerminalRuleFormatting | keywordTerminalRuleFormattings += KeywordTerminalRuleFormatting)* 
		& defaultTerminalRuleFormatting=DefaultTerminalRuleFormatting
	)
;

DefaultTerminalRuleFormatting:
	'TBOX'
	'['
		name=('Default'|'default'|'DEFAULT') 
	']'
	':'
	content += TerminalRuleOperatorApplication (',' content += TerminalRuleOperatorApplication)?
	';'
;

TerminalRuleFormatting:
	'TBOX'
	'['
	rule = [xtext::TerminalRule|ID]
	']'
	':'
	content += TerminalRuleOperatorApplication (',' content += TerminalRuleOperatorApplication)?
	';'
;

KeywordTerminalRuleFormatting:
	'TBOX'
	'['
	name = ID
	','
	pattern = STRING
	']'
	':'
	content += TerminalRuleOperatorApplication (',' content += TerminalRuleOperatorApplication)?
	';'
;

TerminalRuleOperatorApplication:
	'<'
	operator = [operators::OperatorDefinition]
	( parameters += ParameterApplication (',' parameters += ParameterApplication)*)?
	'>'
;

ParserRuleFormatting:
	'PBOX'
	'['
	rule = [xtext::ParserRule|ID]
	']'
	':'
	content = AlternativesOperatorApplication 
	';'
;


AlternativesOperatorApplication returns ParserRuleOperatorApplication:
	'<'
	operator = [operators::OperatorDefinition]
	( parameters += ParameterApplication (',' parameters += ParameterApplication)* )?
	'>'
	'['
	content = AlternativesBox
    ']'
;

AssignableTerminalOperatorApplication returns ParserRuleOperatorApplication:
	'<'
	operator = [operators::OperatorDefinition]
	( parameters += ParameterApplication (',' parameters += ParameterApplication)* )?	
	'>'
	'['
	content =  AssignableAlternativesBox
    ']'
;


AlternativesBox returns Box:
	UnorderedGroupBox ({MultipleBox.elements+=current} type='|' elements+=UnorderedGroupBox ('|' elements+=UnorderedGroupBox)*)?
;

UnorderedGroupBox returns Box:
	GroupBox ({MultipleBox.elements+=current} type='&' elements+=GroupBox ('&' elements+=GroupBox)*)?
;

GroupBox returns Box:
 	AbstractTokenBox ({GroupBox.elements+=current} (elements+=AbstractTokenBox)+)?
;

AbstractTokenBox returns Box:
	AlternativesOperatorApplication | AssignmentBox | ParenthesizedElementBox | Reference 
;


Reference returns Reference:
	
	(element = [xtext::Keyword|KeywordID] | element = [xtext::RuleCall|RuleCallID])
	
;

ParenthesizedElementBox returns Box:
'(' AlternativesBox parenthesized?=')'
;

AssignmentBox:
 	assignment=[xtext::Assignment|ID] ':' ^terminal=AssignableTerminalBox 
;
	
AssignableTerminalBox returns Box:
	 AssignableTerminalOperatorApplication | ParenthesizedAssignableElementBox | AssignableTerminalReference
;

AssignableTerminalReference returns Reference:
	
	(element = [xtext::Keyword|KeywordID] | element = [xtext::RuleCall|RuleCallID] | element = [xtext::CrossReference|CrossReferenceID]) 
	
;

ParenthesizedAssignableElementBox returns Box :
   '(' AssignableAlternativesBox parenthesized?=')'
;

AssignableAlternativesBox returns Box:
    AssignableTerminalBox ({MultipleBox.elements+=current} type='|' elements+=AssignableTerminalBox ( '|' elements+=AssignableTerminalBox)*)? 
;

XtextFileImport:
	'xtext'
	importURI = STRING
;

End:
	{End}
;
