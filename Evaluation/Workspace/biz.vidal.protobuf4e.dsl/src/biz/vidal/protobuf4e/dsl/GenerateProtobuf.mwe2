module biz.vidal.protobuf4e.dsl.GenerateProtobuf

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/biz/vidal/protobuf4e/dsl/Protobuf.xtext"
var file.extensions = "proto"
var projectName = "biz.vidal.protobuf4e.dsl"
var runtimeProject = "../${projectName}"

Workflow {
    bean = StandaloneSetup {
	    scanClassPath = true
		platformUri = "${runtimeProject}/.."
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		pathTestProject = "${runtimeProject}.tests"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		language = {
			uri = grammarURI
			fileExtensions = file.extensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment {}

			// generates Java API for the generated EPackages 
			fragment = ecore.EcoreGeneratorFragment {
			// referencedGenModels = "
			// 	platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel,
			// 	platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel
			// "
			}

			// the serialization component
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}

			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = file.extensions
			}

			// The antlr parser generator fragment.
			fragment = parser.antlr.XtextAntlrGeneratorFragment {
			//  options = {
			//		backtrack = true
			//	}
			}
			
			// java-based API for validation 
			fragment = validation.JavaValidatorFragment {
				composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
				composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}

			// scoping and exporting API
			// fragment = scoping.ImportURIScopingFragment {}
			// fragment = exporting.SimpleNamesFragment {}

			// scoping and exporting API 
			fragment = scoping.ImportNamespacesScopingFragment {}
			fragment = exporting.QualifiedNamesFragment {}
			fragment = builder.BuilderIntegrationFragment {}

			// generator API
			fragment = generator.GeneratorFragment {
				generateMwe = true
				generateJavaMain = true
			}
			
			// formatter API 
			fragment = formatting.FormatterFragment {}

			// labeling API 
			fragment = labeling.LabelProviderFragment {}

			// outline API 
			fragment = outline.OutlineTreeProviderFragment {}
			fragment = outline.QuickOutlineFragment {}

			// quickfix API 
			fragment = quickfix.QuickfixProviderFragment {}

			// content assist API  
			fragment = contentAssist.JavaBasedContentAssistFragment {}
			
			// generates a more lightweight Antlr parser and lexer tailored for content assist  
			fragment = parser.antlr.XtextAntlrUiGeneratorFragment {}

			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.Junit4Fragment {}

			// project wizard (optional) 
			// fragment = projectWizard.SimpleProjectWizardFragment {
			// 		generatorProjectName = "${projectName}"
			//		modelFileExtension = file.extensions
			// }

			// provides the necessary bindings for java types integration
			fragment = types.TypesGeneratorFragment {}

			// generates the required bindings only if the grammar inherits from Xbase
			fragment = xbase.XbaseGeneratorFragment {}
			
			// provides a preference page for template proposals 
			fragment = templates.CodetemplatesGeneratorFragment {}

			// rename refactoring
            // fragment = refactoring.RefactorElementNameFragment {}

            // provides a compare view
            // fragment = compare.CompareFragment {
            //    fileExtensions = file.extensions
            // }

            // Serializer 2.0
            // fragment = serializer.SerializerFragment {}
            
            fragment = gpp.boxmodel.defaultboxmodel.DefaultBoxModelGeneratorFragment
			{
				defaultBoxModelDefinitionFileURI = "platform:/resource/gpp/settings/defaultFormattingSettings.ppd"
			}
			
			fragment = gpp.boxmodel.provider.BoxModelProviderFragment
			{
				boxModelFileURI = "platform:/resource/biz.vidal.protobuf4e.dsl/src/biz/vidal/protobuf4e/dsl/Protobuf.ppf"
			} 
			
			fragment = gpp.highlighting.HighlightingFragment {} 
			
			fragment = gpp.formatting.FormatterFragment {}
		}
	}
}
