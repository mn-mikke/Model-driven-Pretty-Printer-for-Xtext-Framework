/*
 * generated by Xtext
 */
package cz.gpp.zoo.formatting;

import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.util.Pair;

import cz.gpp.zoo.services.ZooGrammarAccess;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class ZooFormatter extends AbstractDeclarativeFormatter {
	
	@Override
	protected void configureFormatting(FormattingConfig c) {
		ZooGrammarAccess g = (ZooGrammarAccess)getGrammarAccess();
		c.setLinewrap(2).after(g.getZooAccess().getNameAssignment_1());
		c.setLinewrap(2).before(g.getAnimalAccess().getAnimalKeyword_0());
		c.setLinewrap().after(g.getAnimalAccess().getGroup_3_0());
		c.setLinewrap().after(g.getAnimalAccess().getGroup_3_1());
		c.setLinewrap().after(g.getAnimalAccess().getGroup_3_2());
		c.setNoSpace().before(g.getAnimalAccess().getColonKeyword_2());
		c.setLinewrap().after(g.getAnimalAccess().getColonKeyword_2());
		for(Pair<Keyword,  Keyword>  p  :  g.findKeywordPairs(":",  ";"))
		{
			c.setIndentationIncrement().after(p.getFirst());
			c.setIndentationDecrement().before(p.getSecond());
		}
	}
}
