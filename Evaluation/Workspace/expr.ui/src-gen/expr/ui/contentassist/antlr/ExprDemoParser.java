/*
* generated by Xtext
*/
package expr.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import expr.services.ExprDemoGrammarAccess;

public class ExprDemoParser extends AbstractContentAssistParser {
	
	@Inject
	private ExprDemoGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected expr.ui.contentassist.antlr.internal.InternalExprDemoParser createParser() {
		expr.ui.contentassist.antlr.internal.InternalExprDemoParser result = new expr.ui.contentassist.antlr.internal.InternalExprDemoParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAlternatives_4(), "rule__Model__Alternatives_4");
					put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getPrimitiveTypeAccess().getAlternatives(), "rule__PrimitiveType__Alternatives");
					put(grammarAccess.getAtomicAccess().getAlternatives(), "rule__Atomic__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getUsingAccess().getGroup(), "rule__Using__Group__0");
					put(grammarAccess.getImportIDAccess().getGroup(), "rule__ImportID__Group__0");
					put(grammarAccess.getImportIDAccess().getGroup_1(), "rule__ImportID__Group_1__0");
					put(grammarAccess.getFunctionDeclarationAccess().getGroup(), "rule__FunctionDeclaration__Group__0");
					put(grammarAccess.getFunctionDeclarationAccess().getGroup_5(), "rule__FunctionDeclaration__Group_5__0");
					put(grammarAccess.getFunctionDeclarationAccess().getGroup_5_1(), "rule__FunctionDeclaration__Group_5_1__0");
					put(grammarAccess.getReturnAccess().getGroup(), "rule__Return__Group__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getAssertAccess().getGroup(), "rule__Assert__Group__0");
					put(grammarAccess.getAssertAccess().getGroup_4(), "rule__Assert__Group_4__0");
					put(grammarAccess.getEnumDeclAccess().getGroup(), "rule__EnumDecl__Group__0");
					put(grammarAccess.getEnumLiteralAccess().getGroup(), "rule__EnumLiteral__Group__0");
					put(grammarAccess.getVarDeclAccess().getGroup(), "rule__VarDecl__Group__0");
					put(grammarAccess.getVarDeclAccess().getGroup_5(), "rule__VarDecl__Group_5__0");
					put(grammarAccess.getArrayTypeAccess().getGroup(), "rule__ArrayType__Group__0");
					put(grammarAccess.getIntTypeAccess().getGroup(), "rule__IntType__Group__0");
					put(grammarAccess.getBoolTypeAccess().getGroup(), "rule__BoolType__Group__0");
					put(grammarAccess.getFloatTypeAccess().getGroup(), "rule__FloatType__Group__0");
					put(grammarAccess.getStringTypeAccess().getGroup(), "rule__StringType__Group__0");
					put(grammarAccess.getFormulaAccess().getGroup(), "rule__Formula__Group__0");
					put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
					put(grammarAccess.getComparisonAccess().getGroup_1(), "rule__Comparison__Group_1__0");
					put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
					put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
					put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
					put(grammarAccess.getPostfixOperatorsAccess().getGroup(), "rule__PostfixOperators__Group__0");
					put(grammarAccess.getPostfixOperatorsAccess().getGroup_1(), "rule__PostfixOperators__Group_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_0(), "rule__Atomic__Group_0__0");
					put(grammarAccess.getAtomicAccess().getGroup_0_2(), "rule__Atomic__Group_0_2__0");
					put(grammarAccess.getAtomicAccess().getGroup_0_2_2(), "rule__Atomic__Group_0_2_2__0");
					put(grammarAccess.getAtomicAccess().getGroup_1(), "rule__Atomic__Group_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_2(), "rule__Atomic__Group_2__0");
					put(grammarAccess.getQIDAccess().getGroup(), "rule__QID__Group__0");
					put(grammarAccess.getQIDAccess().getGroup_1(), "rule__QID__Group_1__0");
					put(grammarAccess.getModelAccess().getIsTestedAssignment_0(), "rule__Model__IsTestedAssignment_0");
					put(grammarAccess.getModelAccess().getNameAssignment_2(), "rule__Model__NameAssignment_2");
					put(grammarAccess.getModelAccess().getUsingsAssignment_3(), "rule__Model__UsingsAssignment_3");
					put(grammarAccess.getModelAccess().getElementsAssignment_4_0(), "rule__Model__ElementsAssignment_4_0");
					put(grammarAccess.getModelAccess().getFunctionsAssignment_4_1(), "rule__Model__FunctionsAssignment_4_1");
					put(grammarAccess.getUsingAccess().getImportedNamespaceAssignment_1(), "rule__Using__ImportedNamespaceAssignment_1");
					put(grammarAccess.getFunctionDeclarationAccess().getTypeAssignment_2(), "rule__FunctionDeclaration__TypeAssignment_2");
					put(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_3(), "rule__FunctionDeclaration__NameAssignment_3");
					put(grammarAccess.getFunctionDeclarationAccess().getParamsAssignment_5_0(), "rule__FunctionDeclaration__ParamsAssignment_5_0");
					put(grammarAccess.getFunctionDeclarationAccess().getParamsAssignment_5_1_1(), "rule__FunctionDeclaration__ParamsAssignment_5_1_1");
					put(grammarAccess.getFunctionDeclarationAccess().getElementsAssignment_8(), "rule__FunctionDeclaration__ElementsAssignment_8");
					put(grammarAccess.getReturnAccess().getExprAssignment_1(), "rule__Return__ExprAssignment_1");
					put(grammarAccess.getParameterAccess().getTypeAssignment_1(), "rule__Parameter__TypeAssignment_1");
					put(grammarAccess.getParameterAccess().getNameAssignment_2(), "rule__Parameter__NameAssignment_2");
					put(grammarAccess.getAssertAccess().getActualAssignment_1(), "rule__Assert__ActualAssignment_1");
					put(grammarAccess.getAssertAccess().getExpectedAssignment_3(), "rule__Assert__ExpectedAssignment_3");
					put(grammarAccess.getAssertAccess().getMsgAssignment_4_1(), "rule__Assert__MsgAssignment_4_1");
					put(grammarAccess.getEnumDeclAccess().getNameAssignment_1(), "rule__EnumDecl__NameAssignment_1");
					put(grammarAccess.getEnumDeclAccess().getLiteralsAssignment_3(), "rule__EnumDecl__LiteralsAssignment_3");
					put(grammarAccess.getEnumLiteralAccess().getNameAssignment_1(), "rule__EnumLiteral__NameAssignment_1");
					put(grammarAccess.getVarDeclAccess().getReadonlyAssignment_1(), "rule__VarDecl__ReadonlyAssignment_1");
					put(grammarAccess.getVarDeclAccess().getTypeAssignment_3(), "rule__VarDecl__TypeAssignment_3");
					put(grammarAccess.getVarDeclAccess().getNameAssignment_4(), "rule__VarDecl__NameAssignment_4");
					put(grammarAccess.getVarDeclAccess().getInitAssignment_5_1(), "rule__VarDecl__InitAssignment_5_1");
					put(grammarAccess.getArrayTypeAccess().getBaseTypeAssignment_3(), "rule__ArrayType__BaseTypeAssignment_3");
					put(grammarAccess.getEnumTypeAccess().getEnumRefAssignment(), "rule__EnumType__EnumRefAssignment");
					put(grammarAccess.getFormulaAccess().getTypeAssignment_2(), "rule__Formula__TypeAssignment_2");
					put(grammarAccess.getFormulaAccess().getNameAssignment_3(), "rule__Formula__NameAssignment_3");
					put(grammarAccess.getFormulaAccess().getExprAssignment_5(), "rule__Formula__ExprAssignment_5");
					put(grammarAccess.getComparisonAccess().getRightAssignment_1_2(), "rule__Comparison__RightAssignment_1_2");
					put(grammarAccess.getAdditionAccess().getRightAssignment_1_2(), "rule__Addition__RightAssignment_1_2");
					put(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2(), "rule__Multiplication__RightAssignment_1_2");
					put(grammarAccess.getPostfixOperatorsAccess().getIndexAssignment_1_2(), "rule__PostfixOperators__IndexAssignment_1_2");
					put(grammarAccess.getAtomicAccess().getSymbolAssignment_0_1(), "rule__Atomic__SymbolAssignment_0_1");
					put(grammarAccess.getAtomicAccess().getActualsAssignment_0_2_1(), "rule__Atomic__ActualsAssignment_0_2_1");
					put(grammarAccess.getAtomicAccess().getActualsAssignment_0_2_2_1(), "rule__Atomic__ActualsAssignment_0_2_2_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_1_1(), "rule__Atomic__ValueAssignment_1_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_2_1(), "rule__Atomic__ValueAssignment_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			expr.ui.contentassist.antlr.internal.InternalExprDemoParser typedParser = (expr.ui.contentassist.antlr.internal.InternalExprDemoParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ExprDemoGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ExprDemoGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
