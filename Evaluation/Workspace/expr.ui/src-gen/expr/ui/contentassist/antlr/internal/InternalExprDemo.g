/*
* generated by Xtext
*/
grammar InternalExprDemo;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package expr.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package expr.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import expr.services.ExprDemoGrammarAccess;

}

@parser::members {
 
 	private ExprDemoGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ExprDemoGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUsing
entryRuleUsing 
:
{ before(grammarAccess.getUsingRule()); }
	 ruleUsing
{ after(grammarAccess.getUsingRule()); } 
	 EOF 
;

// Rule Using
ruleUsing
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUsingAccess().getGroup()); }
(rule__Using__Group__0)
{ after(grammarAccess.getUsingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImportID
entryRuleImportID 
:
{ before(grammarAccess.getImportIDRule()); }
	 ruleImportID
{ after(grammarAccess.getImportIDRule()); } 
	 EOF 
;

// Rule ImportID
ruleImportID
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportIDAccess().getGroup()); }
(rule__ImportID__Group__0)
{ after(grammarAccess.getImportIDAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElement
entryRuleElement 
:
{ before(grammarAccess.getElementRule()); }
	 ruleElement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule Element
ruleElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementAccess().getAlternatives()); }
(rule__Element__Alternatives)
{ after(grammarAccess.getElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration 
:
{ before(grammarAccess.getFunctionDeclarationRule()); }
	 ruleFunctionDeclaration
{ after(grammarAccess.getFunctionDeclarationRule()); } 
	 EOF 
;

// Rule FunctionDeclaration
ruleFunctionDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
(rule__FunctionDeclaration__Group__0)
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReturn
entryRuleReturn 
:
{ before(grammarAccess.getReturnRule()); }
	 ruleReturn
{ after(grammarAccess.getReturnRule()); } 
	 EOF 
;

// Rule Return
ruleReturn
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReturnAccess().getGroup()); }
(rule__Return__Group__0)
{ after(grammarAccess.getReturnAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getGroup()); }
(rule__Parameter__Group__0)
{ after(grammarAccess.getParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssert
entryRuleAssert 
:
{ before(grammarAccess.getAssertRule()); }
	 ruleAssert
{ after(grammarAccess.getAssertRule()); } 
	 EOF 
;

// Rule Assert
ruleAssert
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssertAccess().getGroup()); }
(rule__Assert__Group__0)
{ after(grammarAccess.getAssertAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumDecl
entryRuleEnumDecl 
:
{ before(grammarAccess.getEnumDeclRule()); }
	 ruleEnumDecl
{ after(grammarAccess.getEnumDeclRule()); } 
	 EOF 
;

// Rule EnumDecl
ruleEnumDecl
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumDeclAccess().getGroup()); }
(rule__EnumDecl__Group__0)
{ after(grammarAccess.getEnumDeclAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumLiteral
entryRuleEnumLiteral 
:
{ before(grammarAccess.getEnumLiteralRule()); }
	 ruleEnumLiteral
{ after(grammarAccess.getEnumLiteralRule()); } 
	 EOF 
;

// Rule EnumLiteral
ruleEnumLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumLiteralAccess().getGroup()); }
(rule__EnumLiteral__Group__0)
{ after(grammarAccess.getEnumLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVarDecl
entryRuleVarDecl 
:
{ before(grammarAccess.getVarDeclRule()); }
	 ruleVarDecl
{ after(grammarAccess.getVarDeclRule()); } 
	 EOF 
;

// Rule VarDecl
ruleVarDecl
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarDeclAccess().getGroup()); }
(rule__VarDecl__Group__0)
{ after(grammarAccess.getVarDeclAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimitiveType
entryRulePrimitiveType 
:
{ before(grammarAccess.getPrimitiveTypeRule()); }
	 rulePrimitiveType
{ after(grammarAccess.getPrimitiveTypeRule()); } 
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getAlternatives()); }
(rule__PrimitiveType__Alternatives)
{ after(grammarAccess.getPrimitiveTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayType
entryRuleArrayType 
:
{ before(grammarAccess.getArrayTypeRule()); }
	 ruleArrayType
{ after(grammarAccess.getArrayTypeRule()); } 
	 EOF 
;

// Rule ArrayType
ruleArrayType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayTypeAccess().getGroup()); }
(rule__ArrayType__Group__0)
{ after(grammarAccess.getArrayTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumType
entryRuleEnumType 
:
{ before(grammarAccess.getEnumTypeRule()); }
	 ruleEnumType
{ after(grammarAccess.getEnumTypeRule()); } 
	 EOF 
;

// Rule EnumType
ruleEnumType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumTypeAccess().getEnumRefAssignment()); }
(rule__EnumType__EnumRefAssignment)
{ after(grammarAccess.getEnumTypeAccess().getEnumRefAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntType
entryRuleIntType 
:
{ before(grammarAccess.getIntTypeRule()); }
	 ruleIntType
{ after(grammarAccess.getIntTypeRule()); } 
	 EOF 
;

// Rule IntType
ruleIntType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntTypeAccess().getGroup()); }
(rule__IntType__Group__0)
{ after(grammarAccess.getIntTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBoolType
entryRuleBoolType 
:
{ before(grammarAccess.getBoolTypeRule()); }
	 ruleBoolType
{ after(grammarAccess.getBoolTypeRule()); } 
	 EOF 
;

// Rule BoolType
ruleBoolType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoolTypeAccess().getGroup()); }
(rule__BoolType__Group__0)
{ after(grammarAccess.getBoolTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFloatType
entryRuleFloatType 
:
{ before(grammarAccess.getFloatTypeRule()); }
	 ruleFloatType
{ after(grammarAccess.getFloatTypeRule()); } 
	 EOF 
;

// Rule FloatType
ruleFloatType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFloatTypeAccess().getGroup()); }
(rule__FloatType__Group__0)
{ after(grammarAccess.getFloatTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringType
entryRuleStringType 
:
{ before(grammarAccess.getStringTypeRule()); }
	 ruleStringType
{ after(grammarAccess.getStringTypeRule()); } 
	 EOF 
;

// Rule StringType
ruleStringType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringTypeAccess().getGroup()); }
(rule__StringType__Group__0)
{ after(grammarAccess.getStringTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFormula
entryRuleFormula 
:
{ before(grammarAccess.getFormulaRule()); }
	 ruleFormula
{ after(grammarAccess.getFormulaRule()); } 
	 EOF 
;

// Rule Formula
ruleFormula
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFormulaAccess().getGroup()); }
(rule__Formula__Group__0)
{ after(grammarAccess.getFormulaAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpr
entryRuleExpr 
:
{ before(grammarAccess.getExprRule()); }
	 ruleExpr
{ after(grammarAccess.getExprRule()); } 
	 EOF 
;

// Rule Expr
ruleExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExprAccess().getComparisonParserRuleCall()); }
	ruleComparison
{ after(grammarAccess.getExprAccess().getComparisonParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparison
entryRuleComparison 
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisonAccess().getGroup()); }
(rule__Comparison__Group__0)
{ after(grammarAccess.getComparisonAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAddition
entryRuleAddition 
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditionAccess().getGroup()); }
(rule__Addition__Group__0)
{ after(grammarAccess.getAdditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplication
entryRuleMultiplication 
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
(rule__Multiplication__Group__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePostfixOperators
entryRulePostfixOperators 
:
{ before(grammarAccess.getPostfixOperatorsRule()); }
	 rulePostfixOperators
{ after(grammarAccess.getPostfixOperatorsRule()); } 
	 EOF 
;

// Rule PostfixOperators
rulePostfixOperators
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPostfixOperatorsAccess().getGroup()); }
(rule__PostfixOperators__Group__0)
{ after(grammarAccess.getPostfixOperatorsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtomic
entryRuleAtomic 
:
{ before(grammarAccess.getAtomicRule()); }
	 ruleAtomic
{ after(grammarAccess.getAtomicRule()); } 
	 EOF 
;

// Rule Atomic
ruleAtomic
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomicAccess().getAlternatives()); }
(rule__Atomic__Alternatives)
{ after(grammarAccess.getAtomicAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQID
entryRuleQID 
:
{ before(grammarAccess.getQIDRule()); }
	 ruleQID
{ after(grammarAccess.getQIDRule()); } 
	 EOF 
;

// Rule QID
ruleQID
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQIDAccess().getGroup()); }
(rule__QID__Group__0)
{ after(grammarAccess.getQIDAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Model__Alternatives_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getElementsAssignment_4_0()); }
(rule__Model__ElementsAssignment_4_0)
{ after(grammarAccess.getModelAccess().getElementsAssignment_4_0()); }
)

    |(
{ before(grammarAccess.getModelAccess().getFunctionsAssignment_4_1()); }
(rule__Model__FunctionsAssignment_4_1)
{ after(grammarAccess.getModelAccess().getFunctionsAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getVarDeclParserRuleCall_0()); }
	ruleVarDecl
{ after(grammarAccess.getElementAccess().getVarDeclParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getElementAccess().getFormulaParserRuleCall_1()); }
	ruleFormula
{ after(grammarAccess.getElementAccess().getFormulaParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getElementAccess().getEnumDeclParserRuleCall_2()); }
	ruleEnumDecl
{ after(grammarAccess.getElementAccess().getEnumDeclParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getElementAccess().getAssertParserRuleCall_3()); }
	ruleAssert
{ after(grammarAccess.getElementAccess().getAssertParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getElementAccess().getReturnParserRuleCall_4()); }
	ruleReturn
{ after(grammarAccess.getElementAccess().getReturnParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getPrimitiveTypeParserRuleCall_0()); }
	rulePrimitiveType
{ after(grammarAccess.getTypeAccess().getPrimitiveTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getArrayTypeParserRuleCall_1()); }
	ruleArrayType
{ after(grammarAccess.getTypeAccess().getArrayTypeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getIntTypeParserRuleCall_0()); }
	ruleIntType
{ after(grammarAccess.getPrimitiveTypeAccess().getIntTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getBoolTypeParserRuleCall_1()); }
	ruleBoolType
{ after(grammarAccess.getPrimitiveTypeAccess().getBoolTypeParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getFloatTypeParserRuleCall_2()); }
	ruleFloatType
{ after(grammarAccess.getPrimitiveTypeAccess().getFloatTypeParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getEnumTypeParserRuleCall_3()); }
	ruleEnumType
{ after(grammarAccess.getPrimitiveTypeAccess().getEnumTypeParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getStringTypeParserRuleCall_4()); }
	ruleStringType
{ after(grammarAccess.getPrimitiveTypeAccess().getStringTypeParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getGroup_0()); }
(rule__Atomic__Group_0__0)
{ after(grammarAccess.getAtomicAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getAtomicAccess().getGroup_1()); }
(rule__Atomic__Group_1__0)
{ after(grammarAccess.getAtomicAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getAtomicAccess().getGroup_2()); }
(rule__Atomic__Group_2__0)
{ after(grammarAccess.getAtomicAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getIsTestedAssignment_0()); }
(rule__Model__IsTestedAssignment_0)?
{ after(grammarAccess.getModelAccess().getIsTestedAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getModelKeyword_1()); }

	'model' 

{ after(grammarAccess.getModelAccess().getModelKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getNameAssignment_2()); }
(rule__Model__NameAssignment_2)
{ after(grammarAccess.getModelAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__3__Impl
	rule__Model__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getUsingsAssignment_3()); }
(rule__Model__UsingsAssignment_3)*
{ after(grammarAccess.getModelAccess().getUsingsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getAlternatives_4()); }
(rule__Model__Alternatives_4)*
{ after(grammarAccess.getModelAccess().getAlternatives_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Using__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Using__Group__0__Impl
	rule__Using__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Using__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUsingAccess().getUsingKeyword_0()); }

	'using' 

{ after(grammarAccess.getUsingAccess().getUsingKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Using__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Using__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Using__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUsingAccess().getImportedNamespaceAssignment_1()); }
(rule__Using__ImportedNamespaceAssignment_1)
{ after(grammarAccess.getUsingAccess().getImportedNamespaceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ImportID__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportID__Group__0__Impl
	rule__ImportID__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportID__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportIDAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getImportIDAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImportID__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportID__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportID__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportIDAccess().getGroup_1()); }
(rule__ImportID__Group_1__0)
{ after(grammarAccess.getImportIDAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ImportID__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportID__Group_1__0__Impl
	rule__ImportID__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportID__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportIDAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getImportIDAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImportID__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportID__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportID__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportIDAccess().getAsteriskKeyword_1_1()); }

	'*' 

{ after(grammarAccess.getImportIDAccess().getAsteriskKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__0__Impl
	rule__FunctionDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getFunctionDeclarationAction_0()); }
(

)
{ after(grammarAccess.getFunctionDeclarationAccess().getFunctionDeclarationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__1__Impl
	rule__FunctionDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_1()); }

	'function' 

{ after(grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__2__Impl
	rule__FunctionDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getTypeAssignment_2()); }
(rule__FunctionDeclaration__TypeAssignment_2)
{ after(grammarAccess.getFunctionDeclarationAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__3__Impl
	rule__FunctionDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_3()); }
(rule__FunctionDeclaration__NameAssignment_3)
{ after(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__4__Impl
	rule__FunctionDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_4()); }

	'(' 

{ after(grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__5__Impl
	rule__FunctionDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup_5()); }
(rule__FunctionDeclaration__Group_5__0)?
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__6__Impl
	rule__FunctionDeclaration__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_6()); }

	')' 

{ after(grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__7__Impl
	rule__FunctionDeclaration__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getLeftCurlyBracketKeyword_7()); }

	'{' 

{ after(grammarAccess.getFunctionDeclarationAccess().getLeftCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__8__Impl
	rule__FunctionDeclaration__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getElementsAssignment_8()); }
(rule__FunctionDeclaration__ElementsAssignment_8)*
{ after(grammarAccess.getFunctionDeclarationAccess().getElementsAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getRightCurlyBracketKeyword_9()); }

	'}' 

{ after(grammarAccess.getFunctionDeclarationAccess().getRightCurlyBracketKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}






















rule__FunctionDeclaration__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_5__0__Impl
	rule__FunctionDeclaration__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParamsAssignment_5_0()); }
(rule__FunctionDeclaration__ParamsAssignment_5_0)
{ after(grammarAccess.getFunctionDeclarationAccess().getParamsAssignment_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup_5_1()); }
(rule__FunctionDeclaration__Group_5_1__0)*
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDeclaration__Group_5_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_5_1__0__Impl
	rule__FunctionDeclaration__Group_5_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_5_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_5_1_0()); }

	',' 

{ after(grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_5_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_5_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_5_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParamsAssignment_5_1_1()); }
(rule__FunctionDeclaration__ParamsAssignment_5_1_1)
{ after(grammarAccess.getFunctionDeclarationAccess().getParamsAssignment_5_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Return__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Return__Group__0__Impl
	rule__Return__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnAccess().getReturnKeyword_0()); }

	'return' 

{ after(grammarAccess.getReturnAccess().getReturnKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Return__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Return__Group__1__Impl
	rule__Return__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnAccess().getExprAssignment_1()); }
(rule__Return__ExprAssignment_1)
{ after(grammarAccess.getReturnAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Return__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Return__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getReturnAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Parameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getParameterAction_0()); }
(

)
{ after(grammarAccess.getParameterAccess().getParameterAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeAssignment_1()); }
(rule__Parameter__TypeAssignment_1)
{ after(grammarAccess.getParameterAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameAssignment_2()); }
(rule__Parameter__NameAssignment_2)
{ after(grammarAccess.getParameterAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Assert__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assert__Group__0__Impl
	rule__Assert__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assert__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertAccess().getAssertKeyword_0()); }

	'assert' 

{ after(grammarAccess.getAssertAccess().getAssertKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assert__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assert__Group__1__Impl
	rule__Assert__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assert__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertAccess().getActualAssignment_1()); }
(rule__Assert__ActualAssignment_1)
{ after(grammarAccess.getAssertAccess().getActualAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assert__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assert__Group__2__Impl
	rule__Assert__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Assert__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertAccess().getIsKeyword_2()); }

	'is' 

{ after(grammarAccess.getAssertAccess().getIsKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assert__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assert__Group__3__Impl
	rule__Assert__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Assert__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertAccess().getExpectedAssignment_3()); }
(rule__Assert__ExpectedAssignment_3)
{ after(grammarAccess.getAssertAccess().getExpectedAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assert__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assert__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assert__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertAccess().getGroup_4()); }
(rule__Assert__Group_4__0)?
{ after(grammarAccess.getAssertAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Assert__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assert__Group_4__0__Impl
	rule__Assert__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assert__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertAccess().getColonKeyword_4_0()); }

	':' 

{ after(grammarAccess.getAssertAccess().getColonKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assert__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assert__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assert__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertAccess().getMsgAssignment_4_1()); }
(rule__Assert__MsgAssignment_4_1)
{ after(grammarAccess.getAssertAccess().getMsgAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumDecl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumDecl__Group__0__Impl
	rule__EnumDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDecl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDeclAccess().getEnumKeyword_0()); }

	'enum' 

{ after(grammarAccess.getEnumDeclAccess().getEnumKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumDecl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumDecl__Group__1__Impl
	rule__EnumDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDecl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDeclAccess().getNameAssignment_1()); }
(rule__EnumDecl__NameAssignment_1)
{ after(grammarAccess.getEnumDeclAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumDecl__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumDecl__Group__2__Impl
	rule__EnumDecl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDecl__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDeclAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getEnumDeclAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumDecl__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumDecl__Group__3__Impl
	rule__EnumDecl__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDecl__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDeclAccess().getLiteralsAssignment_3()); }
(rule__EnumDecl__LiteralsAssignment_3)*
{ after(grammarAccess.getEnumDeclAccess().getLiteralsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumDecl__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumDecl__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDecl__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDeclAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getEnumDeclAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__EnumLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumLiteral__Group__0__Impl
	rule__EnumLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumLiteralAccess().getEnumLiteralAction_0()); }
(

)
{ after(grammarAccess.getEnumLiteralAccess().getEnumLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumLiteralAccess().getNameAssignment_1()); }
(rule__EnumLiteral__NameAssignment_1)
{ after(grammarAccess.getEnumLiteralAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VarDecl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group__0__Impl
	rule__VarDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getVarDeclAction_0()); }
(

)
{ after(grammarAccess.getVarDeclAccess().getVarDeclAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDecl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group__1__Impl
	rule__VarDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getReadonlyAssignment_1()); }
(rule__VarDecl__ReadonlyAssignment_1)?
{ after(grammarAccess.getVarDeclAccess().getReadonlyAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDecl__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group__2__Impl
	rule__VarDecl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getVarKeyword_2()); }

	'var' 

{ after(grammarAccess.getVarDeclAccess().getVarKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDecl__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group__3__Impl
	rule__VarDecl__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getTypeAssignment_3()); }
(rule__VarDecl__TypeAssignment_3)
{ after(grammarAccess.getVarDeclAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDecl__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group__4__Impl
	rule__VarDecl__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getNameAssignment_4()); }
(rule__VarDecl__NameAssignment_4)
{ after(grammarAccess.getVarDeclAccess().getNameAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDecl__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group__5__Impl
	rule__VarDecl__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getGroup_5()); }
(rule__VarDecl__Group_5__0)?
{ after(grammarAccess.getVarDeclAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDecl__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getSemicolonKeyword_6()); }

	';' 

{ after(grammarAccess.getVarDeclAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__VarDecl__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group_5__0__Impl
	rule__VarDecl__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getEqualsSignKeyword_5_0()); }

	'=' 

{ after(grammarAccess.getVarDeclAccess().getEqualsSignKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDecl__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getInitAssignment_5_1()); }
(rule__VarDecl__InitAssignment_5_1)
{ after(grammarAccess.getVarDeclAccess().getInitAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArrayType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayType__Group__0__Impl
	rule__ArrayType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getArrayTypeAction_0()); }
(

)
{ after(grammarAccess.getArrayTypeAccess().getArrayTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayType__Group__1__Impl
	rule__ArrayType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getArrayKeyword_1()); }

	'array' 

{ after(grammarAccess.getArrayTypeAccess().getArrayKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayType__Group__2__Impl
	rule__ArrayType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getLeftSquareBracketKeyword_2()); }

	'[' 

{ after(grammarAccess.getArrayTypeAccess().getLeftSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayType__Group__3__Impl
	rule__ArrayType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getBaseTypeAssignment_3()); }
(rule__ArrayType__BaseTypeAssignment_3)
{ after(grammarAccess.getArrayTypeAccess().getBaseTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayType__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayType__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getRightSquareBracketKeyword_4()); }

	']' 

{ after(grammarAccess.getArrayTypeAccess().getRightSquareBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__IntType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntType__Group__0__Impl
	rule__IntType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntTypeAccess().getIntTypeAction_0()); }
(

)
{ after(grammarAccess.getIntTypeAccess().getIntTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntTypeAccess().getIntKeyword_1()); }

	'int' 

{ after(grammarAccess.getIntTypeAccess().getIntKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BoolType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolType__Group__0__Impl
	rule__BoolType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolTypeAccess().getBoolTypeAction_0()); }
(

)
{ after(grammarAccess.getBoolTypeAccess().getBoolTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoolType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolTypeAccess().getBoolKeyword_1()); }

	'bool' 

{ after(grammarAccess.getBoolTypeAccess().getBoolKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FloatType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatType__Group__0__Impl
	rule__FloatType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatTypeAccess().getFloatTypeAction_0()); }
(

)
{ after(grammarAccess.getFloatTypeAccess().getFloatTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FloatType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatTypeAccess().getFloatKeyword_1()); }

	'float' 

{ after(grammarAccess.getFloatTypeAccess().getFloatKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StringType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringType__Group__0__Impl
	rule__StringType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringTypeAccess().getStringTypeAction_0()); }
(

)
{ after(grammarAccess.getStringTypeAccess().getStringTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringTypeAccess().getStringKeyword_1()); }

	'string' 

{ after(grammarAccess.getStringTypeAccess().getStringKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Formula__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Formula__Group__0__Impl
	rule__Formula__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaAccess().getFormulaAction_0()); }
(

)
{ after(grammarAccess.getFormulaAccess().getFormulaAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Formula__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Formula__Group__1__Impl
	rule__Formula__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaAccess().getCalcKeyword_1()); }

	'calc' 

{ after(grammarAccess.getFormulaAccess().getCalcKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Formula__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Formula__Group__2__Impl
	rule__Formula__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaAccess().getTypeAssignment_2()); }
(rule__Formula__TypeAssignment_2)
{ after(grammarAccess.getFormulaAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Formula__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Formula__Group__3__Impl
	rule__Formula__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaAccess().getNameAssignment_3()); }
(rule__Formula__NameAssignment_3)
{ after(grammarAccess.getFormulaAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Formula__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Formula__Group__4__Impl
	rule__Formula__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaAccess().getEqualsSignKeyword_4()); }

	'=' 

{ after(grammarAccess.getFormulaAccess().getEqualsSignKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Formula__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Formula__Group__5__Impl
	rule__Formula__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaAccess().getExprAssignment_5()); }
(rule__Formula__ExprAssignment_5)
{ after(grammarAccess.getFormulaAccess().getExprAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Formula__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Formula__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaAccess().getSemicolonKeyword_6()); }

	';' 

{ after(grammarAccess.getFormulaAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Comparison__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getAdditionParserRuleCall_0()); }
	ruleAddition
{ after(grammarAccess.getComparisonAccess().getAdditionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getGroup_1()); }
(rule__Comparison__Group_1__0)?
{ after(grammarAccess.getComparisonAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparison__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1__0__Impl
	rule__Comparison__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getEqualsLeftAction_1_0()); }
(

)
{ after(grammarAccess.getComparisonAccess().getEqualsLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1__1__Impl
	rule__Comparison__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getEqualsSignEqualsSignKeyword_1_1()); }

	'==' 

{ after(grammarAccess.getComparisonAccess().getEqualsSignEqualsSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRightAssignment_1_2()); }
(rule__Comparison__RightAssignment_1_2)
{ after(grammarAccess.getComparisonAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Addition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
(rule__Addition__Group_1__0)*
{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getPlusLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAdditionAccess().getPlusLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__1__Impl
	rule__Addition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1()); }

	'+' 

{ after(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
(rule__Addition__RightAssignment_1_2)
{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Multiplication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getPostfixOperatorsParserRuleCall_0()); }
	rulePostfixOperators
{ after(grammarAccess.getMultiplicationAccess().getPostfixOperatorsParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
(rule__Multiplication__Group_1__0)*
{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0()); }
(

)
{ after(grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__1__Impl
	rule__Multiplication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1()); }

	'*' 

{ after(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
(rule__Multiplication__RightAssignment_1_2)
{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PostfixOperators__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixOperators__Group__0__Impl
	rule__PostfixOperators__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOperators__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixOperatorsAccess().getAtomicParserRuleCall_0()); }
	ruleAtomic
{ after(grammarAccess.getPostfixOperatorsAccess().getAtomicParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixOperators__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixOperators__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOperators__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixOperatorsAccess().getGroup_1()); }
(rule__PostfixOperators__Group_1__0)?
{ after(grammarAccess.getPostfixOperatorsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PostfixOperators__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixOperators__Group_1__0__Impl
	rule__PostfixOperators__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOperators__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixOperatorsAccess().getArrayAccessExprAction_1_0()); }
(

)
{ after(grammarAccess.getPostfixOperatorsAccess().getArrayAccessExprAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixOperators__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixOperators__Group_1__1__Impl
	rule__PostfixOperators__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOperators__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixOperatorsAccess().getLeftSquareBracketKeyword_1_1()); }

	'[' 

{ after(grammarAccess.getPostfixOperatorsAccess().getLeftSquareBracketKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixOperators__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixOperators__Group_1__2__Impl
	rule__PostfixOperators__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOperators__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixOperatorsAccess().getIndexAssignment_1_2()); }
(rule__PostfixOperators__IndexAssignment_1_2)
{ after(grammarAccess.getPostfixOperatorsAccess().getIndexAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixOperators__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixOperators__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOperators__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixOperatorsAccess().getRightSquareBracketKeyword_1_3()); }

	']' 

{ after(grammarAccess.getPostfixOperatorsAccess().getRightSquareBracketKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Atomic__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_0__0__Impl
	rule__Atomic__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getSymbolRefAction_0_0()); }
(

)
{ after(grammarAccess.getAtomicAccess().getSymbolRefAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_0__1__Impl
	rule__Atomic__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getSymbolAssignment_0_1()); }
(rule__Atomic__SymbolAssignment_0_1)
{ after(grammarAccess.getAtomicAccess().getSymbolAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getGroup_0_2()); }
(rule__Atomic__Group_0_2__0)?
{ after(grammarAccess.getAtomicAccess().getGroup_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Atomic__Group_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_0_2__0__Impl
	rule__Atomic__Group_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getLeftParenthesisKeyword_0_2_0()); }

	'(' 

{ after(grammarAccess.getAtomicAccess().getLeftParenthesisKeyword_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_0_2__1__Impl
	rule__Atomic__Group_0_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getActualsAssignment_0_2_1()); }
(rule__Atomic__ActualsAssignment_0_2_1)?
{ after(grammarAccess.getAtomicAccess().getActualsAssignment_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_0_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_0_2__2__Impl
	rule__Atomic__Group_0_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getGroup_0_2_2()); }
(rule__Atomic__Group_0_2_2__0)*
{ after(grammarAccess.getAtomicAccess().getGroup_0_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_0_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_0_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getRightParenthesisKeyword_0_2_3()); }

	')' 

{ after(grammarAccess.getAtomicAccess().getRightParenthesisKeyword_0_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Atomic__Group_0_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_0_2_2__0__Impl
	rule__Atomic__Group_0_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getCommaKeyword_0_2_2_0()); }

	',' 

{ after(grammarAccess.getAtomicAccess().getCommaKeyword_0_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_0_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_0_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getActualsAssignment_0_2_2_1()); }
(rule__Atomic__ActualsAssignment_0_2_2_1)
{ after(grammarAccess.getAtomicAccess().getActualsAssignment_0_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Atomic__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_1__0__Impl
	rule__Atomic__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getNumberLiteralAction_1_0()); }
(

)
{ after(grammarAccess.getAtomicAccess().getNumberLiteralAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueAssignment_1_1()); }
(rule__Atomic__ValueAssignment_1_1)
{ after(grammarAccess.getAtomicAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Atomic__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_2__0__Impl
	rule__Atomic__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getStringLiteralAction_2_0()); }
(

)
{ after(grammarAccess.getAtomicAccess().getStringLiteralAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueAssignment_2_1()); }
(rule__Atomic__ValueAssignment_2_1)
{ after(grammarAccess.getAtomicAccess().getValueAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QID__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QID__Group__0__Impl
	rule__QID__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QID__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQIDAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQIDAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QID__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QID__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QID__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQIDAccess().getGroup_1()); }
(rule__QID__Group_1__0)*
{ after(grammarAccess.getQIDAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QID__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QID__Group_1__0__Impl
	rule__QID__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QID__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQIDAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQIDAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QID__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QID__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QID__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQIDAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQIDAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__IsTestedAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getIsTestedTestedKeyword_0_0()); }
(
{ before(grammarAccess.getModelAccess().getIsTestedTestedKeyword_0_0()); }

	'tested' 

{ after(grammarAccess.getModelAccess().getIsTestedTestedKeyword_0_0()); }
)

{ after(grammarAccess.getModelAccess().getIsTestedTestedKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__UsingsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getUsingsUsingParserRuleCall_3_0()); }
	ruleUsing{ after(grammarAccess.getModelAccess().getUsingsUsingParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ElementsAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getElementsElementParserRuleCall_4_0_0()); }
	ruleElement{ after(grammarAccess.getModelAccess().getElementsElementParserRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__FunctionsAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getFunctionsFunctionDeclarationParserRuleCall_4_1_0()); }
	ruleFunctionDeclaration{ after(grammarAccess.getModelAccess().getFunctionsFunctionDeclarationParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Using__ImportedNamespaceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUsingAccess().getImportedNamespaceImportIDParserRuleCall_1_0()); }
	ruleImportID{ after(grammarAccess.getUsingAccess().getImportedNamespaceImportIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getTypeTypeParserRuleCall_2_0()); }
	ruleType{ after(grammarAccess.getFunctionDeclarationAccess().getTypeTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ParamsAssignment_5_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParamsParameterParserRuleCall_5_0_0()); }
	ruleParameter{ after(grammarAccess.getFunctionDeclarationAccess().getParamsParameterParserRuleCall_5_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ParamsAssignment_5_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParamsParameterParserRuleCall_5_1_1_0()); }
	ruleParameter{ after(grammarAccess.getFunctionDeclarationAccess().getParamsParameterParserRuleCall_5_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ElementsAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getElementsElementParserRuleCall_8_0()); }
	ruleElement{ after(grammarAccess.getFunctionDeclarationAccess().getElementsElementParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Return__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnAccess().getExprExprParserRuleCall_1_0()); }
	ruleExpr{ after(grammarAccess.getReturnAccess().getExprExprParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_1_0()); }
	ruleType{ after(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assert__ActualAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertAccess().getActualExprParserRuleCall_1_0()); }
	ruleExpr{ after(grammarAccess.getAssertAccess().getActualExprParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assert__ExpectedAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertAccess().getExpectedExprParserRuleCall_3_0()); }
	ruleExpr{ after(grammarAccess.getAssertAccess().getExpectedExprParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assert__MsgAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertAccess().getMsgExprParserRuleCall_4_1_0()); }
	ruleExpr{ after(grammarAccess.getAssertAccess().getMsgExprParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDecl__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDeclAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getEnumDeclAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDecl__LiteralsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDeclAccess().getLiteralsEnumLiteralParserRuleCall_3_0()); }
	ruleEnumLiteral{ after(grammarAccess.getEnumDeclAccess().getLiteralsEnumLiteralParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumLiteral__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumLiteralAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getEnumLiteralAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__ReadonlyAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getReadonlyReadonlyKeyword_1_0()); }
(
{ before(grammarAccess.getVarDeclAccess().getReadonlyReadonlyKeyword_1_0()); }

	'readonly' 

{ after(grammarAccess.getVarDeclAccess().getReadonlyReadonlyKeyword_1_0()); }
)

{ after(grammarAccess.getVarDeclAccess().getReadonlyReadonlyKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getTypeTypeParserRuleCall_3_0()); }
	ruleType{ after(grammarAccess.getVarDeclAccess().getTypeTypeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__NameAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getNameIDTerminalRuleCall_4_0()); }
	RULE_ID{ after(grammarAccess.getVarDeclAccess().getNameIDTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__InitAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getInitExprParserRuleCall_5_1_0()); }
	ruleExpr{ after(grammarAccess.getVarDeclAccess().getInitExprParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__BaseTypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getBaseTypeTypeParserRuleCall_3_0()); }
	ruleType{ after(grammarAccess.getArrayTypeAccess().getBaseTypeTypeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__EnumRefAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumTypeAccess().getEnumRefEnumDeclCrossReference_0()); }
(
{ before(grammarAccess.getEnumTypeAccess().getEnumRefEnumDeclIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getEnumTypeAccess().getEnumRefEnumDeclIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getEnumTypeAccess().getEnumRefEnumDeclCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaAccess().getTypeTypeParserRuleCall_2_0()); }
	ruleType{ after(grammarAccess.getFormulaAccess().getTypeTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaAccess().getNameIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getFormulaAccess().getNameIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__ExprAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaAccess().getExprExprParserRuleCall_5_0()); }
	ruleExpr{ after(grammarAccess.getFormulaAccess().getExprExprParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRightAdditionParserRuleCall_1_2_0()); }
	ruleAddition{ after(grammarAccess.getComparisonAccess().getRightAdditionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
	ruleMultiplication{ after(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightPostfixOperatorsParserRuleCall_1_2_0()); }
	rulePostfixOperators{ after(grammarAccess.getMultiplicationAccess().getRightPostfixOperatorsParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOperators__IndexAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixOperatorsAccess().getIndexExprParserRuleCall_1_2_0()); }
	ruleExpr{ after(grammarAccess.getPostfixOperatorsAccess().getIndexExprParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__SymbolAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getSymbolSymbolCrossReference_0_1_0()); }
(
{ before(grammarAccess.getAtomicAccess().getSymbolSymbolQIDParserRuleCall_0_1_0_1()); }
	ruleQID{ after(grammarAccess.getAtomicAccess().getSymbolSymbolQIDParserRuleCall_0_1_0_1()); }
)
{ after(grammarAccess.getAtomicAccess().getSymbolSymbolCrossReference_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ActualsAssignment_0_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getActualsExprParserRuleCall_0_2_1_0()); }
	ruleExpr{ after(grammarAccess.getAtomicAccess().getActualsExprParserRuleCall_0_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ActualsAssignment_0_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getActualsExprParserRuleCall_0_2_2_1_0()); }
	ruleExpr{ after(grammarAccess.getAtomicAccess().getActualsExprParserRuleCall_0_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueNUMBERTerminalRuleCall_1_1_0()); }
	RULE_NUMBER{ after(grammarAccess.getAtomicAccess().getValueNUMBERTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueSTRINGTerminalRuleCall_2_1_0()); }
	RULE_STRING{ after(grammarAccess.getAtomicAccess().getValueSTRINGTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_NUMBER : ('0'..'9')* ('.' ('0'..'9')+)?;

RULE_INT : '$$$don\'t use this anymore$$$';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


