/*
* generated by Xtext
*/
package gpp.tests.operators.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import gpp.tests.operators.services.OperatorsTestGrammarAccess;

public class OperatorsTestParser extends AbstractContentAssistParser {
	
	@Inject
	private OperatorsTestGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected gpp.tests.operators.ui.contentassist.antlr.internal.InternalOperatorsTestParser createParser() {
		gpp.tests.operators.ui.contentassist.antlr.internal.InternalOperatorsTestParser result = new gpp.tests.operators.ui.contentassist.antlr.internal.InternalOperatorsTestParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getBoxModelOperatorsAccess().getAlternatives_1(), "rule__BoxModelOperators__Alternatives_1");
					put(grammarAccess.getStringConstantAccess().getAlternatives_0(), "rule__StringConstant__Alternatives_0");
					put(grammarAccess.getIntConstantAccess().getAlternatives_0(), "rule__IntConstant__Alternatives_0");
					put(grammarAccess.getOperatorDefinitionAccess().getAlternatives(), "rule__OperatorDefinition__Alternatives");
					put(grammarAccess.getBasicOperatorDefinitionAccess().getAlternatives_0(), "rule__BasicOperatorDefinition__Alternatives_0");
					put(grammarAccess.getPositionalOperatorDefinitionAccess().getAlternatives_1(), "rule__PositionalOperatorDefinition__Alternatives_1");
					put(grammarAccess.getHighlightOperatorDefinitionAccess().getAlternatives_1(), "rule__HighlightOperatorDefinition__Alternatives_1");
					put(grammarAccess.getTransformingOperatorDefinitionAccess().getAlternatives_1(), "rule__TransformingOperatorDefinition__Alternatives_1");
					put(grammarAccess.getParameterDefinitionAccess().getAlternatives(), "rule__ParameterDefinition__Alternatives");
					put(grammarAccess.getStringParameterDefinitionAccess().getAlternatives_0(), "rule__StringParameterDefinition__Alternatives_0");
					put(grammarAccess.getIntParameterDefinitionAccess().getAlternatives_0(), "rule__IntParameterDefinition__Alternatives_0");
					put(grammarAccess.getEnumParameterDefinitionAccess().getAlternatives_1(), "rule__EnumParameterDefinition__Alternatives_1");
					put(grammarAccess.getStringParameterValueAccess().getAlternatives(), "rule__StringParameterValue__Alternatives");
					put(grammarAccess.getParameterApplicationValueAccess().getAlternatives(), "rule__ParameterApplicationValue__Alternatives");
					put(grammarAccess.getConstantAccess().getAlternatives(), "rule__Constant__Alternatives");
					put(grammarAccess.getIntParameterValueAccess().getAlternatives(), "rule__IntParameterValue__Alternatives");
					put(grammarAccess.getBoxModelOperatorsAccess().getGroup(), "rule__BoxModelOperators__Group__0");
					put(grammarAccess.getStringConstantAccess().getGroup(), "rule__StringConstant__Group__0");
					put(grammarAccess.getIntConstantAccess().getGroup(), "rule__IntConstant__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getOperatorImplementationStringAccess().getGroup(), "rule__OperatorImplementationString__Group__0");
					put(grammarAccess.getOperatorImplementationStringAccess().getGroup_1(), "rule__OperatorImplementationString__Group_1__0");
					put(grammarAccess.getBasicOperatorDefinitionAccess().getGroup(), "rule__BasicOperatorDefinition__Group__0");
					put(grammarAccess.getBasicOperatorDefinitionAccess().getGroup_5(), "rule__BasicOperatorDefinition__Group_5__0");
					put(grammarAccess.getPositionalOperatorDefinitionAccess().getGroup(), "rule__PositionalOperatorDefinition__Group__0");
					put(grammarAccess.getHighlightOperatorDefinitionAccess().getGroup(), "rule__HighlightOperatorDefinition__Group__0");
					put(grammarAccess.getTransformingOperatorDefinitionAccess().getGroup(), "rule__TransformingOperatorDefinition__Group__0");
					put(grammarAccess.getAliasOperatorDefinitionAccess().getGroup(), "rule__AliasOperatorDefinition__Group__0");
					put(grammarAccess.getAliasOperatorDefinitionAccess().getGroup_5(), "rule__AliasOperatorDefinition__Group_5__0");
					put(grammarAccess.getParameterApplicationAccess().getGroup(), "rule__ParameterApplication__Group__0");
					put(grammarAccess.getStringParameterDefinitionAccess().getGroup(), "rule__StringParameterDefinition__Group__0");
					put(grammarAccess.getIntParameterDefinitionAccess().getGroup(), "rule__IntParameterDefinition__Group__0");
					put(grammarAccess.getEnumParameterDefinitionAccess().getGroup(), "rule__EnumParameterDefinition__Group__0");
					put(grammarAccess.getEnumParameterDefinitionAccess().getGroup_1_0(), "rule__EnumParameterDefinition__Group_1_0__0");
					put(grammarAccess.getEnumParameterDefinitionAccess().getGroup_1_0_1(), "rule__EnumParameterDefinition__Group_1_0_1__0");
					put(grammarAccess.getEnumParameterDefinitionAccess().getGroup_1_1(), "rule__EnumParameterDefinition__Group_1_1__0");
					put(grammarAccess.getGlobalEnumAccess().getGroup(), "rule__GlobalEnum__Group__0");
					put(grammarAccess.getGlobalEnumAccess().getGroup_5(), "rule__GlobalEnum__Group_5__0");
					put(grammarAccess.getBoxModelOperatorsAccess().getImportsAssignment_0(), "rule__BoxModelOperators__ImportsAssignment_0");
					put(grammarAccess.getBoxModelOperatorsAccess().getOperatorDefinitionsAssignment_1_0(), "rule__BoxModelOperators__OperatorDefinitionsAssignment_1_0");
					put(grammarAccess.getBoxModelOperatorsAccess().getEnumerationsAssignment_1_1(), "rule__BoxModelOperators__EnumerationsAssignment_1_1");
					put(grammarAccess.getBoxModelOperatorsAccess().getIntConstantsAssignment_1_2(), "rule__BoxModelOperators__IntConstantsAssignment_1_2");
					put(grammarAccess.getBoxModelOperatorsAccess().getStringConstantsAssignment_1_3(), "rule__BoxModelOperators__StringConstantsAssignment_1_3");
					put(grammarAccess.getStringConstantAccess().getNameAssignment_1(), "rule__StringConstant__NameAssignment_1");
					put(grammarAccess.getStringConstantAccess().getValueAssignment_3(), "rule__StringConstant__ValueAssignment_3");
					put(grammarAccess.getIntConstantAccess().getNameAssignment_1(), "rule__IntConstant__NameAssignment_1");
					put(grammarAccess.getIntConstantAccess().getValueAssignment_3(), "rule__IntConstant__ValueAssignment_3");
					put(grammarAccess.getImportAccess().getImportURIAssignment_1(), "rule__Import__ImportURIAssignment_1");
					put(grammarAccess.getBasicOperatorDefinitionAccess().getNameAssignment_1(), "rule__BasicOperatorDefinition__NameAssignment_1");
					put(grammarAccess.getBasicOperatorDefinitionAccess().getImplementationAssignment_3(), "rule__BasicOperatorDefinition__ImplementationAssignment_3");
					put(grammarAccess.getBasicOperatorDefinitionAccess().getParametersAssignment_5_1(), "rule__BasicOperatorDefinition__ParametersAssignment_5_1");
					put(grammarAccess.getAliasOperatorDefinitionAccess().getNameAssignment_1(), "rule__AliasOperatorDefinition__NameAssignment_1");
					put(grammarAccess.getAliasOperatorDefinitionAccess().getOperatorAssignment_3(), "rule__AliasOperatorDefinition__OperatorAssignment_3");
					put(grammarAccess.getAliasOperatorDefinitionAccess().getParametersAssignment_5_1(), "rule__AliasOperatorDefinition__ParametersAssignment_5_1");
					put(grammarAccess.getParameterApplicationAccess().getReferencedParameterAssignment_0(), "rule__ParameterApplication__ReferencedParameterAssignment_0");
					put(grammarAccess.getParameterApplicationAccess().getValueAssignment_2(), "rule__ParameterApplication__ValueAssignment_2");
					put(grammarAccess.getStringParameterDefinitionAccess().getNameAssignment_1(), "rule__StringParameterDefinition__NameAssignment_1");
					put(grammarAccess.getStringParameterDefinitionAccess().getValueAssignment_3(), "rule__StringParameterDefinition__ValueAssignment_3");
					put(grammarAccess.getIntParameterDefinitionAccess().getNameAssignment_1(), "rule__IntParameterDefinition__NameAssignment_1");
					put(grammarAccess.getIntParameterDefinitionAccess().getValueAssignment_3(), "rule__IntParameterDefinition__ValueAssignment_3");
					put(grammarAccess.getEnumParameterDefinitionAccess().getAlternativesAssignment_1_0_0(), "rule__EnumParameterDefinition__AlternativesAssignment_1_0_0");
					put(grammarAccess.getEnumParameterDefinitionAccess().getAlternativesAssignment_1_0_1_1(), "rule__EnumParameterDefinition__AlternativesAssignment_1_0_1_1");
					put(grammarAccess.getEnumParameterDefinitionAccess().getEnumerationAssignment_1_1_1(), "rule__EnumParameterDefinition__EnumerationAssignment_1_1_1");
					put(grammarAccess.getEnumParameterDefinitionAccess().getNameAssignment_3(), "rule__EnumParameterDefinition__NameAssignment_3");
					put(grammarAccess.getEnumParameterDefinitionAccess().getValueAssignment_5(), "rule__EnumParameterDefinition__ValueAssignment_5");
					put(grammarAccess.getGlobalEnumAccess().getNameAssignment_1(), "rule__GlobalEnum__NameAssignment_1");
					put(grammarAccess.getGlobalEnumAccess().getAlternativesAssignment_4(), "rule__GlobalEnum__AlternativesAssignment_4");
					put(grammarAccess.getGlobalEnumAccess().getAlternativesAssignment_5_1(), "rule__GlobalEnum__AlternativesAssignment_5_1");
					put(grammarAccess.getEnumAlternativeAccess().getNameAssignment(), "rule__EnumAlternative__NameAssignment");
					put(grammarAccess.getConstantReferenceValueAccess().getValueAssignment(), "rule__ConstantReferenceValue__ValueAssignment");
					put(grammarAccess.getStringValueAccess().getValueAssignment(), "rule__StringValue__ValueAssignment");
					put(grammarAccess.getStringConstantApplicationAccess().getValueAssignment(), "rule__StringConstantApplication__ValueAssignment");
					put(grammarAccess.getIntValueAccess().getValueAssignment(), "rule__IntValue__ValueAssignment");
					put(grammarAccess.getIntConstantApplicationAccess().getValueAssignment(), "rule__IntConstantApplication__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			gpp.tests.operators.ui.contentassist.antlr.internal.InternalOperatorsTestParser typedParser = (gpp.tests.operators.ui.contentassist.antlr.internal.InternalOperatorsTestParser) parser;
			typedParser.entryRuleBoxModelOperators();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public OperatorsTestGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(OperatorsTestGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
