/*
* generated by Xtext
*/
grammar InternalOperatorsTest;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package gpp.tests.operators.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package gpp.tests.operators.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import gpp.tests.operators.services.OperatorsTestGrammarAccess;

}

@parser::members {

 	private OperatorsTestGrammarAccess grammarAccess;
 	
    public InternalOperatorsTestParser(TokenStream input, OperatorsTestGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "BoxModelOperators";	
   	}
   	
   	@Override
   	protected OperatorsTestGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleBoxModelOperators
entryRuleBoxModelOperators returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoxModelOperatorsRule()); }
	 iv_ruleBoxModelOperators=ruleBoxModelOperators 
	 { $current=$iv_ruleBoxModelOperators.current; } 
	 EOF 
;

// Rule BoxModelOperators
ruleBoxModelOperators returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBoxModelOperatorsAccess().getImportsImportParserRuleCall_0_0()); 
	    }
		lv_imports_0_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBoxModelOperatorsRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_0_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getBoxModelOperatorsAccess().getOperatorDefinitionsOperatorDefinitionParserRuleCall_1_0_0()); 
	    }
		lv_operatorDefinitions_1_0=ruleOperatorDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBoxModelOperatorsRule());
	        }
       		add(
       			$current, 
       			"operatorDefinitions",
        		lv_operatorDefinitions_1_0, 
        		"OperatorDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBoxModelOperatorsAccess().getEnumerationsGlobalEnumParserRuleCall_1_1_0()); 
	    }
		lv_enumerations_2_0=ruleGlobalEnum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBoxModelOperatorsRule());
	        }
       		add(
       			$current, 
       			"enumerations",
        		lv_enumerations_2_0, 
        		"GlobalEnum");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBoxModelOperatorsAccess().getIntConstantsIntConstantParserRuleCall_1_2_0()); 
	    }
		lv_intConstants_3_0=ruleIntConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBoxModelOperatorsRule());
	        }
       		add(
       			$current, 
       			"intConstants",
        		lv_intConstants_3_0, 
        		"IntConstant");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBoxModelOperatorsAccess().getStringConstantsStringConstantParserRuleCall_1_3_0()); 
	    }
		lv_stringConstants_4_0=ruleStringConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBoxModelOperatorsRule());
	        }
       		add(
       			$current, 
       			"stringConstants",
        		lv_stringConstants_4_0, 
        		"StringConstant");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleStringConstant
entryRuleStringConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringConstantRule()); }
	 iv_ruleStringConstant=ruleStringConstant 
	 { $current=$iv_ruleStringConstant.current; } 
	 EOF 
;

// Rule StringConstant
ruleStringConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='string' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStringConstantAccess().getStringKeyword_0_0());
    }

    |	otherlv_1='str' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStringConstantAccess().getStrKeyword_0_1());
    }
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getStringConstantAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStringConstantAccess().getEqualsSignKeyword_2());
    }
(
(
		lv_value_4_0=RULE_STRING
		{
			newLeafNode(lv_value_4_0, grammarAccess.getStringConstantAccess().getValueSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleIntConstant
entryRuleIntConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntConstantRule()); }
	 iv_ruleIntConstant=ruleIntConstant 
	 { $current=$iv_ruleIntConstant.current; } 
	 EOF 
;

// Rule IntConstant
ruleIntConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='integer' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIntConstantAccess().getIntegerKeyword_0_0());
    }

    |	otherlv_1='int' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIntConstantAccess().getIntKeyword_0_1());
    }
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getIntConstantAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIntConstantAccess().getEqualsSignKeyword_2());
    }
(
(
		lv_value_4_0=RULE_INT
		{
			newLeafNode(lv_value_4_0, grammarAccess.getIntConstantAccess().getValueINTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			newLeafNode(lv_importURI_1_0, grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleOperatorImplementationString
entryRuleOperatorImplementationString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperatorImplementationStringRule()); } 
	 iv_ruleOperatorImplementationString=ruleOperatorImplementationString 
	 { $current=$iv_ruleOperatorImplementationString.current.getText(); }  
	 EOF 
;

// Rule OperatorImplementationString
ruleOperatorImplementationString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getOperatorImplementationStringAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorImplementationStringAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getOperatorImplementationStringAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleOperatorDefinition
entryRuleOperatorDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperatorDefinitionRule()); }
	 iv_ruleOperatorDefinition=ruleOperatorDefinition 
	 { $current=$iv_ruleOperatorDefinition.current; } 
	 EOF 
;

// Rule OperatorDefinition
ruleOperatorDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOperatorDefinitionAccess().getBasicOperatorDefinitionParserRuleCall_0()); 
    }
    this_BasicOperatorDefinition_0=ruleBasicOperatorDefinition
    { 
        $current = $this_BasicOperatorDefinition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getOperatorDefinitionAccess().getAliasOperatorDefinitionParserRuleCall_1()); 
    }
    this_AliasOperatorDefinition_1=ruleAliasOperatorDefinition
    { 
        $current = $this_AliasOperatorDefinition_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBasicOperatorDefinition
entryRuleBasicOperatorDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicOperatorDefinitionRule()); }
	 iv_ruleBasicOperatorDefinition=ruleBasicOperatorDefinition 
	 { $current=$iv_ruleBasicOperatorDefinition.current; } 
	 EOF 
;

// Rule BasicOperatorDefinition
ruleBasicOperatorDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getBasicOperatorDefinitionAccess().getHighlightOperatorDefinitionParserRuleCall_0_0()); 
    }
    this_HighlightOperatorDefinition_0=ruleHighlightOperatorDefinition
    { 
        $current = $this_HighlightOperatorDefinition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBasicOperatorDefinitionAccess().getPositionalOperatorDefinitionParserRuleCall_0_1()); 
    }
    this_PositionalOperatorDefinition_1=rulePositionalOperatorDefinition
    { 
        $current = $this_PositionalOperatorDefinition_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBasicOperatorDefinitionAccess().getTransformingOperatorDefinitionParserRuleCall_0_2()); 
    }
    this_TransformingOperatorDefinition_2=ruleTransformingOperatorDefinition
    { 
        $current = $this_TransformingOperatorDefinition_2.current; 
        afterParserOrEnumRuleCall();
    }
)(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getBasicOperatorDefinitionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasicOperatorDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4='[' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBasicOperatorDefinitionAccess().getLeftSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicOperatorDefinitionAccess().getImplementationOperatorImplementationStringParserRuleCall_3_0()); 
	    }
		lv_implementation_5_0=ruleOperatorImplementationString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicOperatorDefinitionRule());
	        }
       		set(
       			$current, 
       			"implementation",
        		lv_implementation_5_0, 
        		"OperatorImplementationString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getBasicOperatorDefinitionAccess().getRightSquareBracketKeyword_4());
    }
(	otherlv_7=':' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getBasicOperatorDefinitionAccess().getColonKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicOperatorDefinitionAccess().getParametersParameterDefinitionParserRuleCall_5_1_0()); 
	    }
		lv_parameters_8_0=ruleParameterDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicOperatorDefinitionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_8_0, 
        		"ParameterDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getBasicOperatorDefinitionAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRulePositionalOperatorDefinition
entryRulePositionalOperatorDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPositionalOperatorDefinitionRule()); }
	 iv_rulePositionalOperatorDefinition=rulePositionalOperatorDefinition 
	 { $current=$iv_rulePositionalOperatorDefinition.current; } 
	 EOF 
;

// Rule PositionalOperatorDefinition
rulePositionalOperatorDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPositionalOperatorDefinitionAccess().getPositionalOperatorDefinitionAction_0(),
            $current);
    }
)(	otherlv_1='pop' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPositionalOperatorDefinitionAccess().getPopKeyword_1_0());
    }

    |	otherlv_2='poperator' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPositionalOperatorDefinitionAccess().getPoperatorKeyword_1_1());
    }
))
;





// Entry rule entryRuleHighlightOperatorDefinition
entryRuleHighlightOperatorDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHighlightOperatorDefinitionRule()); }
	 iv_ruleHighlightOperatorDefinition=ruleHighlightOperatorDefinition 
	 { $current=$iv_ruleHighlightOperatorDefinition.current; } 
	 EOF 
;

// Rule HighlightOperatorDefinition
ruleHighlightOperatorDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getHighlightOperatorDefinitionAccess().getHighlightOperatorDefinitionAction_0(),
            $current);
    }
)(	otherlv_1='hlop' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getHighlightOperatorDefinitionAccess().getHlopKeyword_1_0());
    }

    |	otherlv_2='hloperator' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getHighlightOperatorDefinitionAccess().getHloperatorKeyword_1_1());
    }
))
;





// Entry rule entryRuleTransformingOperatorDefinition
entryRuleTransformingOperatorDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransformingOperatorDefinitionRule()); }
	 iv_ruleTransformingOperatorDefinition=ruleTransformingOperatorDefinition 
	 { $current=$iv_ruleTransformingOperatorDefinition.current; } 
	 EOF 
;

// Rule TransformingOperatorDefinition
ruleTransformingOperatorDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTransformingOperatorDefinitionAccess().getTransformingOperatorDefinitionAction_0(),
            $current);
    }
)(	otherlv_1='top' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransformingOperatorDefinitionAccess().getTopKeyword_1_0());
    }

    |	otherlv_2='toperator' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTransformingOperatorDefinitionAccess().getToperatorKeyword_1_1());
    }
))
;





// Entry rule entryRuleAliasOperatorDefinition
entryRuleAliasOperatorDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAliasOperatorDefinitionRule()); }
	 iv_ruleAliasOperatorDefinition=ruleAliasOperatorDefinition 
	 { $current=$iv_ruleAliasOperatorDefinition.current; } 
	 EOF 
;

// Rule AliasOperatorDefinition
ruleAliasOperatorDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='alias' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAliasOperatorDefinitionAccess().getAliasKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAliasOperatorDefinitionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAliasOperatorDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAliasOperatorDefinitionAccess().getLeftSquareBracketKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAliasOperatorDefinitionRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getAliasOperatorDefinitionAccess().getOperatorOperatorDefinitionCrossReference_3_0()); 
	}

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAliasOperatorDefinitionAccess().getRightSquareBracketKeyword_4());
    }
(	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAliasOperatorDefinitionAccess().getColonKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAliasOperatorDefinitionAccess().getParametersParameterApplicationParserRuleCall_5_1_0()); 
	    }
		lv_parameters_6_0=ruleParameterApplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAliasOperatorDefinitionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_6_0, 
        		"ParameterApplication");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAliasOperatorDefinitionAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleParameterApplication
entryRuleParameterApplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterApplicationRule()); }
	 iv_ruleParameterApplication=ruleParameterApplication 
	 { $current=$iv_ruleParameterApplication.current; } 
	 EOF 
;

// Rule ParameterApplication
ruleParameterApplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterApplicationRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getParameterApplicationAccess().getReferencedParameterParameterDefinitionCrossReference_0_0()); 
	}

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterApplicationAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterApplicationAccess().getValueParameterApplicationValueParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleParameterApplicationValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterApplicationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"ParameterApplicationValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParameterDefinition
entryRuleParameterDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterDefinitionRule()); }
	 iv_ruleParameterDefinition=ruleParameterDefinition 
	 { $current=$iv_ruleParameterDefinition.current; } 
	 EOF 
;

// Rule ParameterDefinition
ruleParameterDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getParameterDefinitionAccess().getStringParameterDefinitionParserRuleCall_0()); 
    }
    this_StringParameterDefinition_0=ruleStringParameterDefinition
    { 
        $current = $this_StringParameterDefinition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getParameterDefinitionAccess().getIntParameterDefinitionParserRuleCall_1()); 
    }
    this_IntParameterDefinition_1=ruleIntParameterDefinition
    { 
        $current = $this_IntParameterDefinition_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getParameterDefinitionAccess().getEnumParameterDefinitionParserRuleCall_2()); 
    }
    this_EnumParameterDefinition_2=ruleEnumParameterDefinition
    { 
        $current = $this_EnumParameterDefinition_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStringParameterDefinition
entryRuleStringParameterDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringParameterDefinitionRule()); }
	 iv_ruleStringParameterDefinition=ruleStringParameterDefinition 
	 { $current=$iv_ruleStringParameterDefinition.current; } 
	 EOF 
;

// Rule StringParameterDefinition
ruleStringParameterDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='string' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStringParameterDefinitionAccess().getStringKeyword_0_0());
    }

    |	otherlv_1='str' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStringParameterDefinitionAccess().getStrKeyword_0_1());
    }
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getStringParameterDefinitionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringParameterDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStringParameterDefinitionAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringParameterDefinitionAccess().getValueStringParameterValueParserRuleCall_3_0()); 
	    }
		lv_value_4_0=ruleStringParameterValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringParameterDefinitionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"StringParameterValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIntParameterDefinition
entryRuleIntParameterDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntParameterDefinitionRule()); }
	 iv_ruleIntParameterDefinition=ruleIntParameterDefinition 
	 { $current=$iv_ruleIntParameterDefinition.current; } 
	 EOF 
;

// Rule IntParameterDefinition
ruleIntParameterDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='integer' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIntParameterDefinitionAccess().getIntegerKeyword_0_0());
    }

    |	otherlv_1='int' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIntParameterDefinitionAccess().getIntKeyword_0_1());
    }
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getIntParameterDefinitionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntParameterDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIntParameterDefinitionAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntParameterDefinitionAccess().getValueIntParameterValueParserRuleCall_3_0()); 
	    }
		lv_value_4_0=ruleIntParameterValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntParameterDefinitionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"IntParameterValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEnumParameterDefinition
entryRuleEnumParameterDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumParameterDefinitionRule()); }
	 iv_ruleEnumParameterDefinition=ruleEnumParameterDefinition 
	 { $current=$iv_ruleEnumParameterDefinition.current; } 
	 EOF 
;

// Rule EnumParameterDefinition
ruleEnumParameterDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEnumParameterDefinitionAccess().getLeftCurlyBracketKeyword_0());
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getEnumParameterDefinitionAccess().getAlternativesEnumAlternativeParserRuleCall_1_0_0_0()); 
	    }
		lv_alternatives_1_0=ruleEnumAlternative		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumParameterDefinitionRule());
	        }
       		add(
       			$current, 
       			"alternatives",
        		lv_alternatives_1_0, 
        		"EnumAlternative");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnumParameterDefinitionAccess().getCommaKeyword_1_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumParameterDefinitionAccess().getAlternativesEnumAlternativeParserRuleCall_1_0_1_1_0()); 
	    }
		lv_alternatives_3_0=ruleEnumAlternative		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumParameterDefinitionRule());
	        }
       		add(
       			$current, 
       			"alternatives",
        		lv_alternatives_3_0, 
        		"EnumAlternative");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
    |(	otherlv_4='[' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEnumParameterDefinitionAccess().getLeftSquareBracketKeyword_1_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumParameterDefinitionRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getEnumParameterDefinitionAccess().getEnumerationGlobalEnumCrossReference_1_1_1_0()); 
	}

)
)	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEnumParameterDefinitionAccess().getRightSquareBracketKeyword_1_1_2());
    }
))	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getEnumParameterDefinitionAccess().getRightCurlyBracketKeyword_2());
    }
(
(
		lv_name_8_0=RULE_ID
		{
			newLeafNode(lv_name_8_0, grammarAccess.getEnumParameterDefinitionAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumParameterDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_8_0, 
        		"ID");
	    }

)
)	otherlv_9='=' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getEnumParameterDefinitionAccess().getEqualsSignKeyword_4());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumParameterDefinitionRule());
	        }
        }
	otherlv_10=RULE_ID
	{
		newLeafNode(otherlv_10, grammarAccess.getEnumParameterDefinitionAccess().getValueEnumAlternativeCrossReference_5_0()); 
	}

)
))
;





// Entry rule entryRuleGlobalEnum
entryRuleGlobalEnum returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGlobalEnumRule()); }
	 iv_ruleGlobalEnum=ruleGlobalEnum 
	 { $current=$iv_ruleGlobalEnum.current; } 
	 EOF 
;

// Rule GlobalEnum
ruleGlobalEnum returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='enum' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGlobalEnumAccess().getEnumKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getGlobalEnumAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGlobalEnumRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGlobalEnumAccess().getEqualsSignKeyword_2());
    }
	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGlobalEnumAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGlobalEnumAccess().getAlternativesEnumAlternativeParserRuleCall_4_0()); 
	    }
		lv_alternatives_4_0=ruleEnumAlternative		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGlobalEnumRule());
	        }
       		add(
       			$current, 
       			"alternatives",
        		lv_alternatives_4_0, 
        		"EnumAlternative");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getGlobalEnumAccess().getCommaKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGlobalEnumAccess().getAlternativesEnumAlternativeParserRuleCall_5_1_0()); 
	    }
		lv_alternatives_6_0=ruleEnumAlternative		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGlobalEnumRule());
	        }
       		add(
       			$current, 
       			"alternatives",
        		lv_alternatives_6_0, 
        		"EnumAlternative");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getGlobalEnumAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleEnumAlternative
entryRuleEnumAlternative returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumAlternativeRule()); }
	 iv_ruleEnumAlternative=ruleEnumAlternative 
	 { $current=$iv_ruleEnumAlternative.current; } 
	 EOF 
;

// Rule EnumAlternative
ruleEnumAlternative returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getEnumAlternativeAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumAlternativeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleStringParameterValue
entryRuleStringParameterValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringParameterValueRule()); }
	 iv_ruleStringParameterValue=ruleStringParameterValue 
	 { $current=$iv_ruleStringParameterValue.current; } 
	 EOF 
;

// Rule StringParameterValue
ruleStringParameterValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStringParameterValueAccess().getStringValueParserRuleCall_0()); 
    }
    this_StringValue_0=ruleStringValue
    { 
        $current = $this_StringValue_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStringParameterValueAccess().getStringConstantApplicationParserRuleCall_1()); 
    }
    this_StringConstantApplication_1=ruleStringConstantApplication
    { 
        $current = $this_StringConstantApplication_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleParameterApplicationValue
entryRuleParameterApplicationValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterApplicationValueRule()); }
	 iv_ruleParameterApplicationValue=ruleParameterApplicationValue 
	 { $current=$iv_ruleParameterApplicationValue.current; } 
	 EOF 
;

// Rule ParameterApplicationValue
ruleParameterApplicationValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getParameterApplicationValueAccess().getStringValueParserRuleCall_0()); 
    }
    this_StringValue_0=ruleStringValue
    { 
        $current = $this_StringValue_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getParameterApplicationValueAccess().getIntValueParserRuleCall_1()); 
    }
    this_IntValue_1=ruleIntValue
    { 
        $current = $this_IntValue_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getParameterApplicationValueAccess().getConstantReferenceValueParserRuleCall_2()); 
    }
    this_ConstantReferenceValue_2=ruleConstantReferenceValue
    { 
        $current = $this_ConstantReferenceValue_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleConstantReferenceValue
entryRuleConstantReferenceValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantReferenceValueRule()); }
	 iv_ruleConstantReferenceValue=ruleConstantReferenceValue 
	 { $current=$iv_ruleConstantReferenceValue.current; } 
	 EOF 
;

// Rule ConstantReferenceValue
ruleConstantReferenceValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantReferenceValueRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getConstantReferenceValueAccess().getValueConstantCrossReference_0()); 
	}

)
)
;







// Entry rule entryRuleStringValue
entryRuleStringValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringValueRule()); }
	 iv_ruleStringValue=ruleStringValue 
	 { $current=$iv_ruleStringValue.current; } 
	 EOF 
;

// Rule StringValue
ruleStringValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleStringConstantApplication
entryRuleStringConstantApplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringConstantApplicationRule()); }
	 iv_ruleStringConstantApplication=ruleStringConstantApplication 
	 { $current=$iv_ruleStringConstantApplication.current; } 
	 EOF 
;

// Rule StringConstantApplication
ruleStringConstantApplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringConstantApplicationRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getStringConstantApplicationAccess().getValueStringConstantCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleIntParameterValue
entryRuleIntParameterValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntParameterValueRule()); }
	 iv_ruleIntParameterValue=ruleIntParameterValue 
	 { $current=$iv_ruleIntParameterValue.current; } 
	 EOF 
;

// Rule IntParameterValue
ruleIntParameterValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIntParameterValueAccess().getIntValueParserRuleCall_0()); 
    }
    this_IntValue_0=ruleIntValue
    { 
        $current = $this_IntValue_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getIntParameterValueAccess().getIntConstantApplicationParserRuleCall_1()); 
    }
    this_IntConstantApplication_1=ruleIntConstantApplication
    { 
        $current = $this_IntConstantApplication_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIntValue
entryRuleIntValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntValueRule()); }
	 iv_ruleIntValue=ruleIntValue 
	 { $current=$iv_ruleIntValue.current; } 
	 EOF 
;

// Rule IntValue
ruleIntValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleIntConstantApplication
entryRuleIntConstantApplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntConstantApplicationRule()); }
	 iv_ruleIntConstantApplication=ruleIntConstantApplication 
	 { $current=$iv_ruleIntConstantApplication.current; } 
	 EOF 
;

// Rule IntConstantApplication
ruleIntConstantApplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntConstantApplicationRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getIntConstantApplicationAccess().getValueIntConstantCrossReference_0()); 
	}

)
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


