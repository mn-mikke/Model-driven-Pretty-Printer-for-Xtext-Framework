/*
* generated by Xtext
*/

package gpp.tests.operators.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class OperatorsTestGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class BoxModelOperatorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoxModelOperators");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cOperatorDefinitionsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cOperatorDefinitionsOperatorDefinitionParserRuleCall_1_0_0 = (RuleCall)cOperatorDefinitionsAssignment_1_0.eContents().get(0);
		private final Assignment cEnumerationsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cEnumerationsGlobalEnumParserRuleCall_1_1_0 = (RuleCall)cEnumerationsAssignment_1_1.eContents().get(0);
		private final Assignment cIntConstantsAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cIntConstantsIntConstantParserRuleCall_1_2_0 = (RuleCall)cIntConstantsAssignment_1_2.eContents().get(0);
		private final Assignment cStringConstantsAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cStringConstantsStringConstantParserRuleCall_1_3_0 = (RuleCall)cStringConstantsAssignment_1_3.eContents().get(0);
		
		//BoxModelOperators:
		//	imports+=Import* (operatorDefinitions+=OperatorDefinition | enumerations+=GlobalEnum | intConstants+=IntConstant |
		//	stringConstants+=StringConstant)*;
		public ParserRule getRule() { return rule; }

		//imports+=Import* (operatorDefinitions+=OperatorDefinition | enumerations+=GlobalEnum | intConstants+=IntConstant |
		//stringConstants+=StringConstant)*
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//(operatorDefinitions+=OperatorDefinition | enumerations+=GlobalEnum | intConstants+=IntConstant |
		//stringConstants+=StringConstant)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//operatorDefinitions+=OperatorDefinition
		public Assignment getOperatorDefinitionsAssignment_1_0() { return cOperatorDefinitionsAssignment_1_0; }

		//OperatorDefinition
		public RuleCall getOperatorDefinitionsOperatorDefinitionParserRuleCall_1_0_0() { return cOperatorDefinitionsOperatorDefinitionParserRuleCall_1_0_0; }

		//enumerations+=GlobalEnum
		public Assignment getEnumerationsAssignment_1_1() { return cEnumerationsAssignment_1_1; }

		//GlobalEnum
		public RuleCall getEnumerationsGlobalEnumParserRuleCall_1_1_0() { return cEnumerationsGlobalEnumParserRuleCall_1_1_0; }

		//intConstants+=IntConstant
		public Assignment getIntConstantsAssignment_1_2() { return cIntConstantsAssignment_1_2; }

		//IntConstant
		public RuleCall getIntConstantsIntConstantParserRuleCall_1_2_0() { return cIntConstantsIntConstantParserRuleCall_1_2_0; }

		//stringConstants+=StringConstant
		public Assignment getStringConstantsAssignment_1_3() { return cStringConstantsAssignment_1_3; }

		//StringConstant
		public RuleCall getStringConstantsStringConstantParserRuleCall_1_3_0() { return cStringConstantsStringConstantParserRuleCall_1_3_0; }
	}

	public class StringConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cStringKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cStrKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//StringConstant:
		//	("string" | "str") name=ID "=" value=STRING;
		public ParserRule getRule() { return rule; }

		//("string" | "str") name=ID "=" value=STRING
		public Group getGroup() { return cGroup; }

		//"string" | "str"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"string"
		public Keyword getStringKeyword_0_0() { return cStringKeyword_0_0; }

		//"str"
		public Keyword getStrKeyword_0_1() { return cStrKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }
	}

	public class IntConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cIntegerKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cIntKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueINTTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//IntConstant:
		//	("integer" | "int") name=ID "=" value=INT;
		public ParserRule getRule() { return rule; }

		//("integer" | "int") name=ID "=" value=INT
		public Group getGroup() { return cGroup; }

		//"integer" | "int"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"integer"
		public Keyword getIntegerKeyword_0_0() { return cIntegerKeyword_0_0; }

		//"int"
		public Keyword getIntKeyword_0_1() { return cIntKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=INT
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_3_0() { return cValueINTTerminalRuleCall_3_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importURI=STRING;
		public ParserRule getRule() { return rule; }

		//"import" importURI=STRING
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}

	public class OperatorImplementationStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperatorImplementationString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//OperatorImplementationString returns ecore::EString:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class OperatorDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperatorDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicOperatorDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAliasOperatorDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OperatorDefinition:
		//	BasicOperatorDefinition | AliasOperatorDefinition;
		public ParserRule getRule() { return rule; }

		//BasicOperatorDefinition | AliasOperatorDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//BasicOperatorDefinition
		public RuleCall getBasicOperatorDefinitionParserRuleCall_0() { return cBasicOperatorDefinitionParserRuleCall_0; }

		//AliasOperatorDefinition
		public RuleCall getAliasOperatorDefinitionParserRuleCall_1() { return cAliasOperatorDefinitionParserRuleCall_1; }
	}

	public class BasicOperatorDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicOperatorDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cHighlightOperatorDefinitionParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cPositionalOperatorDefinitionParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cTransformingOperatorDefinitionParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImplementationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImplementationOperatorImplementationStringParserRuleCall_3_0 = (RuleCall)cImplementationAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cParametersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cParametersParameterDefinitionParserRuleCall_5_1_0 = (RuleCall)cParametersAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//BasicOperatorDefinition:
		//	(HighlightOperatorDefinition | PositionalOperatorDefinition | TransformingOperatorDefinition) name=ID "["
		//	implementation=OperatorImplementationString "]" (":" parameters+=ParameterDefinition+)? ";";
		public ParserRule getRule() { return rule; }

		//(HighlightOperatorDefinition | PositionalOperatorDefinition | TransformingOperatorDefinition) name=ID "["
		//implementation=OperatorImplementationString "]" (":" parameters+=ParameterDefinition+)? ";"
		public Group getGroup() { return cGroup; }

		//HighlightOperatorDefinition | PositionalOperatorDefinition | TransformingOperatorDefinition
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//HighlightOperatorDefinition
		public RuleCall getHighlightOperatorDefinitionParserRuleCall_0_0() { return cHighlightOperatorDefinitionParserRuleCall_0_0; }

		//PositionalOperatorDefinition
		public RuleCall getPositionalOperatorDefinitionParserRuleCall_0_1() { return cPositionalOperatorDefinitionParserRuleCall_0_1; }

		//TransformingOperatorDefinition
		public RuleCall getTransformingOperatorDefinitionParserRuleCall_0_2() { return cTransformingOperatorDefinitionParserRuleCall_0_2; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//implementation=OperatorImplementationString
		public Assignment getImplementationAssignment_3() { return cImplementationAssignment_3; }

		//OperatorImplementationString
		public RuleCall getImplementationOperatorImplementationStringParserRuleCall_3_0() { return cImplementationOperatorImplementationStringParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }

		//(":" parameters+=ParameterDefinition+)?
		public Group getGroup_5() { return cGroup_5; }

		//":"
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }

		//parameters+=ParameterDefinition+
		public Assignment getParametersAssignment_5_1() { return cParametersAssignment_5_1; }

		//ParameterDefinition
		public RuleCall getParametersParameterDefinitionParserRuleCall_5_1_0() { return cParametersParameterDefinitionParserRuleCall_5_1_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class PositionalOperatorDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PositionalOperatorDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPositionalOperatorDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cPopKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cPoperatorKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//PositionalOperatorDefinition:
		//	{PositionalOperatorDefinition} ("pop" | "poperator");
		public ParserRule getRule() { return rule; }

		//{PositionalOperatorDefinition} ("pop" | "poperator")
		public Group getGroup() { return cGroup; }

		//{PositionalOperatorDefinition}
		public Action getPositionalOperatorDefinitionAction_0() { return cPositionalOperatorDefinitionAction_0; }

		//"pop" | "poperator"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"pop"
		public Keyword getPopKeyword_1_0() { return cPopKeyword_1_0; }

		//"poperator"
		public Keyword getPoperatorKeyword_1_1() { return cPoperatorKeyword_1_1; }
	}

	public class HighlightOperatorDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HighlightOperatorDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHighlightOperatorDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cHlopKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cHloperatorKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//HighlightOperatorDefinition:
		//	{HighlightOperatorDefinition} ("hlop" | "hloperator");
		public ParserRule getRule() { return rule; }

		//{HighlightOperatorDefinition} ("hlop" | "hloperator")
		public Group getGroup() { return cGroup; }

		//{HighlightOperatorDefinition}
		public Action getHighlightOperatorDefinitionAction_0() { return cHighlightOperatorDefinitionAction_0; }

		//"hlop" | "hloperator"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"hlop"
		public Keyword getHlopKeyword_1_0() { return cHlopKeyword_1_0; }

		//"hloperator"
		public Keyword getHloperatorKeyword_1_1() { return cHloperatorKeyword_1_1; }
	}

	public class TransformingOperatorDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransformingOperatorDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransformingOperatorDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cTopKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cToperatorKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//TransformingOperatorDefinition:
		//	{TransformingOperatorDefinition} ("top" | "toperator");
		public ParserRule getRule() { return rule; }

		//{TransformingOperatorDefinition} ("top" | "toperator")
		public Group getGroup() { return cGroup; }

		//{TransformingOperatorDefinition}
		public Action getTransformingOperatorDefinitionAction_0() { return cTransformingOperatorDefinitionAction_0; }

		//"top" | "toperator"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"top"
		public Keyword getTopKeyword_1_0() { return cTopKeyword_1_0; }

		//"toperator"
		public Keyword getToperatorKeyword_1_1() { return cToperatorKeyword_1_1; }
	}

	public class AliasOperatorDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AliasOperatorDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAliasKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cOperatorOperatorDefinitionCrossReference_3_0 = (CrossReference)cOperatorAssignment_3.eContents().get(0);
		private final RuleCall cOperatorOperatorDefinitionIDTerminalRuleCall_3_0_1 = (RuleCall)cOperatorOperatorDefinitionCrossReference_3_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cParametersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cParametersParameterApplicationParserRuleCall_5_1_0 = (RuleCall)cParametersAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AliasOperatorDefinition:
		//	"alias" name=ID "[" operator=[OperatorDefinition] "]" (":" parameters+=ParameterApplication+)? ";";
		public ParserRule getRule() { return rule; }

		//"alias" name=ID "[" operator=[OperatorDefinition] "]" (":" parameters+=ParameterApplication+)? ";"
		public Group getGroup() { return cGroup; }

		//"alias"
		public Keyword getAliasKeyword_0() { return cAliasKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//operator=[OperatorDefinition]
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }

		//[OperatorDefinition]
		public CrossReference getOperatorOperatorDefinitionCrossReference_3_0() { return cOperatorOperatorDefinitionCrossReference_3_0; }

		//ID
		public RuleCall getOperatorOperatorDefinitionIDTerminalRuleCall_3_0_1() { return cOperatorOperatorDefinitionIDTerminalRuleCall_3_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }

		//(":" parameters+=ParameterApplication+)?
		public Group getGroup_5() { return cGroup_5; }

		//":"
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }

		//parameters+=ParameterApplication+
		public Assignment getParametersAssignment_5_1() { return cParametersAssignment_5_1; }

		//ParameterApplication
		public RuleCall getParametersParameterApplicationParserRuleCall_5_1_0() { return cParametersParameterApplicationParserRuleCall_5_1_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class ParameterApplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterApplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferencedParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cReferencedParameterParameterDefinitionCrossReference_0_0 = (CrossReference)cReferencedParameterAssignment_0.eContents().get(0);
		private final RuleCall cReferencedParameterParameterDefinitionIDTerminalRuleCall_0_0_1 = (RuleCall)cReferencedParameterParameterDefinitionCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueParameterApplicationValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ParameterApplication:
		//	referencedParameter=[ParameterDefinition] "=" value=ParameterApplicationValue;
		public ParserRule getRule() { return rule; }

		//referencedParameter=[ParameterDefinition] "=" value=ParameterApplicationValue
		public Group getGroup() { return cGroup; }

		//referencedParameter=[ParameterDefinition]
		public Assignment getReferencedParameterAssignment_0() { return cReferencedParameterAssignment_0; }

		//[ParameterDefinition]
		public CrossReference getReferencedParameterParameterDefinitionCrossReference_0_0() { return cReferencedParameterParameterDefinitionCrossReference_0_0; }

		//ID
		public RuleCall getReferencedParameterParameterDefinitionIDTerminalRuleCall_0_0_1() { return cReferencedParameterParameterDefinitionIDTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=ParameterApplicationValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//ParameterApplicationValue
		public RuleCall getValueParameterApplicationValueParserRuleCall_2_0() { return cValueParameterApplicationValueParserRuleCall_2_0; }
	}

	public class ParameterDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringParameterDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntParameterDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumParameterDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ParameterDefinition:
		//	StringParameterDefinition | IntParameterDefinition | EnumParameterDefinition;
		public ParserRule getRule() { return rule; }

		//StringParameterDefinition | IntParameterDefinition | EnumParameterDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringParameterDefinition
		public RuleCall getStringParameterDefinitionParserRuleCall_0() { return cStringParameterDefinitionParserRuleCall_0; }

		//IntParameterDefinition
		public RuleCall getIntParameterDefinitionParserRuleCall_1() { return cIntParameterDefinitionParserRuleCall_1; }

		//EnumParameterDefinition
		public RuleCall getEnumParameterDefinitionParserRuleCall_2() { return cEnumParameterDefinitionParserRuleCall_2; }
	}

	public class StringParameterDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringParameterDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cStringKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cStrKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueStringParameterValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//StringParameterDefinition:
		//	("string" | "str") name=ID "=" value=StringParameterValue;
		public ParserRule getRule() { return rule; }

		//("string" | "str") name=ID "=" value=StringParameterValue
		public Group getGroup() { return cGroup; }

		//"string" | "str"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"string"
		public Keyword getStringKeyword_0_0() { return cStringKeyword_0_0; }

		//"str"
		public Keyword getStrKeyword_0_1() { return cStrKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=StringParameterValue
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//StringParameterValue
		public RuleCall getValueStringParameterValueParserRuleCall_3_0() { return cValueStringParameterValueParserRuleCall_3_0; }
	}

	public class IntParameterDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntParameterDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cIntegerKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cIntKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueIntParameterValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//IntParameterDefinition:
		//	("integer" | "int") name=ID "=" value=IntParameterValue;
		public ParserRule getRule() { return rule; }

		//("integer" | "int") name=ID "=" value=IntParameterValue
		public Group getGroup() { return cGroup; }

		//"integer" | "int"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"integer"
		public Keyword getIntegerKeyword_0_0() { return cIntegerKeyword_0_0; }

		//"int"
		public Keyword getIntKeyword_0_1() { return cIntKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=IntParameterValue
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//IntParameterValue
		public RuleCall getValueIntParameterValueParserRuleCall_3_0() { return cValueIntParameterValueParserRuleCall_3_0; }
	}

	public class EnumParameterDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumParameterDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cAlternativesAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cAlternativesEnumAlternativeParserRuleCall_1_0_0_0 = (RuleCall)cAlternativesAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cAlternativesAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cAlternativesEnumAlternativeParserRuleCall_1_0_1_1_0 = (RuleCall)cAlternativesAssignment_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEnumerationAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final CrossReference cEnumerationGlobalEnumCrossReference_1_1_1_0 = (CrossReference)cEnumerationAssignment_1_1_1.eContents().get(0);
		private final RuleCall cEnumerationGlobalEnumIDTerminalRuleCall_1_1_1_0_1 = (RuleCall)cEnumerationGlobalEnumCrossReference_1_1_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cValueEnumAlternativeCrossReference_5_0 = (CrossReference)cValueAssignment_5.eContents().get(0);
		private final RuleCall cValueEnumAlternativeIDTerminalRuleCall_5_0_1 = (RuleCall)cValueEnumAlternativeCrossReference_5_0.eContents().get(1);
		
		//EnumParameterDefinition:
		//	"{" (alternatives+=EnumAlternative ("," alternatives+=EnumAlternative)* | "[" enumeration=[GlobalEnum] "]") "}"
		//	name=ID "=" value=[EnumAlternative];
		public ParserRule getRule() { return rule; }

		//"{" (alternatives+=EnumAlternative ("," alternatives+=EnumAlternative)* | "[" enumeration=[GlobalEnum] "]") "}" name=ID
		//"=" value=[EnumAlternative]
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//alternatives+=EnumAlternative ("," alternatives+=EnumAlternative)* | "[" enumeration=[GlobalEnum] "]"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//alternatives+=EnumAlternative ("," alternatives+=EnumAlternative)*
		public Group getGroup_1_0() { return cGroup_1_0; }

		//alternatives+=EnumAlternative
		public Assignment getAlternativesAssignment_1_0_0() { return cAlternativesAssignment_1_0_0; }

		//EnumAlternative
		public RuleCall getAlternativesEnumAlternativeParserRuleCall_1_0_0_0() { return cAlternativesEnumAlternativeParserRuleCall_1_0_0_0; }

		//("," alternatives+=EnumAlternative)*
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//","
		public Keyword getCommaKeyword_1_0_1_0() { return cCommaKeyword_1_0_1_0; }

		//alternatives+=EnumAlternative
		public Assignment getAlternativesAssignment_1_0_1_1() { return cAlternativesAssignment_1_0_1_1; }

		//EnumAlternative
		public RuleCall getAlternativesEnumAlternativeParserRuleCall_1_0_1_1_0() { return cAlternativesEnumAlternativeParserRuleCall_1_0_1_1_0; }

		//"[" enumeration=[GlobalEnum] "]"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_0() { return cLeftSquareBracketKeyword_1_1_0; }

		//enumeration=[GlobalEnum]
		public Assignment getEnumerationAssignment_1_1_1() { return cEnumerationAssignment_1_1_1; }

		//[GlobalEnum]
		public CrossReference getEnumerationGlobalEnumCrossReference_1_1_1_0() { return cEnumerationGlobalEnumCrossReference_1_1_1_0; }

		//ID
		public RuleCall getEnumerationGlobalEnumIDTerminalRuleCall_1_1_1_0_1() { return cEnumerationGlobalEnumIDTerminalRuleCall_1_1_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_2() { return cRightSquareBracketKeyword_1_1_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//value=[EnumAlternative]
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }

		//[EnumAlternative]
		public CrossReference getValueEnumAlternativeCrossReference_5_0() { return cValueEnumAlternativeCrossReference_5_0; }

		//ID
		public RuleCall getValueEnumAlternativeIDTerminalRuleCall_5_0_1() { return cValueEnumAlternativeIDTerminalRuleCall_5_0_1; }
	}

	public class GlobalEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalEnum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAlternativesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAlternativesEnumAlternativeParserRuleCall_4_0 = (RuleCall)cAlternativesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAlternativesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAlternativesEnumAlternativeParserRuleCall_5_1_0 = (RuleCall)cAlternativesAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//GlobalEnum:
		//	"enum" name=ID "=" "{" alternatives+=EnumAlternative ("," alternatives+=EnumAlternative)* "}";
		public ParserRule getRule() { return rule; }

		//"enum" name=ID "=" "{" alternatives+=EnumAlternative ("," alternatives+=EnumAlternative)* "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//alternatives+=EnumAlternative
		public Assignment getAlternativesAssignment_4() { return cAlternativesAssignment_4; }

		//EnumAlternative
		public RuleCall getAlternativesEnumAlternativeParserRuleCall_4_0() { return cAlternativesEnumAlternativeParserRuleCall_4_0; }

		//("," alternatives+=EnumAlternative)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//alternatives+=EnumAlternative
		public Assignment getAlternativesAssignment_5_1() { return cAlternativesAssignment_5_1; }

		//EnumAlternative
		public RuleCall getAlternativesEnumAlternativeParserRuleCall_5_1_0() { return cAlternativesEnumAlternativeParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class EnumAlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumAlternative");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EnumAlternative:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class StringParameterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringParameterValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringConstantApplicationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StringParameterValue:
		//	StringValue | StringConstantApplication;
		public ParserRule getRule() { return rule; }

		//StringValue | StringConstantApplication
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringValue
		public RuleCall getStringValueParserRuleCall_0() { return cStringValueParserRuleCall_0; }

		//StringConstantApplication
		public RuleCall getStringConstantApplicationParserRuleCall_1() { return cStringConstantApplicationParserRuleCall_1; }
	}

	public class ParameterApplicationValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterApplicationValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstantReferenceValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ParameterApplicationValue:
		//	StringValue | IntValue | ConstantReferenceValue;
		public ParserRule getRule() { return rule; }

		//StringValue | IntValue | ConstantReferenceValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringValue
		public RuleCall getStringValueParserRuleCall_0() { return cStringValueParserRuleCall_0; }

		//IntValue
		public RuleCall getIntValueParserRuleCall_1() { return cIntValueParserRuleCall_1; }

		//ConstantReferenceValue
		public RuleCall getConstantReferenceValueParserRuleCall_2() { return cConstantReferenceValueParserRuleCall_2; }
	}

	public class ConstantReferenceValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantReferenceValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cValueConstantCrossReference_0 = (CrossReference)cValueAssignment.eContents().get(0);
		private final RuleCall cValueConstantIDTerminalRuleCall_0_1 = (RuleCall)cValueConstantCrossReference_0.eContents().get(1);
		
		//ConstantReferenceValue:
		//	value=[Constant];
		public ParserRule getRule() { return rule; }

		//value=[Constant]
		public Assignment getValueAssignment() { return cValueAssignment; }

		//[Constant]
		public CrossReference getValueConstantCrossReference_0() { return cValueConstantCrossReference_0; }

		//ID
		public RuleCall getValueConstantIDTerminalRuleCall_0_1() { return cValueConstantIDTerminalRuleCall_0_1; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumAlternativeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringConstantParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Constant:
		//	EnumAlternative | IntConstant | StringConstant;
		public ParserRule getRule() { return rule; }

		//EnumAlternative | IntConstant | StringConstant
		public Alternatives getAlternatives() { return cAlternatives; }

		//EnumAlternative
		public RuleCall getEnumAlternativeParserRuleCall_0() { return cEnumAlternativeParserRuleCall_0; }

		//IntConstant
		public RuleCall getIntConstantParserRuleCall_1() { return cIntConstantParserRuleCall_1; }

		//StringConstant
		public RuleCall getStringConstantParserRuleCall_2() { return cStringConstantParserRuleCall_2; }
	}

	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class StringConstantApplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringConstantApplication");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cValueStringConstantCrossReference_0 = (CrossReference)cValueAssignment.eContents().get(0);
		private final RuleCall cValueStringConstantIDTerminalRuleCall_0_1 = (RuleCall)cValueStringConstantCrossReference_0.eContents().get(1);
		
		//StringConstantApplication:
		//	value=[StringConstant];
		public ParserRule getRule() { return rule; }

		//value=[StringConstant]
		public Assignment getValueAssignment() { return cValueAssignment; }

		//[StringConstant]
		public CrossReference getValueStringConstantCrossReference_0() { return cValueStringConstantCrossReference_0; }

		//ID
		public RuleCall getValueStringConstantIDTerminalRuleCall_0_1() { return cValueStringConstantIDTerminalRuleCall_0_1; }
	}

	public class IntParameterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntParameterValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntConstantApplicationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IntParameterValue:
		//	IntValue | IntConstantApplication;
		public ParserRule getRule() { return rule; }

		//IntValue | IntConstantApplication
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }

		//IntConstantApplication
		public RuleCall getIntConstantApplicationParserRuleCall_1() { return cIntConstantApplicationParserRuleCall_1; }
	}

	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntValue:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class IntConstantApplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntConstantApplication");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cValueIntConstantCrossReference_0 = (CrossReference)cValueAssignment.eContents().get(0);
		private final RuleCall cValueIntConstantIDTerminalRuleCall_0_1 = (RuleCall)cValueIntConstantCrossReference_0.eContents().get(1);
		
		//IntConstantApplication:
		//	value=[IntConstant];
		public ParserRule getRule() { return rule; }

		//value=[IntConstant]
		public Assignment getValueAssignment() { return cValueAssignment; }

		//[IntConstant]
		public CrossReference getValueIntConstantCrossReference_0() { return cValueIntConstantCrossReference_0; }

		//ID
		public RuleCall getValueIntConstantIDTerminalRuleCall_0_1() { return cValueIntConstantIDTerminalRuleCall_0_1; }
	}
	
	
	private BoxModelOperatorsElements pBoxModelOperators;
	private StringConstantElements pStringConstant;
	private IntConstantElements pIntConstant;
	private ImportElements pImport;
	private OperatorImplementationStringElements pOperatorImplementationString;
	private OperatorDefinitionElements pOperatorDefinition;
	private BasicOperatorDefinitionElements pBasicOperatorDefinition;
	private PositionalOperatorDefinitionElements pPositionalOperatorDefinition;
	private HighlightOperatorDefinitionElements pHighlightOperatorDefinition;
	private TransformingOperatorDefinitionElements pTransformingOperatorDefinition;
	private AliasOperatorDefinitionElements pAliasOperatorDefinition;
	private ParameterApplicationElements pParameterApplication;
	private ParameterDefinitionElements pParameterDefinition;
	private StringParameterDefinitionElements pStringParameterDefinition;
	private IntParameterDefinitionElements pIntParameterDefinition;
	private EnumParameterDefinitionElements pEnumParameterDefinition;
	private GlobalEnumElements pGlobalEnum;
	private EnumAlternativeElements pEnumAlternative;
	private StringParameterValueElements pStringParameterValue;
	private ParameterApplicationValueElements pParameterApplicationValue;
	private ConstantReferenceValueElements pConstantReferenceValue;
	private ConstantElements pConstant;
	private StringValueElements pStringValue;
	private StringConstantApplicationElements pStringConstantApplication;
	private IntParameterValueElements pIntParameterValue;
	private IntValueElements pIntValue;
	private IntConstantApplicationElements pIntConstantApplication;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public OperatorsTestGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//BoxModelOperators:
	//	imports+=Import* (operatorDefinitions+=OperatorDefinition | enumerations+=GlobalEnum | intConstants+=IntConstant |
	//	stringConstants+=StringConstant)*;
	public BoxModelOperatorsElements getBoxModelOperatorsAccess() {
		return (pBoxModelOperators != null) ? pBoxModelOperators : (pBoxModelOperators = new BoxModelOperatorsElements());
	}
	
	public ParserRule getBoxModelOperatorsRule() {
		return getBoxModelOperatorsAccess().getRule();
	}

	//StringConstant:
	//	("string" | "str") name=ID "=" value=STRING;
	public StringConstantElements getStringConstantAccess() {
		return (pStringConstant != null) ? pStringConstant : (pStringConstant = new StringConstantElements());
	}
	
	public ParserRule getStringConstantRule() {
		return getStringConstantAccess().getRule();
	}

	//IntConstant:
	//	("integer" | "int") name=ID "=" value=INT;
	public IntConstantElements getIntConstantAccess() {
		return (pIntConstant != null) ? pIntConstant : (pIntConstant = new IntConstantElements());
	}
	
	public ParserRule getIntConstantRule() {
		return getIntConstantAccess().getRule();
	}

	//Import:
	//	"import" importURI=STRING;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//OperatorImplementationString returns ecore::EString:
	//	ID ("." ID)*;
	public OperatorImplementationStringElements getOperatorImplementationStringAccess() {
		return (pOperatorImplementationString != null) ? pOperatorImplementationString : (pOperatorImplementationString = new OperatorImplementationStringElements());
	}
	
	public ParserRule getOperatorImplementationStringRule() {
		return getOperatorImplementationStringAccess().getRule();
	}

	//OperatorDefinition:
	//	BasicOperatorDefinition | AliasOperatorDefinition;
	public OperatorDefinitionElements getOperatorDefinitionAccess() {
		return (pOperatorDefinition != null) ? pOperatorDefinition : (pOperatorDefinition = new OperatorDefinitionElements());
	}
	
	public ParserRule getOperatorDefinitionRule() {
		return getOperatorDefinitionAccess().getRule();
	}

	//BasicOperatorDefinition:
	//	(HighlightOperatorDefinition | PositionalOperatorDefinition | TransformingOperatorDefinition) name=ID "["
	//	implementation=OperatorImplementationString "]" (":" parameters+=ParameterDefinition+)? ";";
	public BasicOperatorDefinitionElements getBasicOperatorDefinitionAccess() {
		return (pBasicOperatorDefinition != null) ? pBasicOperatorDefinition : (pBasicOperatorDefinition = new BasicOperatorDefinitionElements());
	}
	
	public ParserRule getBasicOperatorDefinitionRule() {
		return getBasicOperatorDefinitionAccess().getRule();
	}

	//PositionalOperatorDefinition:
	//	{PositionalOperatorDefinition} ("pop" | "poperator");
	public PositionalOperatorDefinitionElements getPositionalOperatorDefinitionAccess() {
		return (pPositionalOperatorDefinition != null) ? pPositionalOperatorDefinition : (pPositionalOperatorDefinition = new PositionalOperatorDefinitionElements());
	}
	
	public ParserRule getPositionalOperatorDefinitionRule() {
		return getPositionalOperatorDefinitionAccess().getRule();
	}

	//HighlightOperatorDefinition:
	//	{HighlightOperatorDefinition} ("hlop" | "hloperator");
	public HighlightOperatorDefinitionElements getHighlightOperatorDefinitionAccess() {
		return (pHighlightOperatorDefinition != null) ? pHighlightOperatorDefinition : (pHighlightOperatorDefinition = new HighlightOperatorDefinitionElements());
	}
	
	public ParserRule getHighlightOperatorDefinitionRule() {
		return getHighlightOperatorDefinitionAccess().getRule();
	}

	//TransformingOperatorDefinition:
	//	{TransformingOperatorDefinition} ("top" | "toperator");
	public TransformingOperatorDefinitionElements getTransformingOperatorDefinitionAccess() {
		return (pTransformingOperatorDefinition != null) ? pTransformingOperatorDefinition : (pTransformingOperatorDefinition = new TransformingOperatorDefinitionElements());
	}
	
	public ParserRule getTransformingOperatorDefinitionRule() {
		return getTransformingOperatorDefinitionAccess().getRule();
	}

	//AliasOperatorDefinition:
	//	"alias" name=ID "[" operator=[OperatorDefinition] "]" (":" parameters+=ParameterApplication+)? ";";
	public AliasOperatorDefinitionElements getAliasOperatorDefinitionAccess() {
		return (pAliasOperatorDefinition != null) ? pAliasOperatorDefinition : (pAliasOperatorDefinition = new AliasOperatorDefinitionElements());
	}
	
	public ParserRule getAliasOperatorDefinitionRule() {
		return getAliasOperatorDefinitionAccess().getRule();
	}

	//ParameterApplication:
	//	referencedParameter=[ParameterDefinition] "=" value=ParameterApplicationValue;
	public ParameterApplicationElements getParameterApplicationAccess() {
		return (pParameterApplication != null) ? pParameterApplication : (pParameterApplication = new ParameterApplicationElements());
	}
	
	public ParserRule getParameterApplicationRule() {
		return getParameterApplicationAccess().getRule();
	}

	//ParameterDefinition:
	//	StringParameterDefinition | IntParameterDefinition | EnumParameterDefinition;
	public ParameterDefinitionElements getParameterDefinitionAccess() {
		return (pParameterDefinition != null) ? pParameterDefinition : (pParameterDefinition = new ParameterDefinitionElements());
	}
	
	public ParserRule getParameterDefinitionRule() {
		return getParameterDefinitionAccess().getRule();
	}

	//StringParameterDefinition:
	//	("string" | "str") name=ID "=" value=StringParameterValue;
	public StringParameterDefinitionElements getStringParameterDefinitionAccess() {
		return (pStringParameterDefinition != null) ? pStringParameterDefinition : (pStringParameterDefinition = new StringParameterDefinitionElements());
	}
	
	public ParserRule getStringParameterDefinitionRule() {
		return getStringParameterDefinitionAccess().getRule();
	}

	//IntParameterDefinition:
	//	("integer" | "int") name=ID "=" value=IntParameterValue;
	public IntParameterDefinitionElements getIntParameterDefinitionAccess() {
		return (pIntParameterDefinition != null) ? pIntParameterDefinition : (pIntParameterDefinition = new IntParameterDefinitionElements());
	}
	
	public ParserRule getIntParameterDefinitionRule() {
		return getIntParameterDefinitionAccess().getRule();
	}

	//EnumParameterDefinition:
	//	"{" (alternatives+=EnumAlternative ("," alternatives+=EnumAlternative)* | "[" enumeration=[GlobalEnum] "]") "}"
	//	name=ID "=" value=[EnumAlternative];
	public EnumParameterDefinitionElements getEnumParameterDefinitionAccess() {
		return (pEnumParameterDefinition != null) ? pEnumParameterDefinition : (pEnumParameterDefinition = new EnumParameterDefinitionElements());
	}
	
	public ParserRule getEnumParameterDefinitionRule() {
		return getEnumParameterDefinitionAccess().getRule();
	}

	//GlobalEnum:
	//	"enum" name=ID "=" "{" alternatives+=EnumAlternative ("," alternatives+=EnumAlternative)* "}";
	public GlobalEnumElements getGlobalEnumAccess() {
		return (pGlobalEnum != null) ? pGlobalEnum : (pGlobalEnum = new GlobalEnumElements());
	}
	
	public ParserRule getGlobalEnumRule() {
		return getGlobalEnumAccess().getRule();
	}

	//EnumAlternative:
	//	name=ID;
	public EnumAlternativeElements getEnumAlternativeAccess() {
		return (pEnumAlternative != null) ? pEnumAlternative : (pEnumAlternative = new EnumAlternativeElements());
	}
	
	public ParserRule getEnumAlternativeRule() {
		return getEnumAlternativeAccess().getRule();
	}

	//StringParameterValue:
	//	StringValue | StringConstantApplication;
	public StringParameterValueElements getStringParameterValueAccess() {
		return (pStringParameterValue != null) ? pStringParameterValue : (pStringParameterValue = new StringParameterValueElements());
	}
	
	public ParserRule getStringParameterValueRule() {
		return getStringParameterValueAccess().getRule();
	}

	//ParameterApplicationValue:
	//	StringValue | IntValue | ConstantReferenceValue;
	public ParameterApplicationValueElements getParameterApplicationValueAccess() {
		return (pParameterApplicationValue != null) ? pParameterApplicationValue : (pParameterApplicationValue = new ParameterApplicationValueElements());
	}
	
	public ParserRule getParameterApplicationValueRule() {
		return getParameterApplicationValueAccess().getRule();
	}

	//ConstantReferenceValue:
	//	value=[Constant];
	public ConstantReferenceValueElements getConstantReferenceValueAccess() {
		return (pConstantReferenceValue != null) ? pConstantReferenceValue : (pConstantReferenceValue = new ConstantReferenceValueElements());
	}
	
	public ParserRule getConstantReferenceValueRule() {
		return getConstantReferenceValueAccess().getRule();
	}

	//Constant:
	//	EnumAlternative | IntConstant | StringConstant;
	public ConstantElements getConstantAccess() {
		return (pConstant != null) ? pConstant : (pConstant = new ConstantElements());
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//StringValue:
	//	value=STRING;
	public StringValueElements getStringValueAccess() {
		return (pStringValue != null) ? pStringValue : (pStringValue = new StringValueElements());
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//StringConstantApplication:
	//	value=[StringConstant];
	public StringConstantApplicationElements getStringConstantApplicationAccess() {
		return (pStringConstantApplication != null) ? pStringConstantApplication : (pStringConstantApplication = new StringConstantApplicationElements());
	}
	
	public ParserRule getStringConstantApplicationRule() {
		return getStringConstantApplicationAccess().getRule();
	}

	//IntParameterValue:
	//	IntValue | IntConstantApplication;
	public IntParameterValueElements getIntParameterValueAccess() {
		return (pIntParameterValue != null) ? pIntParameterValue : (pIntParameterValue = new IntParameterValueElements());
	}
	
	public ParserRule getIntParameterValueRule() {
		return getIntParameterValueAccess().getRule();
	}

	//IntValue:
	//	value=INT;
	public IntValueElements getIntValueAccess() {
		return (pIntValue != null) ? pIntValue : (pIntValue = new IntValueElements());
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//IntConstantApplication:
	//	value=[IntConstant];
	public IntConstantApplicationElements getIntConstantApplicationAccess() {
		return (pIntConstantApplication != null) ? pIntConstantApplication : (pIntConstantApplication = new IntConstantApplicationElements());
	}
	
	public ParserRule getIntConstantApplicationRule() {
		return getIntConstantApplicationAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
