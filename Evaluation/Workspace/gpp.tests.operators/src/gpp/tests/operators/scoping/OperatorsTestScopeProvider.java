/*
 * generated by Xtext
 */
package gpp.tests.operators.scoping;


import gpp.tests.operators.operatorsTest.AliasOperatorDefinition;
import gpp.tests.operators.operatorsTest.BasicOperatorDefinition;
import gpp.tests.operators.operatorsTest.BoxModelOperators;
import gpp.tests.operators.operatorsTest.ConstantReferenceValue;
import gpp.tests.operators.operatorsTest.EnumParameterDefinition;
import gpp.tests.operators.operatorsTest.IntParameterDefinition;
import gpp.tests.operators.operatorsTest.ParameterApplication;
import gpp.tests.operators.operatorsTest.ParameterDefinition;
import gpp.tests.operators.operatorsTest.StringParameterDefinition;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class OperatorsTestScopeProvider extends AbstractDeclarativeScopeProvider {
	IScope scope_ParameterApplication_referencedParameter(ParameterApplication ctx, EReference ref)
	{
		return getReferencedParameterScope(ctx);
	}
	
	
	protected IScope getReferencedParameterScope(ParameterApplication ctx)
	{
		if(ctx.eContainer() == null)
		{
			return IScope.NULLSCOPE;
		}
		if(ctx.eContainer() instanceof AliasOperatorDefinition)
		{
			return getParameterScopeRelatedToOperator(((AliasOperatorDefinition)ctx.eContainer()).getOperator());
		}
		return IScope.NULLSCOPE;
		
	}
	
	protected IScope getParameterScopeRelatedToOperator(EObject operator)
	{
		if(operator == null)
		{
			return IScope.NULLSCOPE;
		}
		if(operator instanceof AliasOperatorDefinition)
		{
			AliasOperatorDefinition aliasOperatorDefinition = (AliasOperatorDefinition)operator;
			while(aliasOperatorDefinition.getOperator() != null && aliasOperatorDefinition.getOperator() instanceof AliasOperatorDefinition)
			{
				aliasOperatorDefinition = (AliasOperatorDefinition)aliasOperatorDefinition.getOperator();
			}
			if(aliasOperatorDefinition.getOperator() == null || !(aliasOperatorDefinition.getOperator() instanceof BasicOperatorDefinition))
			{
					return IScope.NULLSCOPE;
			}
			operator = (BasicOperatorDefinition)aliasOperatorDefinition.getOperator();
		}
		if(operator instanceof BasicOperatorDefinition)
		{
			BasicOperatorDefinition basicOperatorDefinition = (BasicOperatorDefinition)operator;
			if(basicOperatorDefinition.getParameters() == null)
			{
				return IScope.NULLSCOPE;
			}
			return Scopes.scopeFor(basicOperatorDefinition.getParameters());
		}
		return IScope.NULLSCOPE;
	}
	
	
	IScope scope_EnumParameterDefinition_value(EnumParameterDefinition ctx, EReference ref)
	{
		if(ctx.getAlternatives() != null  && ctx.getAlternatives().size() > 0)
		{
			return Scopes.scopeFor(ctx.getAlternatives());
		}
		else if(ctx.getEnumeration() != null)
		{
			if(ctx.getEnumeration().getAlternatives() == null)
			{
				return IScope.NULLSCOPE;
			}
			return Scopes.scopeFor(ctx.getEnumeration().getAlternatives());
		}
		else
		{
			return IScope.NULLSCOPE;
		}
	}
	
	IScope scope_ConstantReferenceValue_value(ConstantReferenceValue ctx, EReference ref)
	{
		if(ctx.eContainer() == null  || !(ctx.eContainer() instanceof ParameterApplication))
		{
			return IScope.NULLSCOPE;
		}
		ParameterDefinition referencedParameter = ((ParameterApplication)ctx.eContainer()).getReferencedParameter();
		if(referencedParameter  == null) return IScope.NULLSCOPE;	
		if(referencedParameter instanceof EnumParameterDefinition)
		{
			return scope_EnumParameterDefinition_value((EnumParameterDefinition)referencedParameter, ref);
		}
		BoxModelOperators rootElement = getRootElement(ctx);
		if(rootElement == null) return IScope.NULLSCOPE;
		if(referencedParameter instanceof IntParameterDefinition)
		{
			return Scopes.scopeFor(rootElement.getIntConstants());
		}
		if(referencedParameter instanceof StringParameterDefinition)
		{
			return Scopes.scopeFor(rootElement.getStringConstants());
		}
		return IScope.NULLSCOPE;
	}
	
	BoxModelOperators getRootElement(final EObject obj)
	{
		if(obj == null) return null;
		EObject currentObj = obj;
		while(currentObj.eContainer() != null)
		{
			if(currentObj.eContainer() instanceof BoxModelOperators)
			{
				return (BoxModelOperators)currentObj.eContainer();
			}
			currentObj = currentObj.eContainer();
		}
		return null;
	}
	
}
