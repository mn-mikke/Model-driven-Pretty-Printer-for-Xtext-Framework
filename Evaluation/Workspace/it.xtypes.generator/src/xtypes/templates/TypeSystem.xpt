«IMPORT it::xtypes::typesystem»

«EXTENSION xtypes::extensions::Extensions»
«EXTENSION xtypes::extensions::Types»
«EXTENSION xtypes::extensions::Methods»
«EXTENSION xtypes::extensions::TypeSystem»

«DEFINE main FOR TypeSystemDefinition-»
«LET this.typeSystemClassName() AS className»
«FILE packageToDir(this.getGeneratedTypesystemPackage()) + "/" + className + ".java"-»
package «this.getGeneratedTypesystemPackage()»;

«IF this.rules.size > 0-»
import «this.getGeneratedTypeSystemRulePackage()».*;«ENDIF»

import it.xtypes.runtime.RuleFailedException;
import it.xtypes.runtime.RuntimeRule;
import it.xtypes.runtime.RuntimeRules;
import it.xtypes.runtime.RuntimeTypeSystem;
import it.xtypes.runtime.TypeSystemResult;
import it.xtypes.runtime.TypeSystemResultPair;
import it.xtypes.runtime.TypingJudgmentEnvironment;

import «getCurrentModelPackage()».«this.getPackageName()»;

/**
 * Automatically generated by XTypeS, http://xtypes.sourceforge.net
 * Do not modify it.
 * This class should be instantiated with Google Guide injector.
 */
public class «className» extends RuntimeTypeSystem {

	protected «this.getPackageName()» basicPackage = «this.getPackageName()».eINSTANCE;

	public «className»() {
		RuntimeRules rules = new RuntimeRules();
		«FOREACH rules AS rule»rules.add(new «rule.ruleToClassName()»());«ENDFOREACH»
		setRules(rules);
	}

	«IF this.judgmentDescriptions != null-»
	«EXPAND typeSystemMethods(this) FOREACH this.judgmentDescriptions»
	«ENDIF»
}
«ENDFILE-»
«ENDLET»
«ENDDEFINE»

«DEFINE typeSystemMethods(TypeSystemDefinition ts) FOR JudgmentDescription»
«EXPAND createRuleMethods(this) 
	FOREACH ts.getRules(this.judgmentsymbol, this.relation)»
«EXPAND createApplyRuleMethods FOR this»
«ENDDEFINE»

«DEFINE createRuleMethods(JudgmentDescription judgmentDescription) FOR Rule»
«LET judgmentDescription.kind.toFirstUpper() AS methodName»
«IF !judgmentDescription.binary»
public TypeSystemResult<«this.getRightType().getQualifiedTypeName()»> 
	«judgmentDescription.typeSystemMethodAs(this)»
	(TypingJudgmentEnvironment environment, «this.getLeftType().getQualifiedTypeName()» object) {
	return tryToApply(environment, "«judgmentDescription.judgmentsymbol»", "«judgmentDescription.relation»",
		«EXPAND Variable::createType FOR this.getLeftType()»,
		«EXPAND Variable::createType FOR this.getRightType()»,
		object);
}

public TypeSystemResult<«this.getRightType().getQualifiedTypeName()»>
	«judgmentDescription.typeSystemMethodAs(this)»
	(«this.getLeftType().getQualifiedTypeName()» object) {
	return «judgmentDescription.kind»As«this.getRightType().getTypeNameDesc()»(null, object);
}

public TypeSystemResultPair<«this.getLeftType().getQualifiedTypeName()»,«this.getRightType().getQualifiedTypeName()»>
	«judgmentDescription.typeSystemMethod()»
	(TypingJudgmentEnvironment environment, 
		«this.getLeftType().getQualifiedTypeName()» left, 
		«this.getRightType().getQualifiedTypeName()» right) {
	return tryToApplyPair(environment, "«judgmentDescription.judgmentsymbol»", "«judgmentDescription.relation»",
		«EXPAND Variable::createType FOR this.getLeftType()»,
		«EXPAND Variable::createType FOR this.getRightType()»,
		left, right);
}

public TypeSystemResultPair<«this.getLeftType().getQualifiedTypeName()»,«this.getRightType().getQualifiedTypeName()»>
	«judgmentDescription.typeSystemMethod()»
	(«this.getLeftType().getQualifiedTypeName()» left, 
		«this.getRightType().getQualifiedTypeName()» right) {
	return «judgmentDescription.kind»(null,
		left, right);
}
«ENDIF»
public TypeSystemResult<Boolean> «judgmentDescription.typeSystemMethodCheck()»
	(TypingJudgmentEnvironment environment, 
		«this.getLeftType().getQualifiedTypeName()» left, 
		«this.getRightType().getQualifiedTypeName()» right) {
	return tryToApply(environment, "«judgmentDescription.judgmentsymbol»", "«judgmentDescription.relation»",
		«EXPAND Variable::createType FOR this.getLeftType()»,
		«EXPAND Variable::createType FOR this.getRightType()»,
		left, right);
}

public TypeSystemResult<Boolean> «judgmentDescription.typeSystemMethodCheck()»
	(«this.getLeftType().getQualifiedTypeName()» left, 
		«this.getRightType().getQualifiedTypeName()» right) {
	return check«methodName»(null, left, right);
}
«ENDLET»
«ENDDEFINE»

«DEFINE createApplyRuleMethods FOR JudgmentDescription»
public RuntimeRule «this.typeSystemApplyRule()»(TypingJudgmentEnvironment environment,
	Object left, Object right) throws RuleFailedException {
	return applyRule(environment, "«this.judgmentsymbol»", "«this.relation»", left, right);
}

public RuntimeRule «this.typeSystemApplyRule()»(
	Object left, Object right) throws RuleFailedException {
	return «this.typeSystemApplyRule()»(null, left, right);
}
«ENDDEFINE»
