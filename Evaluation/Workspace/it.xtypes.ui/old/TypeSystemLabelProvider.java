/*
 * generated by Xtext
 */
package it.xtypes.ui.labeling;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import it.xtypes.typesystem.Axiom;
import it.xtypes.typesystem.CompoundExpression;
import it.xtypes.typesystem.StringConstant;
import it.xtypes.typesystem.Container;
import it.xtypes.typesystem.EnvironmentAccess;
import it.xtypes.typesystem.EnvironmentAssignment;
import it.xtypes.typesystem.EnvironmentDecrement;
import it.xtypes.typesystem.EnvironmentIncrement;
import it.xtypes.typesystem.Feature;
import it.xtypes.typesystem.GetAll;
import it.xtypes.typesystem.Indexed;
import it.xtypes.typesystem.IntegerConstant;
import it.xtypes.typesystem.Length;
import it.xtypes.typesystem.Rule;
import it.xtypes.typesystem.TypingStatement;
import it.xtypes.typesystem.VariableDeclarationWithType;
import it.xtypes.typesystem.VariableReference;
import it.xtypes.typesystem.TypeSystemDefinition;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

import com.google.inject.Inject;

/**
 * Provides labels for a EObjects.
 * 
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class TypeSystemLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public TypeSystemLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	/*
	 * //Labels and icons can be computed like this:
	 * 
	 * String text(MyModel ele) { return "my "+ele.getName(); }
	 * 
	 * String image(MyModel ele) { return "MyModel.gif"; }
	 */

	/**
	 * Makes sure to return an empty string if the passed string is null
	 * 
	 * @param s
	 * @return
	 */
	private String notNull(String s) {
		if (s == null)
			return "";
		return s;
	}

	String text(TypeSystemDefinition typeSystem) {
		return "typesystem"
				+ (typeSystem.getEPackage() != null ? typeSystem.getEPackage()
						.getName() : "");
	}

	String text(EClassifier eClassifier) {
		if (eClassifier == null)
			return "";
		return notNull(eClassifier.getName());
	}

	String text(Rule rule) {
		return "rule: " + rule.getName();
	}

	String text(Axiom rule) {
		return "axiom: " + rule.getName();
	}

	String text(CompoundExpression compoundExpression) {
		return getText(compoundExpression.getMainExpression()) + "."
				+ getText(compoundExpression.getSubExpression());
	}

	String text(VariableDeclarationWithType type) {
		return getText(type.getLanguageExpressionType().getEclassifier())
				+ (type.getLanguageExpressionType().isMulti() ? "*" : "") + " "
				+ notNull(type.getName());
	}

	String text(ConstantType type) {
		return notNull(type.getTypeRep());
	}

	String text(VariableReference variableReference) {
		return notNull(variableReference.getVarRef().getName());
	}

	String text(Lenght lenght) {
		return "len(" + getText(lenght.getArgument()) + ")";
	}

	String text(Indexed indexed) {
		return getText(indexed.getFeature()) + "["
				+ getText(indexed.getIndex()) + "]";
	}

	String text(Feature feature) {
		return getText(feature.getFeature());
	}

	String text(IntegerConstant i) {
		return "" + i.getInteger();
	}

	String text(GetAll getAll) {
		return "getall(" + getText(getAll.getMainfeature()) + ")";
	}

	String text(Container container) {
		return "container(" + getText(container.getArgument()) + ")";
	}
	
	String text(EnvironmentAccess environmentAccess) {
		return "env(" + getText(environmentAccess.getArgument()) + ")";
	}

	String text(EnvironmentAssignment environmentAssignment) {
		return notNull(environmentAssignment.getLeft()) + " := "
				+ notNull(environmentAssignment.getRight());
	}
	
	String text(EnvironmentIncrement eIncrement) {
		return notNull(eIncrement.getLeft()) + " += " + getText(eIncrement.getRight());
	}
	
	String text(EnvironmentDecrement eDecrement) {
		return notNull(eDecrement.getLeft()) + " -= " + getText(eDecrement.getRight());
	}
	
	String text(TypingStatement typingStatement) {
		return getText(typingStatement.getLeft()) + " " + 
			notNull(typingStatement.getRelation()) + " " +
			getText(typingStatement.getRight());
	}
}
