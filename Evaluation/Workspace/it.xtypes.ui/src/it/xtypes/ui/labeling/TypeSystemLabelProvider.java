/*
 * generated by Xtext
 */
package it.xtypes.ui.labeling;

import it.xtypes.typesystem.Axiom;
import it.xtypes.typesystem.JudgmentDescription;
import it.xtypes.typesystem.Rule;
import it.xtypes.typesystem.TypeSystemDefinition;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

import com.google.inject.Inject;

/**
 * Provides labels for a EObjects.
 * 
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class TypeSystemLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public TypeSystemLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	/**
	 * Makes sure to return an empty string if the passed string is null
	 * 
	 * @param s
	 * @return
	 */
	private String notNull(String s) {
		if (s == null)
			return "";
		return s;
	}

	String text(TypeSystemDefinition typeSystem) {
		return "typesystem"
				+ (typeSystem.getEPackage() != null ? " "
						+ typeSystem.getEPackage().getName() : "");
	}

	String text(EClassifier eClassifier) {
		if (eClassifier == null)
			return "";
		return notNull(eClassifier.getName());
	}

	String text(Rule rule) {
		return "rule: " + notNull(rule.getName());
	}

	String text(Axiom rule) {
		return "axiom: " + notNull(rule.getName());
	}

	String text(JudgmentDescription judgmentDescription) {
		return notNull(judgmentDescription.getJudgmentsymbol()) + " "
				+ notNull(judgmentDescription.getRelation());
	}
}
