/*
* generated by Xtext
*/
grammar InternalTypeSystem;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package it.xtypes.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package it.xtypes.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.IUnorderedGroupHelper.UnorderedGroupState;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import it.xtypes.services.TypeSystemGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private TypeSystemGrammarAccess grammarAccess;
 	
    public InternalTypeSystemParser(TokenStream input, TypeSystemGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "TypeSystemDefinition";	
   	}
   	
   	@Override
   	protected TypeSystemGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleTypeSystemDefinition
entryRuleTypeSystemDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeSystemDefinitionRule()); }
	 iv_ruleTypeSystemDefinition=ruleTypeSystemDefinition 
	 { $current=$iv_ruleTypeSystemDefinition.current; } 
	 EOF 
;

// Rule TypeSystemDefinition
ruleTypeSystemDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='typesystem' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeSystemDefinitionAccess().getTypesystemKeyword_0_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTypeSystemDefinitionAccess().getNameIDTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeSystemDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))?	otherlv_2='grammar' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeSystemDefinitionAccess().getGrammarKeyword_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeSystemDefinitionRule());
	        }
        }
	otherlv_3=RULE_STRING
	{
		newLeafNode(otherlv_3, grammarAccess.getTypeSystemDefinitionAccess().getEPackageEPackageCrossReference_2_0()); 
	}

)
)(	otherlv_4='genmodel' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTypeSystemDefinitionAccess().getGenmodelKeyword_3_0());
    }
(
(
		lv_genModel_5_0=RULE_STRING
		{
			newLeafNode(lv_genModel_5_0, grammarAccess.getTypeSystemDefinitionAccess().getGenModelSTRINGTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeSystemDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"genModel",
        		lv_genModel_5_0, 
        		"STRING");
	    }

)
))?(	otherlv_6='judgments' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTypeSystemDefinitionAccess().getJudgmentsKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeSystemDefinitionAccess().getJudgmentDescriptionsJudgmentDescriptionParserRuleCall_4_1_0()); 
	    }
		lv_judgmentDescriptions_7_0=ruleJudgmentDescription		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeSystemDefinitionRule());
	        }
       		add(
       			$current, 
       			"judgmentDescriptions",
        		lv_judgmentDescriptions_7_0, 
        		"JudgmentDescription");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_8='end' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTypeSystemDefinitionAccess().getEndKeyword_4_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeSystemDefinitionAccess().getRulesRuleParserRuleCall_5_0()); 
	    }
		lv_rules_9_0=ruleRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeSystemDefinitionRule());
	        }
       		add(
       			$current, 
       			"rules",
        		lv_rules_9_0, 
        		"Rule");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleJudgmentDescription
entryRuleJudgmentDescription returns [EObject current=null] 
	@init { 
		UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
			grammarAccess.getJudgmentDescriptionAccess().getUnorderedGroup_5()
		);
	}
	:
	{ newCompositeNode(grammarAccess.getJudgmentDescriptionRule()); }
	 iv_ruleJudgmentDescription=ruleJudgmentDescription 
	 { $current=$iv_ruleJudgmentDescription.current; } 
	 EOF 
;
finally {
	myUnorderedGroupState.restore();
}

// Rule JudgmentDescription
ruleJudgmentDescription returns [EObject current=null] 
    @init { enterRule(); 
		UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
			grammarAccess.getJudgmentDescriptionAccess().getUnorderedGroup_5()
		);
    }
    @after { leaveRule(); }:
((
(
		lv_judgmentsymbol_0_0=RULE_STRING
		{
			newLeafNode(lv_judgmentsymbol_0_0, grammarAccess.getJudgmentDescriptionAccess().getJudgmentsymbolSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJudgmentDescriptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"judgmentsymbol",
        		lv_judgmentsymbol_0_0, 
        		"STRING");
	    }

)
)(
(
		lv_relation_1_0=RULE_STRING
		{
			newLeafNode(lv_relation_1_0, grammarAccess.getJudgmentDescriptionAccess().getRelationSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJudgmentDescriptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"relation",
        		lv_relation_1_0, 
        		"STRING");
	    }

)
)	otherlv_2='kind' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getJudgmentDescriptionAccess().getKindKeyword_2());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJudgmentDescriptionAccess().getEqualsOpParserRuleCall_3()); 
    }
ruleEqualsOp
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_kind_4_0=RULE_STRING
		{
			newLeafNode(lv_kind_4_0, grammarAccess.getJudgmentDescriptionAccess().getKindSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJudgmentDescriptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"kind",
        		lv_kind_4_0, 
        		"STRING");
	    }

)
)(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getJudgmentDescriptionAccess().getUnorderedGroup_5());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getJudgmentDescriptionAccess().getUnorderedGroup_5(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getJudgmentDescriptionAccess().getUnorderedGroup_5(), 0);
	 				}
					({true}?=>(	otherlv_6='success' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getJudgmentDescriptionAccess().getSuccessKeyword_5_0_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJudgmentDescriptionAccess().getEqualsOpParserRuleCall_5_0_1()); 
    }
ruleEqualsOp
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_success_8_0=RULE_STRING
		{
			newLeafNode(lv_success_8_0, grammarAccess.getJudgmentDescriptionAccess().getSuccessSTRINGTerminalRuleCall_5_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJudgmentDescriptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"success",
        		lv_success_8_0, 
        		"STRING");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getJudgmentDescriptionAccess().getUnorderedGroup_5());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getJudgmentDescriptionAccess().getUnorderedGroup_5(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getJudgmentDescriptionAccess().getUnorderedGroup_5(), 1);
	 				}
					({true}?=>(	otherlv_9='fail' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getJudgmentDescriptionAccess().getFailKeyword_5_1_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJudgmentDescriptionAccess().getEqualsOpParserRuleCall_5_1_1()); 
    }
ruleEqualsOp
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_fail_11_0=RULE_STRING
		{
			newLeafNode(lv_fail_11_0, grammarAccess.getJudgmentDescriptionAccess().getFailSTRINGTerminalRuleCall_5_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJudgmentDescriptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"fail",
        		lv_fail_11_0, 
        		"STRING");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getJudgmentDescriptionAccess().getUnorderedGroup_5());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getJudgmentDescriptionAccess().getUnorderedGroup_5(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getJudgmentDescriptionAccess().getUnorderedGroup_5(), 2);
	 				}
					({true}?=>(	otherlv_12='nomatch' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getJudgmentDescriptionAccess().getNomatchKeyword_5_2_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJudgmentDescriptionAccess().getEqualsOpParserRuleCall_5_2_1()); 
    }
ruleEqualsOp
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_nomatch_14_0=RULE_STRING
		{
			newLeafNode(lv_nomatch_14_0, grammarAccess.getJudgmentDescriptionAccess().getNomatchSTRINGTerminalRuleCall_5_2_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJudgmentDescriptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"nomatch",
        		lv_nomatch_14_0, 
        		"STRING");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getJudgmentDescriptionAccess().getUnorderedGroup_5());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getJudgmentDescriptionAccess().getUnorderedGroup_5(), 3)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getJudgmentDescriptionAccess().getUnorderedGroup_5(), 3);
	 				}
					({true}?=>(
(
		lv_binary_15_0=	'binary' 
    {
        newLeafNode(lv_binary_15_0, grammarAccess.getJudgmentDescriptionAccess().getBinaryBinaryKeyword_5_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJudgmentDescriptionRule());
	        }
       		setWithLastConsumed($current, "binary", true, "binary");
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getJudgmentDescriptionAccess().getUnorderedGroup_5());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getJudgmentDescriptionAccess().getUnorderedGroup_5());
	}

))
;
finally {
	myUnorderedGroupState.restore();
}





// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	 iv_ruleRule=ruleRule 
	 { $current=$iv_ruleRule.current; } 
	 EOF 
;

// Rule Rule
ruleRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRuleAccess().getAxiomParserRuleCall_0()); 
    }
    this_Axiom_0=ruleAxiom
    { 
        $current = $this_Axiom_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRuleAccess().getRuleWithPremisesParserRuleCall_1()); 
    }
    this_RuleWithPremises_1=ruleRuleWithPremises
    { 
        $current = $this_RuleWithPremises_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAxiom
entryRuleAxiom returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAxiomRule()); }
	 iv_ruleAxiom=ruleAxiom 
	 { $current=$iv_ruleAxiom.current; } 
	 EOF 
;

// Rule Axiom
ruleAxiom returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='axiom' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAxiomAccess().getAxiomKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAxiomAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAxiomRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAxiomAccess().getTypejudgmentTypingJudgmentWithEnvironmentParserRuleCall_2_0()); 
	    }
		lv_typejudgment_2_0=ruleTypingJudgmentWithEnvironment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAxiomRule());
	        }
       		set(
       			$current, 
       			"typejudgment",
        		lv_typejudgment_2_0, 
        		"TypingJudgmentWithEnvironment");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRuleWithPremises
entryRuleRuleWithPremises returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleWithPremisesRule()); }
	 iv_ruleRuleWithPremises=ruleRuleWithPremises 
	 { $current=$iv_ruleRuleWithPremises.current; } 
	 EOF 
;

// Rule RuleWithPremises
ruleRuleWithPremises returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='rule' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRuleWithPremisesAccess().getRuleKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRuleWithPremisesAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleWithPremisesRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='derives' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRuleWithPremisesAccess().getDerivesKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleWithPremisesAccess().getTypejudgmentTypingJudgmentWithEnvironmentParserRuleCall_3_0()); 
	    }
		lv_typejudgment_3_0=ruleTypingJudgmentWithEnvironment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleWithPremisesRule());
	        }
       		set(
       			$current, 
       			"typejudgment",
        		lv_typejudgment_3_0, 
        		"TypingJudgmentWithEnvironment");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='from' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRuleWithPremisesAccess().getFromKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleWithPremisesAccess().getPremisesTypingJudgmentParserRuleCall_5_0()); 
	    }
		lv_premises_5_0=ruleTypingJudgment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleWithPremisesRule());
	        }
       		add(
       			$current, 
       			"premises",
        		lv_premises_5_0, 
        		"TypingJudgment");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleTypingJudgment
entryRuleTypingJudgment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypingJudgmentRule()); }
	 iv_ruleTypingJudgment=ruleTypingJudgment 
	 { $current=$iv_ruleTypingJudgment.current; } 
	 EOF 
;

// Rule TypingJudgment
ruleTypingJudgment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypingJudgmentAccess().getQuantificationParserRuleCall_0()); 
    }
    this_Quantification_0=ruleQuantification
    { 
        $current = $this_Quantification_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypingJudgmentAccess().getVariableDeclarationWithTypeParserRuleCall_1()); 
    }
    this_VariableDeclarationWithType_1=ruleVariableDeclarationWithType
    { 
        $current = $this_VariableDeclarationWithType_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypingJudgmentAccess().getOrTypingJudgmentParserRuleCall_2()); 
    }
    this_OrTypingJudgment_2=ruleOrTypingJudgment
    { 
        $current = $this_OrTypingJudgment_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypingJudgmentAccess().getStandardOperationParserRuleCall_3()); 
    }
    this_StandardOperation_3=ruleStandardOperation
    { 
        $current = $this_StandardOperation_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypingJudgmentAccess().getTypingJudgmentWithEnvironmentParserRuleCall_4()); 
    }
    this_TypingJudgmentWithEnvironment_4=ruleTypingJudgmentWithEnvironment
    { 
        $current = $this_TypingJudgmentWithEnvironment_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleOrTypingJudgment
entryRuleOrTypingJudgment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrTypingJudgmentRule()); }
	 iv_ruleOrTypingJudgment=ruleOrTypingJudgment 
	 { $current=$iv_ruleOrTypingJudgment.current; } 
	 EOF 
;

// Rule OrTypingJudgment
ruleOrTypingJudgment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOrTypingJudgmentAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrTypingJudgmentAccess().getBranchesOrBranchParserRuleCall_1_0()); 
	    }
		lv_branches_1_0=ruleOrBranch		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrTypingJudgmentRule());
	        }
       		add(
       			$current, 
       			"branches",
        		lv_branches_1_0, 
        		"OrBranch");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOrTypingJudgmentAccess().getOrSeparatorParserRuleCall_2_0()); 
    }
ruleOrSeparator
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrTypingJudgmentAccess().getBranchesOrBranchParserRuleCall_2_1_0()); 
	    }
		lv_branches_3_0=ruleOrBranch		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrTypingJudgmentRule());
	        }
       		add(
       			$current, 
       			"branches",
        		lv_branches_3_0, 
        		"OrBranch");
	        afterParserOrEnumRuleCall();
	    }

)
))+	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOrTypingJudgmentAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrTypingJudgmentAccess().getErrorErrorSpecificationParserRuleCall_4_0()); 
	    }
		lv_error_5_0=ruleErrorSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrTypingJudgmentRule());
	        }
       		set(
       			$current, 
       			"error",
        		lv_error_5_0, 
        		"ErrorSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleOrBranch
entryRuleOrBranch returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrBranchRule()); }
	 iv_ruleOrBranch=ruleOrBranch 
	 { $current=$iv_ruleOrBranch.current; } 
	 EOF 
;

// Rule OrBranch
ruleOrBranch returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrBranchAccess().getJudgmentsTypingJudgmentParserRuleCall_0()); 
	    }
		lv_judgments_0_0=ruleTypingJudgment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrBranchRule());
	        }
       		add(
       			$current, 
       			"judgments",
        		lv_judgments_0_0, 
        		"TypingJudgment");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;







// Entry rule entryRuleVariableDeclarationWithType
entryRuleVariableDeclarationWithType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationWithTypeRule()); }
	 iv_ruleVariableDeclarationWithType=ruleVariableDeclarationWithType 
	 { $current=$iv_ruleVariableDeclarationWithType.current; } 
	 EOF 
;

// Rule VariableDeclarationWithType
ruleVariableDeclarationWithType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='var' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVariableDeclarationWithTypeAccess().getVarKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationWithTypeAccess().getExpressionTypeExpressionTypeParserRuleCall_1_0()); 
	    }
		lv_expressionType_1_0=ruleExpressionType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationWithTypeRule());
	        }
       		set(
       			$current, 
       			"expressionType",
        		lv_expressionType_1_0, 
        		"ExpressionType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getVariableDeclarationWithTypeAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclarationWithTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationWithTypeAccess().getOpAssignOpParserRuleCall_3_0_0()); 
	    }
		lv_op_3_0=ruleAssignOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationWithTypeRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_3_0, 
        		"AssignOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationWithTypeAccess().getRightExpressionParserRuleCall_3_1_0()); 
	    }
		lv_right_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationWithTypeRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleExpressionType
entryRuleExpressionType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionTypeRule()); }
	 iv_ruleExpressionType=ruleExpressionType 
	 { $current=$iv_ruleExpressionType.current; } 
	 EOF 
;

// Rule ExpressionType
ruleExpressionType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionTypeAccess().getCollectionTypeParserRuleCall_0()); 
    }
    this_CollectionType_0=ruleCollectionType
    { 
        $current = $this_CollectionType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionTypeAccess().getEClassifierTypeParserRuleCall_1()); 
    }
    this_EClassifierType_1=ruleEClassifierType
    { 
        $current = $this_EClassifierType_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionTypeAccess().getBasicTypeParserRuleCall_2()); 
    }
    this_BasicType_2=ruleBasicType
    { 
        $current = $this_BasicType_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCollectionType
entryRuleCollectionType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCollectionTypeRule()); }
	 iv_ruleCollectionType=ruleCollectionType 
	 { $current=$iv_ruleCollectionType.current; } 
	 EOF 
;

// Rule CollectionType
ruleCollectionType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_collection_0_0=	'List' 
    {
        newLeafNode(lv_collection_0_0, grammarAccess.getCollectionTypeAccess().getCollectionListKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCollectionTypeRule());
	        }
       		setWithLastConsumed($current, "collection", lv_collection_0_0, "List");
	    }

)
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCollectionTypeAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCollectionTypeAccess().getTypeExpressionTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleExpressionType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCollectionTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"ExpressionType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCollectionTypeAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleEClassifierType
entryRuleEClassifierType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEClassifierTypeRule()); }
	 iv_ruleEClassifierType=ruleEClassifierType 
	 { $current=$iv_ruleEClassifierType.current; } 
	 EOF 
;

// Rule EClassifierType
ruleEClassifierType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEClassifierTypeRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getEClassifierTypeAccess().getEclassifierEClassifierCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleBasicType
entryRuleBasicType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicTypeRule()); }
	 iv_ruleBasicType=ruleBasicType 
	 { $current=$iv_ruleBasicType.current; } 
	 EOF 
;

// Rule BasicType
ruleBasicType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_basic_0_1=	'String' 
    {
        newLeafNode(lv_basic_0_1, grammarAccess.getBasicTypeAccess().getBasicStringKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasicTypeRule());
	        }
       		setWithLastConsumed($current, "basic", lv_basic_0_1, null);
	    }

    |		lv_basic_0_2=	'Integer' 
    {
        newLeafNode(lv_basic_0_2, grammarAccess.getBasicTypeAccess().getBasicIntegerKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasicTypeRule());
	        }
       		setWithLastConsumed($current, "basic", lv_basic_0_2, null);
	    }

    |		lv_basic_0_3=	'Object' 
    {
        newLeafNode(lv_basic_0_3, grammarAccess.getBasicTypeAccess().getBasicObjectKeyword_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasicTypeRule());
	        }
       		setWithLastConsumed($current, "basic", lv_basic_0_3, null);
	    }

)

)
)
;





// Entry rule entryRuleVariableSimpleDeclaration
entryRuleVariableSimpleDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableSimpleDeclarationRule()); }
	 iv_ruleVariableSimpleDeclaration=ruleVariableSimpleDeclaration 
	 { $current=$iv_ruleVariableSimpleDeclaration.current; } 
	 EOF 
;

// Rule VariableSimpleDeclaration
ruleVariableSimpleDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getVariableSimpleDeclarationAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableSimpleDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleQuantification
entryRuleQuantification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuantificationRule()); }
	 iv_ruleQuantification=ruleQuantification 
	 { $current=$iv_ruleQuantification.current; } 
	 EOF 
;

// Rule Quantification
ruleQuantification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getQuantificationAccess().getForEachParserRuleCall_0_0()); 
    }
    this_ForEach_0=ruleForEach
    { 
        $current = $this_ForEach_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getQuantificationAccess().getForAllParserRuleCall_0_1()); 
    }
    this_ForAll_1=ruleForAll
    { 
        $current = $this_ForAll_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getQuantificationAccess().getExistsParserRuleCall_0_2()); 
    }
    this_Exists_2=ruleExists
    { 
        $current = $this_Exists_2.current; 
        afterParserOrEnumRuleCall();
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getQuantificationAccess().getErrorErrorSpecificationParserRuleCall_1_0()); 
	    }
		lv_error_3_0=ruleErrorSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuantificationRule());
	        }
       		set(
       			$current, 
       			"error",
        		lv_error_3_0, 
        		"ErrorSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleForEach
entryRuleForEach returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForEachRule()); }
	 iv_ruleForEach=ruleForEach 
	 { $current=$iv_ruleForEach.current; } 
	 EOF 
;

// Rule ForEach
ruleForEach returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='foreach' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForEachAccess().getForeachKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForEachAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForEachRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='as' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getForEachAccess().getAsKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForEachAccess().getVariableVariableSimpleDeclarationParserRuleCall_3_0()); 
	    }
		lv_variable_3_0=ruleVariableSimpleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForEachRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_3_0, 
        		"VariableSimpleDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getForEachAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForEachAccess().getJudgmentsTypingJudgmentParserRuleCall_5_0()); 
	    }
		lv_judgments_5_0=ruleTypingJudgment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForEachRule());
	        }
       		add(
       			$current, 
       			"judgments",
        		lv_judgments_5_0, 
        		"TypingJudgment");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getForEachAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleForAll
entryRuleForAll returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForAllRule()); }
	 iv_ruleForAll=ruleForAll 
	 { $current=$iv_ruleForAll.current; } 
	 EOF 
;

// Rule ForAll
ruleForAll returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='forall' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForAllAccess().getForallKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForAllAccess().getVariableVariableSimpleDeclarationParserRuleCall_1_0()); 
	    }
		lv_variable_1_0=ruleVariableSimpleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForAllRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_1_0, 
        		"VariableSimpleDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='in' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getForAllAccess().getInKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForAllAccess().getExpressionExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForAllRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getForAllAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForAllAccess().getJudgmentsTypingJudgmentParserRuleCall_5_0()); 
	    }
		lv_judgments_5_0=ruleTypingJudgment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForAllRule());
	        }
       		add(
       			$current, 
       			"judgments",
        		lv_judgments_5_0, 
        		"TypingJudgment");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getForAllAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleExists
entryRuleExists returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExistsRule()); }
	 iv_ruleExists=ruleExists 
	 { $current=$iv_ruleExists.current; } 
	 EOF 
;

// Rule Exists
ruleExists returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_not_0_0=	'!' 
    {
        newLeafNode(lv_not_0_0, grammarAccess.getExistsAccess().getNotExclamationMarkKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExistsRule());
	        }
       		setWithLastConsumed($current, "not", true, "!");
	    }

)
)?	otherlv_1='exists' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExistsAccess().getExistsKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExistsAccess().getVariableVariableSimpleDeclarationParserRuleCall_2_0()); 
	    }
		lv_variable_2_0=ruleVariableSimpleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExistsRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_2_0, 
        		"VariableSimpleDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='in' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExistsAccess().getInKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExistsAccess().getExpressionExpressionParserRuleCall_4_0()); 
	    }
		lv_expression_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExistsRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExistsAccess().getLeftCurlyBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExistsAccess().getJudgmentsTypingJudgmentParserRuleCall_6_0()); 
	    }
		lv_judgments_6_0=ruleTypingJudgment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExistsRule());
	        }
       		add(
       			$current, 
       			"judgments",
        		lv_judgments_6_0, 
        		"TypingJudgment");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getExistsAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleStandardOperation
entryRuleStandardOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStandardOperationRule()); }
	 iv_ruleStandardOperation=ruleStandardOperation 
	 { $current=$iv_ruleStandardOperation.current; } 
	 EOF 
;

// Rule StandardOperation
ruleStandardOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStandardOperationAccess().getEnvironmentOperationParserRuleCall_0()); 
    }
    this_EnvironmentOperation_0=ruleEnvironmentOperation
    { 
        $current = $this_EnvironmentOperation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStandardOperationAccess().getListOperationParserRuleCall_1()); 
    }
    this_ListOperation_1=ruleListOperation
    { 
        $current = $this_ListOperation_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStandardOperationAccess().getAssignmentParserRuleCall_2()); 
    }
    this_Assignment_2=ruleAssignment
    { 
        $current = $this_Assignment_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStandardOperationAccess().getEqualsParserRuleCall_3()); 
    }
    this_Equals_3=ruleEquals
    { 
        $current = $this_Equals_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStandardOperationAccess().getFailParserRuleCall_4()); 
    }
    this_Fail_4=ruleFail
    { 
        $current = $this_Fail_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStandardOperationAccess().getSuccessParserRuleCall_5()); 
    }
    this_Success_5=ruleSuccess
    { 
        $current = $this_Success_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEnvironmentOperation
entryRuleEnvironmentOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnvironmentOperationRule()); }
	 iv_ruleEnvironmentOperation=ruleEnvironmentOperation 
	 { $current=$iv_ruleEnvironmentOperation.current; } 
	 EOF 
;

// Rule EnvironmentOperation
ruleEnvironmentOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getEnvironmentOperationAccess().getEnvironmentAssignmentAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEnvironmentOperationAccess().getLeftEnvironmentIdParserRuleCall_0_1_0()); 
	    }
		lv_left_1_0=ruleEnvironmentId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnvironmentOperationRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_1_0, 
        		"EnvironmentId");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEnvironmentOperationAccess().getAssignOpParserRuleCall_0_2()); 
    }
ruleAssignOp
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnvironmentOperationAccess().getRightEnvironmentParserRuleCall_0_3_0()); 
	    }
		lv_right_3_0=ruleEnvironment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnvironmentOperationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Environment");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getEnvironmentOperationAccess().getEnvironmentIncrementAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEnvironmentOperationAccess().getLeftEnvironmentIdParserRuleCall_1_1_0()); 
	    }
		lv_left_5_0=ruleEnvironmentId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnvironmentOperationRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_5_0, 
        		"EnvironmentId");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEnvironmentOperationAccess().getPlusOpParserRuleCall_1_2()); 
    }
rulePlusOp
    { 
        afterParserOrEnumRuleCall();
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEnvironmentOperationAccess().getEqualsOpParserRuleCall_1_3()); 
    }
ruleEqualsOp
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnvironmentOperationAccess().getRightEnvironmentStatementParserRuleCall_1_4_0()); 
	    }
		lv_right_8_0=ruleEnvironmentStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnvironmentOperationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_8_0, 
        		"EnvironmentStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getEnvironmentOperationAccess().getEnvironmentDecrementAction_2_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEnvironmentOperationAccess().getLeftEnvironmentIdParserRuleCall_2_1_0()); 
	    }
		lv_left_10_0=ruleEnvironmentId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnvironmentOperationRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_10_0, 
        		"EnvironmentId");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEnvironmentOperationAccess().getMinusOpParserRuleCall_2_2()); 
    }
ruleMinusOp
    { 
        afterParserOrEnumRuleCall();
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEnvironmentOperationAccess().getEqualsOpParserRuleCall_2_3()); 
    }
ruleEqualsOp
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnvironmentOperationAccess().getRightTypingStatementExpressionParserRuleCall_2_4_0()); 
	    }
		lv_right_13_0=ruleTypingStatementExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnvironmentOperationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_13_0, 
        		"TypingStatementExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleListOperation
entryRuleListOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getListOperationRule()); }
	 iv_ruleListOperation=ruleListOperation 
	 { $current=$iv_ruleListOperation.current; } 
	 EOF 
;

// Rule ListOperation
ruleListOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getListOperationAccess().getListIncrementAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getListOperationAccess().getLeftExpressionParserRuleCall_0_1_0()); 
	    }
		lv_left_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListOperationRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getListOperationAccess().getPlusOpParserRuleCall_0_2()); 
    }
rulePlusOp
    { 
        afterParserOrEnumRuleCall();
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getListOperationAccess().getEqualsOpParserRuleCall_0_3()); 
    }
ruleEqualsOp
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListOperationAccess().getRightExpressionParserRuleCall_0_4_0()); 
	    }
		lv_right_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListOperationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getListOperationAccess().getListDecrementAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getListOperationAccess().getLeftExpressionParserRuleCall_1_1_0()); 
	    }
		lv_left_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListOperationRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getListOperationAccess().getMinusOpParserRuleCall_1_2()); 
    }
ruleMinusOp
    { 
        afterParserOrEnumRuleCall();
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getListOperationAccess().getEqualsOpParserRuleCall_1_3()); 
    }
ruleEqualsOp
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListOperationAccess().getRightExpressionParserRuleCall_1_4_0()); 
	    }
		lv_right_9_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListOperationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_9_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getLeftExpressionParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAssignmentAccess().getAssignOpParserRuleCall_1()); 
    }
ruleAssignOp
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getRightExpressionParserRuleCall_2_0()); 
	    }
		lv_right_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEquals
entryRuleEquals returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualsRule()); }
	 iv_ruleEquals=ruleEquals 
	 { $current=$iv_ruleEquals.current; } 
	 EOF 
;

// Rule Equals
ruleEquals returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEqualsAccess().getLeftExpressionParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualsRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualsAccess().getOpEqualsOpParserRuleCall_1_0_0()); 
	    }
		lv_op_1_1=ruleEqualsOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualsRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_1, 
        		"EqualsOp");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getEqualsAccess().getOpNotEqualsOpParserRuleCall_1_0_1()); 
	    }
		lv_op_1_2=ruleNotEqualsOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualsRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_2, 
        		"NotEqualsOp");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualsAccess().getRightExpressionParserRuleCall_2_0()); 
	    }
		lv_right_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualsRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualsAccess().getErrorErrorSpecificationParserRuleCall_3_0()); 
	    }
		lv_error_3_0=ruleErrorSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualsRule());
	        }
       		set(
       			$current, 
       			"error",
        		lv_error_3_0, 
        		"ErrorSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleFail
entryRuleFail returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFailRule()); }
	 iv_ruleFail=ruleFail 
	 { $current=$iv_ruleFail.current; } 
	 EOF 
;

// Rule Fail
ruleFail returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getFailAccess().getFailAction_0(),
            $current);
    }
)	otherlv_1='fail' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFailAccess().getFailKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFailAccess().getErrorErrorSpecificationParserRuleCall_2_0()); 
	    }
		lv_error_2_0=ruleErrorSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFailRule());
	        }
       		set(
       			$current, 
       			"error",
        		lv_error_2_0, 
        		"ErrorSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleSuccess
entryRuleSuccess returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSuccessRule()); }
	 iv_ruleSuccess=ruleSuccess 
	 { $current=$iv_ruleSuccess.current; } 
	 EOF 
;

// Rule Success
ruleSuccess returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSuccessAccess().getSuccessAction_0(),
            $current);
    }
)	otherlv_1='success' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSuccessAccess().getSuccessKeyword_1());
    }
)
;





// Entry rule entryRuleTypingJudgmentWithEnvironment
entryRuleTypingJudgmentWithEnvironment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypingJudgmentWithEnvironmentRule()); }
	 iv_ruleTypingJudgmentWithEnvironment=ruleTypingJudgmentWithEnvironment 
	 { $current=$iv_ruleTypingJudgmentWithEnvironment.current; } 
	 EOF 
;

// Rule TypingJudgmentWithEnvironment
ruleTypingJudgmentWithEnvironment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypingJudgmentWithEnvironmentAccess().getEnvironmentEnvironmentParserRuleCall_0_0()); 
	    }
		lv_environment_0_0=ruleEnvironment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypingJudgmentWithEnvironmentRule());
	        }
       		set(
       			$current, 
       			"environment",
        		lv_environment_0_0, 
        		"Environment");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypingJudgmentWithEnvironmentAccess().getTypejudgmentsymbolTypeJudgmentSymbolParserRuleCall_1_0()); 
	    }
		lv_typejudgmentsymbol_1_0=ruleTypeJudgmentSymbol		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypingJudgmentWithEnvironmentRule());
	        }
       		set(
       			$current, 
       			"typejudgmentsymbol",
        		lv_typejudgmentsymbol_1_0, 
        		"TypeJudgmentSymbol");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypingJudgmentWithEnvironmentAccess().getTypingstatementTypingStatementParserRuleCall_2_0()); 
	    }
		lv_typingstatement_2_0=ruleTypingStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypingJudgmentWithEnvironmentRule());
	        }
       		set(
       			$current, 
       			"typingstatement",
        		lv_typingstatement_2_0, 
        		"TypingStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypingJudgmentWithEnvironmentAccess().getErrorErrorSpecificationParserRuleCall_3_0()); 
	    }
		lv_error_3_0=ruleErrorSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypingJudgmentWithEnvironmentRule());
	        }
       		set(
       			$current, 
       			"error",
        		lv_error_3_0, 
        		"ErrorSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleErrorSpecification
entryRuleErrorSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getErrorSpecificationRule()); }
	 iv_ruleErrorSpecification=ruleErrorSpecification 
	 { $current=$iv_ruleErrorSpecification.current; } 
	 EOF 
;

// Rule ErrorSpecification
ruleErrorSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='error' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getErrorSpecificationAccess().getErrorKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getErrorSpecificationAccess().getEqualsOpParserRuleCall_1()); 
    }
ruleEqualsOp
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getErrorSpecificationAccess().getFailureErrorFailureErrorParserRuleCall_2_0()); 
	    }
		lv_failureError_2_0=ruleFailureError		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getErrorSpecificationRule());
	        }
       		set(
       			$current, 
       			"failureError",
        		lv_failureError_2_0, 
        		"FailureError");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFailureError
entryRuleFailureError returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFailureErrorRule()); }
	 iv_ruleFailureError=ruleFailureError 
	 { $current=$iv_ruleFailureError.current; } 
	 EOF 
;

// Rule FailureError
ruleFailureError returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFailureErrorAccess().getTerminalErrorParserRuleCall_0()); 
    }
    this_TerminalError_0=ruleTerminalError
    { 
        $current = $this_TerminalError_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getFailureErrorAccess().getComposedErrorLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFailureErrorAccess().getOpPlusOpParserRuleCall_1_1_0()); 
	    }
		lv_op_2_0=rulePlusOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFailureErrorRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"PlusOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFailureErrorAccess().getRightFailureErrorParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleFailureError		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFailureErrorRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"FailureError");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTerminalError
entryRuleTerminalError returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerminalErrorRule()); }
	 iv_ruleTerminalError=ruleTerminalError 
	 { $current=$iv_ruleTerminalError.current; } 
	 EOF 
;

// Rule TerminalError
ruleTerminalError returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalErrorAccess().getErrorStringAction_0_0(),
            $current);
    }
)(
(
		lv_errString_1_0=RULE_STRING
		{
			newLeafNode(lv_errString_1_0, grammarAccess.getTerminalErrorAccess().getErrStringSTRINGTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalErrorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"errString",
        		lv_errString_1_0, 
        		"STRING");
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalErrorAccess().getErrorExpressionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalErrorAccess().getExpressionExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalErrorRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleTypingStatement
entryRuleTypingStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypingStatementRule()); }
	 iv_ruleTypingStatement=ruleTypingStatement 
	 { $current=$iv_ruleTypingStatement.current; } 
	 EOF 
;

// Rule TypingStatement
ruleTypingStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypingStatementAccess().getLeftTypingStatementExpressionParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleTypingStatementExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypingStatementRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"TypingStatementExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypingStatementAccess().getRelationTypeRelationParserRuleCall_1_0()); 
	    }
		lv_relation_1_0=ruleTypeRelation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypingStatementRule());
	        }
       		set(
       			$current, 
       			"relation",
        		lv_relation_1_0, 
        		"TypeRelation");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypingStatementAccess().getRightTypingStatementExpressionParserRuleCall_2_0()); 
	    }
		lv_right_2_0=ruleTypingStatementExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypingStatementRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_2_0, 
        		"TypingStatementExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTypingStatementExpression
entryRuleTypingStatementExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypingStatementExpressionRule()); }
	 iv_ruleTypingStatementExpression=ruleTypingStatementExpression 
	 { $current=$iv_ruleTypingStatementExpression.current; } 
	 EOF 
;

// Rule TypingStatementExpression
ruleTypingStatementExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypingStatementExpressionAccess().getExpressionParserRuleCall()); 
    }
    this_Expression_0=ruleExpression
    { 
        $current = $this_Expression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleEnvironment
entryRuleEnvironment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnvironmentRule()); }
	 iv_ruleEnvironment=ruleEnvironment 
	 { $current=$iv_ruleEnvironment.current; } 
	 EOF 
;

// Rule Environment
ruleEnvironment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEnvironmentAccess().getTerminalEnvironmentParserRuleCall_0()); 
    }
    this_TerminalEnvironment_0=ruleTerminalEnvironment
    { 
        $current = $this_TerminalEnvironment_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getEnvironmentAccess().getEnvironmentCompositionCurrentEnvironmentAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEnvironmentAccess().getOpEnvironmentCompositionParserRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleEnvironmentComposition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnvironmentRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"EnvironmentComposition");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEnvironmentAccess().getSubEnvironmentEnvironmentParserRuleCall_1_2_0()); 
	    }
		lv_subEnvironment_3_0=ruleEnvironment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnvironmentRule());
	        }
       		set(
       			$current, 
       			"subEnvironment",
        		lv_subEnvironment_3_0, 
        		"Environment");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTerminalEnvironment
entryRuleTerminalEnvironment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerminalEnvironmentRule()); }
	 iv_ruleTerminalEnvironment=ruleTerminalEnvironment 
	 { $current=$iv_ruleTerminalEnvironment.current; } 
	 EOF 
;

// Rule TerminalEnvironment
ruleTerminalEnvironment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTerminalEnvironmentAccess().getEnvironmentIdParserRuleCall_0()); 
    }
    this_EnvironmentId_0=ruleEnvironmentId
    { 
        $current = $this_EnvironmentId_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTerminalEnvironmentAccess().getEnvironmentStatementParserRuleCall_1()); 
    }
    this_EnvironmentStatement_1=ruleEnvironmentStatement
    { 
        $current = $this_EnvironmentStatement_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTerminalEnvironmentAccess().getEmptyEnvironmentParserRuleCall_2()); 
    }
    this_EmptyEnvironment_2=ruleEmptyEnvironment
    { 
        $current = $this_EmptyEnvironment_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEnvironmentId
entryRuleEnvironmentId returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnvironmentIdRule()); }
	 iv_ruleEnvironmentId=ruleEnvironmentId 
	 { $current=$iv_ruleEnvironmentId.current; } 
	 EOF 
;

// Rule EnvironmentId
ruleEnvironmentId returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_environmentId_0_0=RULE_ID
		{
			newLeafNode(lv_environmentId_0_0, grammarAccess.getEnvironmentIdAccess().getEnvironmentIdIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnvironmentIdRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"environmentId",
        		lv_environmentId_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleEnvironmentStatement
entryRuleEnvironmentStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnvironmentStatementRule()); }
	 iv_ruleEnvironmentStatement=ruleEnvironmentStatement 
	 { $current=$iv_ruleEnvironmentStatement.current; } 
	 EOF 
;

// Rule EnvironmentStatement
ruleEnvironmentStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEnvironmentStatementAccess().getLeftTypingStatementExpressionParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleTypingStatementExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnvironmentStatementRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"TypingStatementExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEnvironmentStatementAccess().getRelationMappingRelationParserRuleCall_1_0()); 
	    }
		lv_relation_1_0=ruleMappingRelation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnvironmentStatementRule());
	        }
       		set(
       			$current, 
       			"relation",
        		lv_relation_1_0, 
        		"MappingRelation");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEnvironmentStatementAccess().getRightTypingStatementExpressionParserRuleCall_2_0()); 
	    }
		lv_right_2_0=ruleTypingStatementExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnvironmentStatementRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_2_0, 
        		"TypingStatementExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEmptyEnvironment
entryRuleEmptyEnvironment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEmptyEnvironmentRule()); }
	 iv_ruleEmptyEnvironment=ruleEmptyEnvironment 
	 { $current=$iv_ruleEmptyEnvironment.current; } 
	 EOF 
;

// Rule EmptyEnvironment
ruleEmptyEnvironment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_empty_0_0=	'empty' 
    {
        newLeafNode(lv_empty_0_0, grammarAccess.getEmptyEnvironmentAccess().getEmptyEmptyKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEmptyEnvironmentRule());
	        }
       		setWithLastConsumed($current, "empty", lv_empty_0_0, "empty");
	    }

)
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getVariableDeclarationWithTypeParserRuleCall_0()); 
    }
    this_VariableDeclarationWithType_0=ruleVariableDeclarationWithType
    { 
        $current = $this_VariableDeclarationWithType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpressionAccess().getEnvironmentAccessAction_1_0(),
            $current);
    }
)	otherlv_2='env' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getEnvKeyword_1_1());
    }
	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExpressionAccess().getLeftParenthesisKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getEnvIdEnvironmentIdParserRuleCall_1_3_0()); 
	    }
		lv_envId_4_0=ruleEnvironmentId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"envId",
        		lv_envId_4_0, 
        		"EnvironmentId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExpressionAccess().getCommaKeyword_1_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getArgumentExpressionParserRuleCall_1_5_0()); 
	    }
		lv_argument_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"argument",
        		lv_argument_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getExpressionAccess().getRightParenthesisKeyword_1_6());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpressionAccess().getLengthAction_2_0(),
            $current);
    }
)	otherlv_9='len' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getExpressionAccess().getLenKeyword_2_1());
    }
	otherlv_10='(' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getExpressionAccess().getLeftParenthesisKeyword_2_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getArgumentExpressionParserRuleCall_2_3_0()); 
	    }
		lv_argument_11_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"argument",
        		lv_argument_11_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_12=')' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getExpressionAccess().getRightParenthesisKeyword_2_4());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpressionAccess().getGetAllAction_3_0(),
            $current);
    }
)	otherlv_14='getall' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getExpressionAccess().getGetallKeyword_3_1());
    }
	otherlv_15='(' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getExpressionAccess().getLeftParenthesisKeyword_3_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getExpressionExpressionParserRuleCall_3_3_0()); 
	    }
		lv_expression_16_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_16_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_17=',' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getExpressionAccess().getCommaKeyword_3_4());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionRule());
	        }
        }
	otherlv_18=RULE_ID
	{
		newLeafNode(otherlv_18, grammarAccess.getExpressionAccess().getMainfeatureEStructuralFeatureCrossReference_3_5_0()); 
	}

)
)	otherlv_19=',' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getExpressionAccess().getCommaKeyword_3_6());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionRule());
	        }
        }
	otherlv_20=RULE_ID
	{
		newLeafNode(otherlv_20, grammarAccess.getExpressionAccess().getExtendfeatureEStructuralFeatureCrossReference_3_7_0()); 
	}

)
)	otherlv_21=')' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getExpressionAccess().getRightParenthesisKeyword_3_8());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpressionAccess().getContainerAction_4_0(),
            $current);
    }
)	otherlv_23='container' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getExpressionAccess().getContainerKeyword_4_1());
    }
	otherlv_24='(' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getExpressionAccess().getLeftParenthesisKeyword_4_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getArgumentExpressionParserRuleCall_4_3_0()); 
	    }
		lv_argument_25_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"argument",
        		lv_argument_25_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_26=')' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getExpressionAccess().getRightParenthesisKeyword_4_4());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpressionAccess().getCastToAction_5_0(),
            $current);
    }
)	otherlv_28='(' 
    {
    	newLeafNode(otherlv_28, grammarAccess.getExpressionAccess().getLeftParenthesisKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getTypeExpressionTypeParserRuleCall_5_2_0()); 
	    }
		lv_type_29_0=ruleExpressionType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_29_0, 
        		"ExpressionType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_30=')' 
    {
    	newLeafNode(otherlv_30, grammarAccess.getExpressionAccess().getRightParenthesisKeyword_5_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getExpressionExpressionParserRuleCall_5_4_0()); 
	    }
		lv_expression_31_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_31_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpressionAccess().getNullAction_6_0(),
            $current);
    }
)	otherlv_33='null' 
    {
    	newLeafNode(otherlv_33, grammarAccess.getExpressionAccess().getNullKeyword_6_1());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpressionAccess().getNewNameAction_7_0(),
            $current);
    }
)	otherlv_35='newname' 
    {
    	newLeafNode(otherlv_35, grammarAccess.getExpressionAccess().getNewnameKeyword_7_1());
    }
	otherlv_36='(' 
    {
    	newLeafNode(otherlv_36, grammarAccess.getExpressionAccess().getLeftParenthesisKeyword_7_2());
    }
(
(
		lv_argument_37_0=RULE_STRING
		{
			newLeafNode(lv_argument_37_0, grammarAccess.getExpressionAccess().getArgumentSTRINGTerminalRuleCall_7_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"argument",
        		lv_argument_37_0, 
        		"STRING");
	    }

)
)	otherlv_38=')' 
    {
    	newLeafNode(otherlv_38, grammarAccess.getExpressionAccess().getRightParenthesisKeyword_7_4());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpressionAccess().getCloneAction_8_0(),
            $current);
    }
)	otherlv_40='clone' 
    {
    	newLeafNode(otherlv_40, grammarAccess.getExpressionAccess().getCloneKeyword_8_1());
    }
	otherlv_41='(' 
    {
    	newLeafNode(otherlv_41, grammarAccess.getExpressionAccess().getLeftParenthesisKeyword_8_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getArgumentExpressionParserRuleCall_8_3_0()); 
	    }
		lv_argument_42_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"argument",
        		lv_argument_42_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_43=')' 
    {
    	newLeafNode(otherlv_43, grammarAccess.getExpressionAccess().getRightParenthesisKeyword_8_4());
    }
)
    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getTerminalExpressionParserRuleCall_9_0()); 
    }
    this_TerminalExpression_44=ruleTerminalExpression
    { 
        $current = $this_TerminalExpression_44.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpressionAccess().getCompoundExpressionMainExpressionAction_9_1_0(),
            $current);
    }
)(
(
		lv_op_46_0=	'.' 
    {
        newLeafNode(lv_op_46_0, grammarAccess.getExpressionAccess().getOpFullStopKeyword_9_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_46_0, ".");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getSubExpressionSubExpressionParserRuleCall_9_1_2_0()); 
	    }
		lv_subExpression_47_0=ruleSubExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"subExpression",
        		lv_subExpression_47_0, 
        		"SubExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*))
;





// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerminalExpressionRule()); }
	 iv_ruleTerminalExpression=ruleTerminalExpression 
	 { $current=$iv_ruleTerminalExpression.current; } 
	 EOF 
;

// Rule TerminalExpression
ruleTerminalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getStringConstantParserRuleCall_0()); 
    }
    this_StringConstant_0=ruleStringConstant
    { 
        $current = $this_StringConstant_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getIntegerConstantParserRuleCall_1()); 
    }
    this_IntegerConstant_1=ruleIntegerConstant
    { 
        $current = $this_IntegerConstant_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getVariableAccessParserRuleCall_2()); 
    }
    this_VariableAccess_2=ruleVariableAccess
    { 
        $current = $this_VariableAccess_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStringConstant
entryRuleStringConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringConstantRule()); }
	 iv_ruleStringConstant=ruleStringConstant 
	 { $current=$iv_ruleStringConstant.current; } 
	 EOF 
;

// Rule StringConstant
ruleStringConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringConstantAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleIntegerConstant
entryRuleIntegerConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerConstantRule()); }
	 iv_ruleIntegerConstant=ruleIntegerConstant 
	 { $current=$iv_ruleIntegerConstant.current; } 
	 EOF 
;

// Rule IntegerConstant
ruleIntegerConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getIntegerConstantAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleVariableAccess
entryRuleVariableAccess returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableAccessRule()); }
	 iv_ruleVariableAccess=ruleVariableAccess 
	 { $current=$iv_ruleVariableAccess.current; } 
	 EOF 
;

// Rule VariableAccess
ruleVariableAccess returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getVariableAccessAccess().getVariableReferenceParserRuleCall_0()); 
    }
    this_VariableReference_0=ruleVariableReference
    { 
        $current = $this_VariableReference_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getVariableAccessAccess().getIndexedVariableParserRuleCall_1()); 
    }
    this_IndexedVariable_1=ruleIndexedVariable
    { 
        $current = $this_IndexedVariable_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVariableReference
entryRuleVariableReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableReferenceRule()); }
	 iv_ruleVariableReference=ruleVariableReference 
	 { $current=$iv_ruleVariableReference.current; } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='$' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVariableReferenceAccess().getDollarSignKeyword_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableReferenceRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getVariableReferenceAccess().getVarRefVariableDeclarationCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleIndexedVariable
entryRuleIndexedVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIndexedVariableRule()); }
	 iv_ruleIndexedVariable=ruleIndexedVariable 
	 { $current=$iv_ruleIndexedVariable.current; } 
	 EOF 
;

// Rule IndexedVariable
ruleIndexedVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='$' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIndexedVariableAccess().getDollarSignKeyword_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIndexedVariableRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getIndexedVariableAccess().getVarRefVariableDeclarationCrossReference_1_0()); 
	}

)
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIndexedVariableAccess().getLeftSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIndexedVariableAccess().getIndexArrayIndexParserRuleCall_3_0()); 
	    }
		lv_index_3_0=ruleArrayIndex		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIndexedVariableRule());
	        }
       		set(
       			$current, 
       			"index",
        		lv_index_3_0, 
        		"ArrayIndex");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIndexedVariableAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleSubExpression
entryRuleSubExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubExpressionRule()); }
	 iv_ruleSubExpression=ruleSubExpression 
	 { $current=$iv_ruleSubExpression.current; } 
	 EOF 
;

// Rule SubExpression
ruleSubExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSubExpressionAccess().getIndexedAction_0_0(),
            $current);
    }
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubExpressionRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getSubExpressionAccess().getFeatureENamedElementCrossReference_0_1_0()); 
	}

)
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSubExpressionAccess().getLeftSquareBracketKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubExpressionAccess().getIndexArrayIndexParserRuleCall_0_3_0()); 
	    }
		lv_index_3_0=ruleArrayIndex		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubExpressionRule());
	        }
       		set(
       			$current, 
       			"index",
        		lv_index_3_0, 
        		"ArrayIndex");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSubExpressionAccess().getRightSquareBracketKeyword_0_4());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSubExpressionAccess().getFeatureAction_1_0(),
            $current);
    }
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubExpressionRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getSubExpressionAccess().getFeatureENamedElementCrossReference_1_1_0()); 
	}

)
)))
;





// Entry rule entryRuleArrayIndex
entryRuleArrayIndex returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayIndexRule()); }
	 iv_ruleArrayIndex=ruleArrayIndex 
	 { $current=$iv_ruleArrayIndex.current; } 
	 EOF 
;

// Rule ArrayIndex
ruleArrayIndex returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArrayIndexAccess().getIntegerConstantParserRuleCall_0()); 
    }
    this_IntegerConstant_0=ruleIntegerConstant
    { 
        $current = $this_IntegerConstant_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArrayIndexAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAlternative
entryRuleAlternative returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAlternativeRule()); } 
	 iv_ruleAlternative=ruleAlternative 
	 { $current=$iv_ruleAlternative.current.getText(); }  
	 EOF 
;

// Rule Alternative
ruleAlternative returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='|' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAlternativeAccess().getVerticalLineKeyword()); 
    }

    ;





// Entry rule entryRuleOrSeparator
entryRuleOrSeparator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrSeparatorRule()); } 
	 iv_ruleOrSeparator=ruleOrSeparator 
	 { $current=$iv_ruleOrSeparator.current.getText(); }  
	 EOF 
;

// Rule OrSeparator
ruleOrSeparator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrSeparatorAccess().getAlternativeParserRuleCall_0()); 
    }
    this_Alternative_0=ruleAlternative    {
		$current.merge(this_Alternative_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='or' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOrSeparatorAccess().getOrKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleMappingRelation
entryRuleMappingRelation returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMappingRelationRule()); } 
	 iv_ruleMappingRelation=ruleMappingRelation 
	 { $current=$iv_ruleMappingRelation.current.getText(); }  
	 EOF 
;

// Rule MappingRelation
ruleMappingRelation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='->' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMappingRelationAccess().getHyphenMinusGreaterThanSignKeyword()); 
    }

    ;





// Entry rule entryRuleTypeRelation
entryRuleTypeRelation returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRelationRule()); } 
	 iv_ruleTypeRelation=ruleTypeRelation 
	 { $current=$iv_ruleTypeRelation.current.getText(); }  
	 EOF 
;

// Rule TypeRelation
ruleTypeRelation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeRelationAccess().getAssignOpParserRuleCall_0()); 
    }
    this_AssignOp_0=ruleAssignOp    {
		$current.merge(this_AssignOp_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeRelationAccess().getEqualsOpParserRuleCall_1()); 
    }
    this_EqualsOp_1=ruleEqualsOp    {
		$current.merge(this_EqualsOp_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeRelationAccess().getLessThanSignKeyword_2()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeRelationAccess().getGreaterThanSignKeyword_3()); 
    }

    |
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeRelationAccess().getExclamationMarkKeyword_4()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeRelationAccess().getHyphenMinusKeyword_5()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeRelationAccess().getColonParserRuleCall_6()); 
    }
    this_Colon_6=ruleColon    {
		$current.merge(this_Colon_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='~' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeRelationAccess().getTildeKeyword_7()); 
    }
)+
    ;





// Entry rule entryRuleTypeJudgmentSymbol
entryRuleTypeJudgmentSymbol returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeJudgmentSymbolRule()); } 
	 iv_ruleTypeJudgmentSymbol=ruleTypeJudgmentSymbol 
	 { $current=$iv_ruleTypeJudgmentSymbol.current.getText(); }  
	 EOF 
;

// Rule TypeJudgmentSymbol
ruleTypeJudgmentSymbol returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getTypeJudgmentSymbolAccess().getAlternativeParserRuleCall_0()); 
    }
    this_Alternative_0=ruleAlternative    {
		$current.merge(this_Alternative_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+
    { 
        newCompositeNode(grammarAccess.getTypeJudgmentSymbolAccess().getTypeRelationParserRuleCall_1()); 
    }
    this_TypeRelation_1=ruleTypeRelation    {
		$current.merge(this_TypeRelation_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleAssignOp
entryRuleAssignOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignOpRule()); } 
	 iv_ruleAssignOp=ruleAssignOp 
	 { $current=$iv_ruleAssignOp.current.getText(); }  
	 EOF 
;

// Rule AssignOp
ruleAssignOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw=':=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignOpAccess().getColonEqualsSignKeyword()); 
    }

    ;





// Entry rule entryRuleEqualsOp
entryRuleEqualsOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualsOpRule()); } 
	 iv_ruleEqualsOp=ruleEqualsOp 
	 { $current=$iv_ruleEqualsOp.current.getText(); }  
	 EOF 
;

// Rule EqualsOp
ruleEqualsOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEqualsOpAccess().getEqualsSignKeyword()); 
    }

    ;





// Entry rule entryRulePlusOp
entryRulePlusOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlusOpRule()); } 
	 iv_rulePlusOp=rulePlusOp 
	 { $current=$iv_rulePlusOp.current.getText(); }  
	 EOF 
;

// Rule PlusOp
rulePlusOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPlusOpAccess().getPlusSignKeyword()); 
    }

    ;





// Entry rule entryRuleMinusOp
entryRuleMinusOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMinusOpRule()); } 
	 iv_ruleMinusOp=ruleMinusOp 
	 { $current=$iv_ruleMinusOp.current.getText(); }  
	 EOF 
;

// Rule MinusOp
ruleMinusOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMinusOpAccess().getHyphenMinusKeyword()); 
    }

    ;





// Entry rule entryRuleNotEqualsOp
entryRuleNotEqualsOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotEqualsOpRule()); } 
	 iv_ruleNotEqualsOp=ruleNotEqualsOp 
	 { $current=$iv_ruleNotEqualsOp.current.getText(); }  
	 EOF 
;

// Rule NotEqualsOp
ruleNotEqualsOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNotEqualsOpAccess().getExclamationMarkEqualsSignKeyword()); 
    }

    ;





// Entry rule entryRuleComma
entryRuleComma returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommaRule()); } 
	 iv_ruleComma=ruleComma 
	 { $current=$iv_ruleComma.current.getText(); }  
	 EOF 
;

// Rule Comma
ruleComma returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommaAccess().getCommaKeyword()); 
    }

    ;





// Entry rule entryRuleListComposition
entryRuleListComposition returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getListCompositionRule()); } 
	 iv_ruleListComposition=ruleListComposition 
	 { $current=$iv_ruleListComposition.current.getText(); }  
	 EOF 
;

// Rule ListComposition
ruleListComposition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getListCompositionAccess().getColonParserRuleCall_0()); 
    }
    this_Colon_0=ruleColon    {
		$current.merge(this_Colon_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getListCompositionAccess().getColonParserRuleCall_1()); 
    }
    this_Colon_1=ruleColon    {
		$current.merge(this_Colon_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleColon
entryRuleColon returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getColonRule()); } 
	 iv_ruleColon=ruleColon 
	 { $current=$iv_ruleColon.current.getText(); }  
	 EOF 
;

// Rule Colon
ruleColon returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColonAccess().getColonKeyword()); 
    }

    ;





// Entry rule entryRuleEnvironmentComposition
entryRuleEnvironmentComposition returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnvironmentCompositionRule()); } 
	 iv_ruleEnvironmentComposition=ruleEnvironmentComposition 
	 { $current=$iv_ruleEnvironmentComposition.current.getText(); }  
	 EOF 
;

// Rule EnvironmentComposition
ruleEnvironmentComposition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEnvironmentCompositionAccess().getCommaParserRuleCall_0()); 
    }
    this_Comma_0=ruleComma    {
		$current.merge(this_Comma_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEnvironmentCompositionAccess().getListCompositionParserRuleCall_1()); 
    }
    this_ListComposition_1=ruleListComposition    {
		$current.merge(this_ListComposition_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


