/*
* generated by Xtext
*/

package it.xtypes.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class TypeSystemGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TypeSystemDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeSystemDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cTypesystemKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cGrammarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEPackageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEPackageEPackageCrossReference_2_0 = (CrossReference)cEPackageAssignment_2.eContents().get(0);
		private final RuleCall cEPackageEPackageSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cEPackageEPackageCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cGenmodelKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGenModelAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGenModelSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cGenModelAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cJudgmentsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cJudgmentDescriptionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cJudgmentDescriptionsJudgmentDescriptionParserRuleCall_4_1_0 = (RuleCall)cJudgmentDescriptionsAssignment_4_1.eContents().get(0);
		private final Keyword cEndKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cRulesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRulesRuleParserRuleCall_5_0 = (RuleCall)cRulesAssignment_5.eContents().get(0);
		
		//TypeSystemDefinition:
		//	("typesystem" name=ID)? "grammar" ePackage=[ecore::EPackage|STRING] ("genmodel" genModel=STRING)? ("judgments"
		//	judgmentDescriptions+=JudgmentDescription+ "end")? rules+=Rule*;
		public ParserRule getRule() { return rule; }

		//("typesystem" name=ID)? "grammar" ePackage=[ecore::EPackage|STRING] ("genmodel" genModel=STRING)? ("judgments"
		//judgmentDescriptions+=JudgmentDescription+ "end")? rules+=Rule*
		public Group getGroup() { return cGroup; }

		//("typesystem" name=ID)?
		public Group getGroup_0() { return cGroup_0; }

		//"typesystem"
		public Keyword getTypesystemKeyword_0_0() { return cTypesystemKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//"grammar"
		public Keyword getGrammarKeyword_1() { return cGrammarKeyword_1; }

		//ePackage=[ecore::EPackage|STRING]
		public Assignment getEPackageAssignment_2() { return cEPackageAssignment_2; }

		//[ecore::EPackage|STRING]
		public CrossReference getEPackageEPackageCrossReference_2_0() { return cEPackageEPackageCrossReference_2_0; }

		//STRING
		public RuleCall getEPackageEPackageSTRINGTerminalRuleCall_2_0_1() { return cEPackageEPackageSTRINGTerminalRuleCall_2_0_1; }

		//("genmodel" genModel=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//"genmodel"
		public Keyword getGenmodelKeyword_3_0() { return cGenmodelKeyword_3_0; }

		//genModel=STRING
		public Assignment getGenModelAssignment_3_1() { return cGenModelAssignment_3_1; }

		//STRING
		public RuleCall getGenModelSTRINGTerminalRuleCall_3_1_0() { return cGenModelSTRINGTerminalRuleCall_3_1_0; }

		//("judgments" judgmentDescriptions+=JudgmentDescription+ "end")?
		public Group getGroup_4() { return cGroup_4; }

		//"judgments"
		public Keyword getJudgmentsKeyword_4_0() { return cJudgmentsKeyword_4_0; }

		//judgmentDescriptions+=JudgmentDescription+
		public Assignment getJudgmentDescriptionsAssignment_4_1() { return cJudgmentDescriptionsAssignment_4_1; }

		//JudgmentDescription
		public RuleCall getJudgmentDescriptionsJudgmentDescriptionParserRuleCall_4_1_0() { return cJudgmentDescriptionsJudgmentDescriptionParserRuleCall_4_1_0; }

		//"end"
		public Keyword getEndKeyword_4_2() { return cEndKeyword_4_2; }

		//rules+=Rule*
		public Assignment getRulesAssignment_5() { return cRulesAssignment_5; }

		//Rule
		public RuleCall getRulesRuleParserRuleCall_5_0() { return cRulesRuleParserRuleCall_5_0; }
	}

	public class JudgmentDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JudgmentDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cJudgmentsymbolAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cJudgmentsymbolSTRINGTerminalRuleCall_0_0 = (RuleCall)cJudgmentsymbolAssignment_0.eContents().get(0);
		private final Assignment cRelationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRelationSTRINGTerminalRuleCall_1_0 = (RuleCall)cRelationAssignment_1.eContents().get(0);
		private final Keyword cKindKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cEqualsOpParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cKindAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cKindSTRINGTerminalRuleCall_4_0 = (RuleCall)cKindAssignment_4.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_5 = (UnorderedGroup)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cUnorderedGroup_5.eContents().get(0);
		private final Keyword cSuccessKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final RuleCall cEqualsOpParserRuleCall_5_0_1 = (RuleCall)cGroup_5_0.eContents().get(1);
		private final Assignment cSuccessAssignment_5_0_2 = (Assignment)cGroup_5_0.eContents().get(2);
		private final RuleCall cSuccessSTRINGTerminalRuleCall_5_0_2_0 = (RuleCall)cSuccessAssignment_5_0_2.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cUnorderedGroup_5.eContents().get(1);
		private final Keyword cFailKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final RuleCall cEqualsOpParserRuleCall_5_1_1 = (RuleCall)cGroup_5_1.eContents().get(1);
		private final Assignment cFailAssignment_5_1_2 = (Assignment)cGroup_5_1.eContents().get(2);
		private final RuleCall cFailSTRINGTerminalRuleCall_5_1_2_0 = (RuleCall)cFailAssignment_5_1_2.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cUnorderedGroup_5.eContents().get(2);
		private final Keyword cNomatchKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final RuleCall cEqualsOpParserRuleCall_5_2_1 = (RuleCall)cGroup_5_2.eContents().get(1);
		private final Assignment cNomatchAssignment_5_2_2 = (Assignment)cGroup_5_2.eContents().get(2);
		private final RuleCall cNomatchSTRINGTerminalRuleCall_5_2_2_0 = (RuleCall)cNomatchAssignment_5_2_2.eContents().get(0);
		private final Assignment cBinaryAssignment_5_3 = (Assignment)cUnorderedGroup_5.eContents().get(3);
		private final Keyword cBinaryBinaryKeyword_5_3_0 = (Keyword)cBinaryAssignment_5_3.eContents().get(0);
		
		//JudgmentDescription:
		//	judgmentsymbol=STRING relation=STRING "kind" EqualsOp kind=STRING (("success" EqualsOp success=STRING)? & ("fail"
		//	EqualsOp fail=STRING)? & ("nomatch" EqualsOp nomatch=STRING)? & binary?="binary"?);
		public ParserRule getRule() { return rule; }

		//judgmentsymbol=STRING relation=STRING "kind" EqualsOp kind=STRING (("success" EqualsOp success=STRING)? & ("fail"
		//EqualsOp fail=STRING)? & ("nomatch" EqualsOp nomatch=STRING)? & binary?="binary"?)
		public Group getGroup() { return cGroup; }

		//judgmentsymbol=STRING
		public Assignment getJudgmentsymbolAssignment_0() { return cJudgmentsymbolAssignment_0; }

		//STRING
		public RuleCall getJudgmentsymbolSTRINGTerminalRuleCall_0_0() { return cJudgmentsymbolSTRINGTerminalRuleCall_0_0; }

		//relation=STRING
		public Assignment getRelationAssignment_1() { return cRelationAssignment_1; }

		//STRING
		public RuleCall getRelationSTRINGTerminalRuleCall_1_0() { return cRelationSTRINGTerminalRuleCall_1_0; }

		//"kind"
		public Keyword getKindKeyword_2() { return cKindKeyword_2; }

		//EqualsOp
		public RuleCall getEqualsOpParserRuleCall_3() { return cEqualsOpParserRuleCall_3; }

		//kind=STRING
		public Assignment getKindAssignment_4() { return cKindAssignment_4; }

		//STRING
		public RuleCall getKindSTRINGTerminalRuleCall_4_0() { return cKindSTRINGTerminalRuleCall_4_0; }

		//("success" EqualsOp success=STRING)? & ("fail" EqualsOp fail=STRING)? & ("nomatch" EqualsOp nomatch=STRING)? &
		//binary?="binary"?
		public UnorderedGroup getUnorderedGroup_5() { return cUnorderedGroup_5; }

		//("success" EqualsOp success=STRING)?
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"success"
		public Keyword getSuccessKeyword_5_0_0() { return cSuccessKeyword_5_0_0; }

		//EqualsOp
		public RuleCall getEqualsOpParserRuleCall_5_0_1() { return cEqualsOpParserRuleCall_5_0_1; }

		//success=STRING
		public Assignment getSuccessAssignment_5_0_2() { return cSuccessAssignment_5_0_2; }

		//STRING
		public RuleCall getSuccessSTRINGTerminalRuleCall_5_0_2_0() { return cSuccessSTRINGTerminalRuleCall_5_0_2_0; }

		//("fail" EqualsOp fail=STRING)?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"fail"
		public Keyword getFailKeyword_5_1_0() { return cFailKeyword_5_1_0; }

		//EqualsOp
		public RuleCall getEqualsOpParserRuleCall_5_1_1() { return cEqualsOpParserRuleCall_5_1_1; }

		//fail=STRING
		public Assignment getFailAssignment_5_1_2() { return cFailAssignment_5_1_2; }

		//STRING
		public RuleCall getFailSTRINGTerminalRuleCall_5_1_2_0() { return cFailSTRINGTerminalRuleCall_5_1_2_0; }

		//("nomatch" EqualsOp nomatch=STRING)?
		public Group getGroup_5_2() { return cGroup_5_2; }

		//"nomatch"
		public Keyword getNomatchKeyword_5_2_0() { return cNomatchKeyword_5_2_0; }

		//EqualsOp
		public RuleCall getEqualsOpParserRuleCall_5_2_1() { return cEqualsOpParserRuleCall_5_2_1; }

		//nomatch=STRING
		public Assignment getNomatchAssignment_5_2_2() { return cNomatchAssignment_5_2_2; }

		//STRING
		public RuleCall getNomatchSTRINGTerminalRuleCall_5_2_2_0() { return cNomatchSTRINGTerminalRuleCall_5_2_2_0; }

		//binary?="binary"?
		public Assignment getBinaryAssignment_5_3() { return cBinaryAssignment_5_3; }

		//"binary"
		public Keyword getBinaryBinaryKeyword_5_3_0() { return cBinaryBinaryKeyword_5_3_0; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAxiomParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRuleWithPremisesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Rule:
		//	Axiom | RuleWithPremises;
		public ParserRule getRule() { return rule; }

		//Axiom | RuleWithPremises
		public Alternatives getAlternatives() { return cAlternatives; }

		//Axiom
		public RuleCall getAxiomParserRuleCall_0() { return cAxiomParserRuleCall_0; }

		//RuleWithPremises
		public RuleCall getRuleWithPremisesParserRuleCall_1() { return cRuleWithPremisesParserRuleCall_1; }
	}

	public class AxiomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Axiom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAxiomKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypejudgmentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypejudgmentTypingJudgmentWithEnvironmentParserRuleCall_2_0 = (RuleCall)cTypejudgmentAssignment_2.eContents().get(0);
		
		//Axiom:
		//	"axiom" name=ID typejudgment=TypingJudgmentWithEnvironment;
		public ParserRule getRule() { return rule; }

		//"axiom" name=ID typejudgment=TypingJudgmentWithEnvironment
		public Group getGroup() { return cGroup; }

		//"axiom"
		public Keyword getAxiomKeyword_0() { return cAxiomKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//typejudgment=TypingJudgmentWithEnvironment
		public Assignment getTypejudgmentAssignment_2() { return cTypejudgmentAssignment_2; }

		//TypingJudgmentWithEnvironment
		public RuleCall getTypejudgmentTypingJudgmentWithEnvironmentParserRuleCall_2_0() { return cTypejudgmentTypingJudgmentWithEnvironmentParserRuleCall_2_0; }
	}

	public class RuleWithPremisesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleWithPremises");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cDerivesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypejudgmentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypejudgmentTypingJudgmentWithEnvironmentParserRuleCall_3_0 = (RuleCall)cTypejudgmentAssignment_3.eContents().get(0);
		private final Keyword cFromKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPremisesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPremisesTypingJudgmentParserRuleCall_5_0 = (RuleCall)cPremisesAssignment_5.eContents().get(0);
		
		//RuleWithPremises:
		//	"rule" name=ID "derives" typejudgment=TypingJudgmentWithEnvironment "from" premises+=TypingJudgment+;
		public ParserRule getRule() { return rule; }

		//"rule" name=ID "derives" typejudgment=TypingJudgmentWithEnvironment "from" premises+=TypingJudgment+
		public Group getGroup() { return cGroup; }

		//"rule"
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"derives"
		public Keyword getDerivesKeyword_2() { return cDerivesKeyword_2; }

		//typejudgment=TypingJudgmentWithEnvironment
		public Assignment getTypejudgmentAssignment_3() { return cTypejudgmentAssignment_3; }

		//TypingJudgmentWithEnvironment
		public RuleCall getTypejudgmentTypingJudgmentWithEnvironmentParserRuleCall_3_0() { return cTypejudgmentTypingJudgmentWithEnvironmentParserRuleCall_3_0; }

		//"from"
		public Keyword getFromKeyword_4() { return cFromKeyword_4; }

		//premises+=TypingJudgment+
		public Assignment getPremisesAssignment_5() { return cPremisesAssignment_5; }

		//TypingJudgment
		public RuleCall getPremisesTypingJudgmentParserRuleCall_5_0() { return cPremisesTypingJudgmentParserRuleCall_5_0; }
	}

	public class TypingJudgmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypingJudgment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQuantificationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDeclarationWithTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOrTypingJudgmentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStandardOperationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTypingJudgmentWithEnvironmentParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//TypingJudgment:
		//	Quantification | VariableDeclarationWithType | OrTypingJudgment | StandardOperation | TypingJudgmentWithEnvironment;
		public ParserRule getRule() { return rule; }

		//Quantification | VariableDeclarationWithType | OrTypingJudgment | StandardOperation | TypingJudgmentWithEnvironment
		public Alternatives getAlternatives() { return cAlternatives; }

		//Quantification
		public RuleCall getQuantificationParserRuleCall_0() { return cQuantificationParserRuleCall_0; }

		//VariableDeclarationWithType
		public RuleCall getVariableDeclarationWithTypeParserRuleCall_1() { return cVariableDeclarationWithTypeParserRuleCall_1; }

		//OrTypingJudgment
		public RuleCall getOrTypingJudgmentParserRuleCall_2() { return cOrTypingJudgmentParserRuleCall_2; }

		//StandardOperation
		public RuleCall getStandardOperationParserRuleCall_3() { return cStandardOperationParserRuleCall_3; }

		//TypingJudgmentWithEnvironment
		public RuleCall getTypingJudgmentWithEnvironmentParserRuleCall_4() { return cTypingJudgmentWithEnvironmentParserRuleCall_4; }
	}

	public class OrTypingJudgmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrTypingJudgment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBranchesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBranchesOrBranchParserRuleCall_1_0 = (RuleCall)cBranchesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cOrSeparatorParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cBranchesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cBranchesOrBranchParserRuleCall_2_1_0 = (RuleCall)cBranchesAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cErrorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cErrorErrorSpecificationParserRuleCall_4_0 = (RuleCall)cErrorAssignment_4.eContents().get(0);
		
		//OrTypingJudgment:
		//	"(" branches+=OrBranch (OrSeparator branches+=OrBranch)+ ")" error=ErrorSpecification?;
		public ParserRule getRule() { return rule; }

		//"(" branches+=OrBranch (OrSeparator branches+=OrBranch)+ ")" error=ErrorSpecification?
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//branches+=OrBranch
		public Assignment getBranchesAssignment_1() { return cBranchesAssignment_1; }

		//OrBranch
		public RuleCall getBranchesOrBranchParserRuleCall_1_0() { return cBranchesOrBranchParserRuleCall_1_0; }

		//(OrSeparator branches+=OrBranch)+
		public Group getGroup_2() { return cGroup_2; }

		//OrSeparator
		public RuleCall getOrSeparatorParserRuleCall_2_0() { return cOrSeparatorParserRuleCall_2_0; }

		//branches+=OrBranch
		public Assignment getBranchesAssignment_2_1() { return cBranchesAssignment_2_1; }

		//OrBranch
		public RuleCall getBranchesOrBranchParserRuleCall_2_1_0() { return cBranchesOrBranchParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//error=ErrorSpecification?
		public Assignment getErrorAssignment_4() { return cErrorAssignment_4; }

		//ErrorSpecification
		public RuleCall getErrorErrorSpecificationParserRuleCall_4_0() { return cErrorErrorSpecificationParserRuleCall_4_0; }
	}

	public class OrBranchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrBranch");
		private final Assignment cJudgmentsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cJudgmentsTypingJudgmentParserRuleCall_0 = (RuleCall)cJudgmentsAssignment.eContents().get(0);
		
		//OrBranch:
		//	judgments+=TypingJudgment+;
		public ParserRule getRule() { return rule; }

		//judgments+=TypingJudgment+
		public Assignment getJudgmentsAssignment() { return cJudgmentsAssignment; }

		//TypingJudgment
		public RuleCall getJudgmentsTypingJudgmentParserRuleCall_0() { return cJudgmentsTypingJudgmentParserRuleCall_0; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableSimpleDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDeclarationWithTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VariableDeclaration:
		//	VariableSimpleDeclaration | VariableDeclarationWithType;
		public ParserRule getRule() { return rule; }

		//VariableSimpleDeclaration | VariableDeclarationWithType
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableSimpleDeclaration
		public RuleCall getVariableSimpleDeclarationParserRuleCall_0() { return cVariableSimpleDeclarationParserRuleCall_0; }

		//VariableDeclarationWithType
		public RuleCall getVariableDeclarationWithTypeParserRuleCall_1() { return cVariableDeclarationWithTypeParserRuleCall_1; }
	}

	public class VariableDeclarationWithTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclarationWithType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionTypeExpressionTypeParserRuleCall_1_0 = (RuleCall)cExpressionTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cOpAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cOpAssignOpParserRuleCall_3_0_0 = (RuleCall)cOpAssignment_3_0.eContents().get(0);
		private final Assignment cRightAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRightExpressionParserRuleCall_3_1_0 = (RuleCall)cRightAssignment_3_1.eContents().get(0);
		
		//VariableDeclarationWithType:
		//	"var" expressionType=ExpressionType name=ID (op=AssignOp right=Expression)?;
		public ParserRule getRule() { return rule; }

		//"var" expressionType=ExpressionType name=ID (op=AssignOp right=Expression)?
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//expressionType=ExpressionType
		public Assignment getExpressionTypeAssignment_1() { return cExpressionTypeAssignment_1; }

		//ExpressionType
		public RuleCall getExpressionTypeExpressionTypeParserRuleCall_1_0() { return cExpressionTypeExpressionTypeParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//(op=AssignOp right=Expression)?
		public Group getGroup_3() { return cGroup_3; }

		//op=AssignOp
		public Assignment getOpAssignment_3_0() { return cOpAssignment_3_0; }

		//AssignOp
		public RuleCall getOpAssignOpParserRuleCall_3_0_0() { return cOpAssignOpParserRuleCall_3_0_0; }

		//right=Expression
		public Assignment getRightAssignment_3_1() { return cRightAssignment_3_1; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_1_0() { return cRightExpressionParserRuleCall_3_1_0; }
	}

	public class ExpressionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCollectionTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEClassifierTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBasicTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ExpressionType:
		//	CollectionType | EClassifierType | BasicType;
		public ParserRule getRule() { return rule; }

		//CollectionType | EClassifierType | BasicType
		public Alternatives getAlternatives() { return cAlternatives; }

		//CollectionType
		public RuleCall getCollectionTypeParserRuleCall_0() { return cCollectionTypeParserRuleCall_0; }

		//EClassifierType
		public RuleCall getEClassifierTypeParserRuleCall_1() { return cEClassifierTypeParserRuleCall_1; }

		//BasicType
		public RuleCall getBasicTypeParserRuleCall_2() { return cBasicTypeParserRuleCall_2; }
	}

	public class CollectionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CollectionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCollectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCollectionListKeyword_0_0 = (Keyword)cCollectionAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeExpressionTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CollectionType:
		//	collection="List" "[" type=ExpressionType "]";
		public ParserRule getRule() { return rule; }

		//collection="List" "[" type=ExpressionType "]"
		public Group getGroup() { return cGroup; }

		//collection="List"
		public Assignment getCollectionAssignment_0() { return cCollectionAssignment_0; }

		//"List"
		public Keyword getCollectionListKeyword_0_0() { return cCollectionListKeyword_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//type=ExpressionType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//ExpressionType
		public RuleCall getTypeExpressionTypeParserRuleCall_2_0() { return cTypeExpressionTypeParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class EClassifierTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EClassifierType");
		private final Assignment cEclassifierAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cEclassifierEClassifierCrossReference_0 = (CrossReference)cEclassifierAssignment.eContents().get(0);
		private final RuleCall cEclassifierEClassifierIDTerminalRuleCall_0_1 = (RuleCall)cEclassifierEClassifierCrossReference_0.eContents().get(1);
		
		//EClassifierType:
		//	eclassifier=[ecore::EClassifier];
		public ParserRule getRule() { return rule; }

		//eclassifier=[ecore::EClassifier]
		public Assignment getEclassifierAssignment() { return cEclassifierAssignment; }

		//[ecore::EClassifier]
		public CrossReference getEclassifierEClassifierCrossReference_0() { return cEclassifierEClassifierCrossReference_0; }

		//ID
		public RuleCall getEclassifierEClassifierIDTerminalRuleCall_0_1() { return cEclassifierEClassifierIDTerminalRuleCall_0_1; }
	}

	public class BasicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicType");
		private final Assignment cBasicAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cBasicAlternatives_0 = (Alternatives)cBasicAssignment.eContents().get(0);
		private final Keyword cBasicStringKeyword_0_0 = (Keyword)cBasicAlternatives_0.eContents().get(0);
		private final Keyword cBasicIntegerKeyword_0_1 = (Keyword)cBasicAlternatives_0.eContents().get(1);
		private final Keyword cBasicObjectKeyword_0_2 = (Keyword)cBasicAlternatives_0.eContents().get(2);
		
		//BasicType:
		//	basic=("String" | "Integer" | "Object");
		public ParserRule getRule() { return rule; }

		//basic=("String" | "Integer" | "Object")
		public Assignment getBasicAssignment() { return cBasicAssignment; }

		//"String" | "Integer" | "Object"
		public Alternatives getBasicAlternatives_0() { return cBasicAlternatives_0; }

		//"String"
		public Keyword getBasicStringKeyword_0_0() { return cBasicStringKeyword_0_0; }

		//"Integer"
		public Keyword getBasicIntegerKeyword_0_1() { return cBasicIntegerKeyword_0_1; }

		//"Object"
		public Keyword getBasicObjectKeyword_0_2() { return cBasicObjectKeyword_0_2; }
	}

	public class VariableSimpleDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableSimpleDeclaration");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//VariableSimpleDeclaration:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class QuantificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Quantification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cForEachParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cForAllParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cExistsParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Assignment cErrorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cErrorErrorSpecificationParserRuleCall_1_0 = (RuleCall)cErrorAssignment_1.eContents().get(0);
		
		//Quantification:
		//	(ForEach | ForAll | Exists) error=ErrorSpecification?;
		public ParserRule getRule() { return rule; }

		//(ForEach | ForAll | Exists) error=ErrorSpecification?
		public Group getGroup() { return cGroup; }

		//ForEach | ForAll | Exists
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//ForEach
		public RuleCall getForEachParserRuleCall_0_0() { return cForEachParserRuleCall_0_0; }

		//ForAll
		public RuleCall getForAllParserRuleCall_0_1() { return cForAllParserRuleCall_0_1; }

		//Exists
		public RuleCall getExistsParserRuleCall_0_2() { return cExistsParserRuleCall_0_2; }

		//error=ErrorSpecification?
		public Assignment getErrorAssignment_1() { return cErrorAssignment_1; }

		//ErrorSpecification
		public RuleCall getErrorErrorSpecificationParserRuleCall_1_0() { return cErrorErrorSpecificationParserRuleCall_1_0; }
	}

	public class ForEachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForEach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableVariableSimpleDeclarationParserRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cJudgmentsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cJudgmentsTypingJudgmentParserRuleCall_5_0 = (RuleCall)cJudgmentsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ForEach:
		//	"foreach" expression=Expression "as" variable=VariableSimpleDeclaration "{" judgments+=TypingJudgment+ "}";
		public ParserRule getRule() { return rule; }

		//"foreach" expression=Expression "as" variable=VariableSimpleDeclaration "{" judgments+=TypingJudgment+ "}"
		public Group getGroup() { return cGroup; }

		//"foreach"
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//variable=VariableSimpleDeclaration
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }

		//VariableSimpleDeclaration
		public RuleCall getVariableVariableSimpleDeclarationParserRuleCall_3_0() { return cVariableVariableSimpleDeclarationParserRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//judgments+=TypingJudgment+
		public Assignment getJudgmentsAssignment_5() { return cJudgmentsAssignment_5; }

		//TypingJudgment
		public RuleCall getJudgmentsTypingJudgmentParserRuleCall_5_0() { return cJudgmentsTypingJudgmentParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ForAllElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForAll");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableSimpleDeclarationParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cJudgmentsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cJudgmentsTypingJudgmentParserRuleCall_5_0 = (RuleCall)cJudgmentsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ForAll:
		//	"forall" variable=VariableSimpleDeclaration "in" expression=Expression "{" judgments+=TypingJudgment+ "}";
		public ParserRule getRule() { return rule; }

		//"forall" variable=VariableSimpleDeclaration "in" expression=Expression "{" judgments+=TypingJudgment+ "}"
		public Group getGroup() { return cGroup; }

		//"forall"
		public Keyword getForallKeyword_0() { return cForallKeyword_0; }

		//variable=VariableSimpleDeclaration
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//VariableSimpleDeclaration
		public RuleCall getVariableVariableSimpleDeclarationParserRuleCall_1_0() { return cVariableVariableSimpleDeclarationParserRuleCall_1_0; }

		//"in"
		public Keyword getInKeyword_2() { return cInKeyword_2; }

		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//judgments+=TypingJudgment+
		public Assignment getJudgmentsAssignment_5() { return cJudgmentsAssignment_5; }

		//TypingJudgment
		public RuleCall getJudgmentsTypingJudgmentParserRuleCall_5_0() { return cJudgmentsTypingJudgmentParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ExistsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exists");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNotExclamationMarkKeyword_0_0 = (Keyword)cNotAssignment_0.eContents().get(0);
		private final Keyword cExistsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableSimpleDeclarationParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cJudgmentsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cJudgmentsTypingJudgmentParserRuleCall_6_0 = (RuleCall)cJudgmentsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Exists:
		//	not?="!"? "exists" variable=VariableSimpleDeclaration "in" expression=Expression "{" judgments+=TypingJudgment+ "}";
		public ParserRule getRule() { return rule; }

		//not?="!"? "exists" variable=VariableSimpleDeclaration "in" expression=Expression "{" judgments+=TypingJudgment+ "}"
		public Group getGroup() { return cGroup; }

		//not?="!"?
		public Assignment getNotAssignment_0() { return cNotAssignment_0; }

		//"!"
		public Keyword getNotExclamationMarkKeyword_0_0() { return cNotExclamationMarkKeyword_0_0; }

		//"exists"
		public Keyword getExistsKeyword_1() { return cExistsKeyword_1; }

		//variable=VariableSimpleDeclaration
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//VariableSimpleDeclaration
		public RuleCall getVariableVariableSimpleDeclarationParserRuleCall_2_0() { return cVariableVariableSimpleDeclarationParserRuleCall_2_0; }

		//"in"
		public Keyword getInKeyword_3() { return cInKeyword_3; }

		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//judgments+=TypingJudgment+
		public Assignment getJudgmentsAssignment_6() { return cJudgmentsAssignment_6; }

		//TypingJudgment
		public RuleCall getJudgmentsTypingJudgmentParserRuleCall_6_0() { return cJudgmentsTypingJudgmentParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class StandardOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StandardOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnvironmentOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cListOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEqualsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFailParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSuccessParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//StandardOperation:
		//	EnvironmentOperation | ListOperation | Assignment | Equals | Fail | Success;
		public ParserRule getRule() { return rule; }

		//EnvironmentOperation | ListOperation | Assignment | Equals | Fail | Success
		public Alternatives getAlternatives() { return cAlternatives; }

		//EnvironmentOperation
		public RuleCall getEnvironmentOperationParserRuleCall_0() { return cEnvironmentOperationParserRuleCall_0; }

		//ListOperation
		public RuleCall getListOperationParserRuleCall_1() { return cListOperationParserRuleCall_1; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall_2() { return cAssignmentParserRuleCall_2; }

		//Equals
		public RuleCall getEqualsParserRuleCall_3() { return cEqualsParserRuleCall_3; }

		//Fail
		public RuleCall getFailParserRuleCall_4() { return cFailParserRuleCall_4; }

		//Success
		public RuleCall getSuccessParserRuleCall_5() { return cSuccessParserRuleCall_5; }
	}

	public class EnvironmentOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnvironmentOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cEnvironmentAssignmentAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cLeftAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLeftEnvironmentIdParserRuleCall_0_1_0 = (RuleCall)cLeftAssignment_0_1.eContents().get(0);
		private final RuleCall cAssignOpParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Assignment cRightAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cRightEnvironmentParserRuleCall_0_3_0 = (RuleCall)cRightAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cEnvironmentIncrementAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cLeftAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLeftEnvironmentIdParserRuleCall_1_1_0 = (RuleCall)cLeftAssignment_1_1.eContents().get(0);
		private final RuleCall cPlusOpParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cEqualsOpParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Assignment cRightAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightEnvironmentStatementParserRuleCall_1_4_0 = (RuleCall)cRightAssignment_1_4.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cEnvironmentDecrementAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cLeftAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLeftEnvironmentIdParserRuleCall_2_1_0 = (RuleCall)cLeftAssignment_2_1.eContents().get(0);
		private final RuleCall cMinusOpParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final RuleCall cEqualsOpParserRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final Assignment cRightAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cRightTypingStatementExpressionParserRuleCall_2_4_0 = (RuleCall)cRightAssignment_2_4.eContents().get(0);
		
		//EnvironmentOperation:
		//	{EnvironmentAssignment} left=EnvironmentId AssignOp right=Environment | {EnvironmentIncrement} left=EnvironmentId
		//	PlusOp EqualsOp right=EnvironmentStatement | {EnvironmentDecrement} left=EnvironmentId MinusOp EqualsOp
		//	right=TypingStatementExpression;
		public ParserRule getRule() { return rule; }

		//{EnvironmentAssignment} left=EnvironmentId AssignOp right=Environment | {EnvironmentIncrement} left=EnvironmentId PlusOp
		//EqualsOp right=EnvironmentStatement | {EnvironmentDecrement} left=EnvironmentId MinusOp EqualsOp
		//right=TypingStatementExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{EnvironmentAssignment} left=EnvironmentId AssignOp right=Environment
		public Group getGroup_0() { return cGroup_0; }

		//{EnvironmentAssignment}
		public Action getEnvironmentAssignmentAction_0_0() { return cEnvironmentAssignmentAction_0_0; }

		//left=EnvironmentId
		public Assignment getLeftAssignment_0_1() { return cLeftAssignment_0_1; }

		//EnvironmentId
		public RuleCall getLeftEnvironmentIdParserRuleCall_0_1_0() { return cLeftEnvironmentIdParserRuleCall_0_1_0; }

		//AssignOp
		public RuleCall getAssignOpParserRuleCall_0_2() { return cAssignOpParserRuleCall_0_2; }

		//right=Environment
		public Assignment getRightAssignment_0_3() { return cRightAssignment_0_3; }

		//Environment
		public RuleCall getRightEnvironmentParserRuleCall_0_3_0() { return cRightEnvironmentParserRuleCall_0_3_0; }

		//{EnvironmentIncrement} left=EnvironmentId PlusOp EqualsOp right=EnvironmentStatement
		public Group getGroup_1() { return cGroup_1; }

		//{EnvironmentIncrement}
		public Action getEnvironmentIncrementAction_1_0() { return cEnvironmentIncrementAction_1_0; }

		//left=EnvironmentId
		public Assignment getLeftAssignment_1_1() { return cLeftAssignment_1_1; }

		//EnvironmentId
		public RuleCall getLeftEnvironmentIdParserRuleCall_1_1_0() { return cLeftEnvironmentIdParserRuleCall_1_1_0; }

		//PlusOp
		public RuleCall getPlusOpParserRuleCall_1_2() { return cPlusOpParserRuleCall_1_2; }

		//EqualsOp
		public RuleCall getEqualsOpParserRuleCall_1_3() { return cEqualsOpParserRuleCall_1_3; }

		//right=EnvironmentStatement
		public Assignment getRightAssignment_1_4() { return cRightAssignment_1_4; }

		//EnvironmentStatement
		public RuleCall getRightEnvironmentStatementParserRuleCall_1_4_0() { return cRightEnvironmentStatementParserRuleCall_1_4_0; }

		//{EnvironmentDecrement} left=EnvironmentId MinusOp EqualsOp right=TypingStatementExpression
		public Group getGroup_2() { return cGroup_2; }

		//{EnvironmentDecrement}
		public Action getEnvironmentDecrementAction_2_0() { return cEnvironmentDecrementAction_2_0; }

		//left=EnvironmentId
		public Assignment getLeftAssignment_2_1() { return cLeftAssignment_2_1; }

		//EnvironmentId
		public RuleCall getLeftEnvironmentIdParserRuleCall_2_1_0() { return cLeftEnvironmentIdParserRuleCall_2_1_0; }

		//MinusOp
		public RuleCall getMinusOpParserRuleCall_2_2() { return cMinusOpParserRuleCall_2_2; }

		//EqualsOp
		public RuleCall getEqualsOpParserRuleCall_2_3() { return cEqualsOpParserRuleCall_2_3; }

		//right=TypingStatementExpression
		public Assignment getRightAssignment_2_4() { return cRightAssignment_2_4; }

		//TypingStatementExpression
		public RuleCall getRightTypingStatementExpressionParserRuleCall_2_4_0() { return cRightTypingStatementExpressionParserRuleCall_2_4_0; }
	}

	public class ListOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cListIncrementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cLeftAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_0_1_0 = (RuleCall)cLeftAssignment_0_1.eContents().get(0);
		private final RuleCall cPlusOpParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cEqualsOpParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Assignment cRightAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cRightExpressionParserRuleCall_0_4_0 = (RuleCall)cRightAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cListDecrementAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cLeftAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_1_0 = (RuleCall)cLeftAssignment_1_1.eContents().get(0);
		private final RuleCall cMinusOpParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cEqualsOpParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Assignment cRightAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightExpressionParserRuleCall_1_4_0 = (RuleCall)cRightAssignment_1_4.eContents().get(0);
		
		//ListOperation:
		//	{ListIncrement} left=Expression PlusOp EqualsOp right=Expression | {ListDecrement} left=Expression MinusOp EqualsOp
		//	right=Expression;
		public ParserRule getRule() { return rule; }

		//{ListIncrement} left=Expression PlusOp EqualsOp right=Expression | {ListDecrement} left=Expression MinusOp EqualsOp
		//right=Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ListIncrement} left=Expression PlusOp EqualsOp right=Expression
		public Group getGroup_0() { return cGroup_0; }

		//{ListIncrement}
		public Action getListIncrementAction_0_0() { return cListIncrementAction_0_0; }

		//left=Expression
		public Assignment getLeftAssignment_0_1() { return cLeftAssignment_0_1; }

		//Expression
		public RuleCall getLeftExpressionParserRuleCall_0_1_0() { return cLeftExpressionParserRuleCall_0_1_0; }

		//PlusOp
		public RuleCall getPlusOpParserRuleCall_0_2() { return cPlusOpParserRuleCall_0_2; }

		//EqualsOp
		public RuleCall getEqualsOpParserRuleCall_0_3() { return cEqualsOpParserRuleCall_0_3; }

		//right=Expression
		public Assignment getRightAssignment_0_4() { return cRightAssignment_0_4; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_0_4_0() { return cRightExpressionParserRuleCall_0_4_0; }

		//{ListDecrement} left=Expression MinusOp EqualsOp right=Expression
		public Group getGroup_1() { return cGroup_1; }

		//{ListDecrement}
		public Action getListDecrementAction_1_0() { return cListDecrementAction_1_0; }

		//left=Expression
		public Assignment getLeftAssignment_1_1() { return cLeftAssignment_1_1; }

		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_1_0() { return cLeftExpressionParserRuleCall_1_1_0; }

		//MinusOp
		public RuleCall getMinusOpParserRuleCall_1_2() { return cMinusOpParserRuleCall_1_2; }

		//EqualsOp
		public RuleCall getEqualsOpParserRuleCall_1_3() { return cEqualsOpParserRuleCall_1_3; }

		//right=Expression
		public Assignment getRightAssignment_1_4() { return cRightAssignment_1_4; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_1_4_0() { return cRightExpressionParserRuleCall_1_4_0; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final RuleCall cAssignOpParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Assignment:
		//	left=Expression AssignOp right=Expression;
		public ParserRule getRule() { return rule; }

		//left=Expression AssignOp right=Expression
		public Group getGroup() { return cGroup; }

		//left=Expression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//Expression
		public RuleCall getLeftExpressionParserRuleCall_0_0() { return cLeftExpressionParserRuleCall_0_0; }

		//AssignOp
		public RuleCall getAssignOpParserRuleCall_1() { return cAssignOpParserRuleCall_1; }

		//right=Expression
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_2_0() { return cRightExpressionParserRuleCall_2_0; }
	}

	public class EqualsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Equals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0 = (Alternatives)cOpAssignment_1.eContents().get(0);
		private final RuleCall cOpEqualsOpParserRuleCall_1_0_0 = (RuleCall)cOpAlternatives_1_0.eContents().get(0);
		private final RuleCall cOpNotEqualsOpParserRuleCall_1_0_1 = (RuleCall)cOpAlternatives_1_0.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		private final Assignment cErrorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cErrorErrorSpecificationParserRuleCall_3_0 = (RuleCall)cErrorAssignment_3.eContents().get(0);
		
		//Equals:
		//	left=Expression op=(EqualsOp | NotEqualsOp) right=Expression error=ErrorSpecification?;
		public ParserRule getRule() { return rule; }

		//left=Expression op=(EqualsOp | NotEqualsOp) right=Expression error=ErrorSpecification?
		public Group getGroup() { return cGroup; }

		//left=Expression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//Expression
		public RuleCall getLeftExpressionParserRuleCall_0_0() { return cLeftExpressionParserRuleCall_0_0; }

		//op=(EqualsOp | NotEqualsOp)
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }

		//EqualsOp | NotEqualsOp
		public Alternatives getOpAlternatives_1_0() { return cOpAlternatives_1_0; }

		//EqualsOp
		public RuleCall getOpEqualsOpParserRuleCall_1_0_0() { return cOpEqualsOpParserRuleCall_1_0_0; }

		//NotEqualsOp
		public RuleCall getOpNotEqualsOpParserRuleCall_1_0_1() { return cOpNotEqualsOpParserRuleCall_1_0_1; }

		//right=Expression
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_2_0() { return cRightExpressionParserRuleCall_2_0; }

		//error=ErrorSpecification?
		public Assignment getErrorAssignment_3() { return cErrorAssignment_3; }

		//ErrorSpecification
		public RuleCall getErrorErrorSpecificationParserRuleCall_3_0() { return cErrorErrorSpecificationParserRuleCall_3_0; }
	}

	public class FailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fail");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFailAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFailKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cErrorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cErrorErrorSpecificationParserRuleCall_2_0 = (RuleCall)cErrorAssignment_2.eContents().get(0);
		
		//Fail:
		//	{Fail} "fail" error=ErrorSpecification?;
		public ParserRule getRule() { return rule; }

		//{Fail} "fail" error=ErrorSpecification?
		public Group getGroup() { return cGroup; }

		//{Fail}
		public Action getFailAction_0() { return cFailAction_0; }

		//"fail"
		public Keyword getFailKeyword_1() { return cFailKeyword_1; }

		//error=ErrorSpecification?
		public Assignment getErrorAssignment_2() { return cErrorAssignment_2; }

		//ErrorSpecification
		public RuleCall getErrorErrorSpecificationParserRuleCall_2_0() { return cErrorErrorSpecificationParserRuleCall_2_0; }
	}

	public class SuccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Success");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSuccessAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSuccessKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Success:
		//	{Success} "success";
		public ParserRule getRule() { return rule; }

		//{Success} "success"
		public Group getGroup() { return cGroup; }

		//{Success}
		public Action getSuccessAction_0() { return cSuccessAction_0; }

		//"success"
		public Keyword getSuccessKeyword_1() { return cSuccessKeyword_1; }
	}

	public class TypingJudgmentWithEnvironmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypingJudgmentWithEnvironment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEnvironmentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEnvironmentEnvironmentParserRuleCall_0_0 = (RuleCall)cEnvironmentAssignment_0.eContents().get(0);
		private final Assignment cTypejudgmentsymbolAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypejudgmentsymbolTypeJudgmentSymbolParserRuleCall_1_0 = (RuleCall)cTypejudgmentsymbolAssignment_1.eContents().get(0);
		private final Assignment cTypingstatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypingstatementTypingStatementParserRuleCall_2_0 = (RuleCall)cTypingstatementAssignment_2.eContents().get(0);
		private final Assignment cErrorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cErrorErrorSpecificationParserRuleCall_3_0 = (RuleCall)cErrorAssignment_3.eContents().get(0);
		
		//TypingJudgmentWithEnvironment:
		//	environment=Environment typejudgmentsymbol=TypeJudgmentSymbol typingstatement=TypingStatement
		//	error=ErrorSpecification?;
		public ParserRule getRule() { return rule; }

		//environment=Environment typejudgmentsymbol=TypeJudgmentSymbol typingstatement=TypingStatement error=ErrorSpecification?
		public Group getGroup() { return cGroup; }

		//environment=Environment
		public Assignment getEnvironmentAssignment_0() { return cEnvironmentAssignment_0; }

		//Environment
		public RuleCall getEnvironmentEnvironmentParserRuleCall_0_0() { return cEnvironmentEnvironmentParserRuleCall_0_0; }

		//typejudgmentsymbol=TypeJudgmentSymbol
		public Assignment getTypejudgmentsymbolAssignment_1() { return cTypejudgmentsymbolAssignment_1; }

		//TypeJudgmentSymbol
		public RuleCall getTypejudgmentsymbolTypeJudgmentSymbolParserRuleCall_1_0() { return cTypejudgmentsymbolTypeJudgmentSymbolParserRuleCall_1_0; }

		//typingstatement=TypingStatement
		public Assignment getTypingstatementAssignment_2() { return cTypingstatementAssignment_2; }

		//TypingStatement
		public RuleCall getTypingstatementTypingStatementParserRuleCall_2_0() { return cTypingstatementTypingStatementParserRuleCall_2_0; }

		//error=ErrorSpecification?
		public Assignment getErrorAssignment_3() { return cErrorAssignment_3; }

		//ErrorSpecification
		public RuleCall getErrorErrorSpecificationParserRuleCall_3_0() { return cErrorErrorSpecificationParserRuleCall_3_0; }
	}

	public class ErrorSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ErrorSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cEqualsOpParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cFailureErrorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFailureErrorFailureErrorParserRuleCall_2_0 = (RuleCall)cFailureErrorAssignment_2.eContents().get(0);
		
		//ErrorSpecification:
		//	"error" EqualsOp failureError=FailureError;
		public ParserRule getRule() { return rule; }

		//"error" EqualsOp failureError=FailureError
		public Group getGroup() { return cGroup; }

		//"error"
		public Keyword getErrorKeyword_0() { return cErrorKeyword_0; }

		//EqualsOp
		public RuleCall getEqualsOpParserRuleCall_1() { return cEqualsOpParserRuleCall_1; }

		//failureError=FailureError
		public Assignment getFailureErrorAssignment_2() { return cFailureErrorAssignment_2; }

		//FailureError
		public RuleCall getFailureErrorFailureErrorParserRuleCall_2_0() { return cFailureErrorFailureErrorParserRuleCall_2_0; }
	}

	public class FailureErrorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FailureError");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalErrorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComposedErrorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpPlusOpParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightFailureErrorParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//FailureError:
		//	TerminalError ({ComposedError.left=current} op=PlusOp right=FailureError)*;
		public ParserRule getRule() { return rule; }

		//TerminalError ({ComposedError.left=current} op=PlusOp right=FailureError)*
		public Group getGroup() { return cGroup; }

		//TerminalError
		public RuleCall getTerminalErrorParserRuleCall_0() { return cTerminalErrorParserRuleCall_0; }

		//({ComposedError.left=current} op=PlusOp right=FailureError)*
		public Group getGroup_1() { return cGroup_1; }

		//{ComposedError.left=current}
		public Action getComposedErrorLeftAction_1_0() { return cComposedErrorLeftAction_1_0; }

		//op=PlusOp
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//PlusOp
		public RuleCall getOpPlusOpParserRuleCall_1_1_0() { return cOpPlusOpParserRuleCall_1_1_0; }

		//right=FailureError
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//FailureError
		public RuleCall getRightFailureErrorParserRuleCall_1_2_0() { return cRightFailureErrorParserRuleCall_1_2_0; }
	}

	public class TerminalErrorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalError");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cErrorStringAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cErrStringAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cErrStringSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cErrStringAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cErrorExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//TerminalError returns FailureError:
		//	{ErrorString} errString=STRING | {ErrorExpression} expression=Expression;
		public ParserRule getRule() { return rule; }

		//{ErrorString} errString=STRING | {ErrorExpression} expression=Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ErrorString} errString=STRING
		public Group getGroup_0() { return cGroup_0; }

		//{ErrorString}
		public Action getErrorStringAction_0_0() { return cErrorStringAction_0_0; }

		//errString=STRING
		public Assignment getErrStringAssignment_0_1() { return cErrStringAssignment_0_1; }

		//STRING
		public RuleCall getErrStringSTRINGTerminalRuleCall_0_1_0() { return cErrStringSTRINGTerminalRuleCall_0_1_0; }

		//{ErrorExpression} expression=Expression
		public Group getGroup_1() { return cGroup_1; }

		//{ErrorExpression}
		public Action getErrorExpressionAction_1_0() { return cErrorExpressionAction_1_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_0; }
	}

	public class TypingStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypingStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftTypingStatementExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cRelationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRelationTypeRelationParserRuleCall_1_0 = (RuleCall)cRelationAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightTypingStatementExpressionParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//TypingStatement:
		//	left=TypingStatementExpression relation=TypeRelation right=TypingStatementExpression;
		public ParserRule getRule() { return rule; }

		//left=TypingStatementExpression relation=TypeRelation right=TypingStatementExpression
		public Group getGroup() { return cGroup; }

		//left=TypingStatementExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//TypingStatementExpression
		public RuleCall getLeftTypingStatementExpressionParserRuleCall_0_0() { return cLeftTypingStatementExpressionParserRuleCall_0_0; }

		//relation=TypeRelation
		public Assignment getRelationAssignment_1() { return cRelationAssignment_1; }

		//TypeRelation
		public RuleCall getRelationTypeRelationParserRuleCall_1_0() { return cRelationTypeRelationParserRuleCall_1_0; }

		//right=TypingStatementExpression
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//TypingStatementExpression
		public RuleCall getRightTypingStatementExpressionParserRuleCall_2_0() { return cRightTypingStatementExpressionParserRuleCall_2_0; }
	}

	public class TypingStatementExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypingStatementExpression");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TypingStatementExpression:
		//	Expression;
		public ParserRule getRule() { return rule; }

		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}

	public class EnvironmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Environment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalEnvironmentParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEnvironmentCompositionCurrentEnvironmentAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpEnvironmentCompositionParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cSubEnvironmentAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubEnvironmentEnvironmentParserRuleCall_1_2_0 = (RuleCall)cSubEnvironmentAssignment_1_2.eContents().get(0);
		
		//Environment:
		//	TerminalEnvironment ({EnvironmentComposition.currentEnvironment=current} op=EnvironmentComposition
		//	subEnvironment=Environment)*;
		public ParserRule getRule() { return rule; }

		//TerminalEnvironment ({EnvironmentComposition.currentEnvironment=current} op=EnvironmentComposition
		//subEnvironment=Environment)*
		public Group getGroup() { return cGroup; }

		//TerminalEnvironment
		public RuleCall getTerminalEnvironmentParserRuleCall_0() { return cTerminalEnvironmentParserRuleCall_0; }

		//({EnvironmentComposition.currentEnvironment=current} op=EnvironmentComposition subEnvironment=Environment)*
		public Group getGroup_1() { return cGroup_1; }

		//{EnvironmentComposition.currentEnvironment=current}
		public Action getEnvironmentCompositionCurrentEnvironmentAction_1_0() { return cEnvironmentCompositionCurrentEnvironmentAction_1_0; }

		//op=EnvironmentComposition
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//EnvironmentComposition
		public RuleCall getOpEnvironmentCompositionParserRuleCall_1_1_0() { return cOpEnvironmentCompositionParserRuleCall_1_1_0; }

		//subEnvironment=Environment
		public Assignment getSubEnvironmentAssignment_1_2() { return cSubEnvironmentAssignment_1_2; }

		//Environment
		public RuleCall getSubEnvironmentEnvironmentParserRuleCall_1_2_0() { return cSubEnvironmentEnvironmentParserRuleCall_1_2_0; }
	}

	public class TerminalEnvironmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalEnvironment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnvironmentIdParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnvironmentStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEmptyEnvironmentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TerminalEnvironment returns Environment:
		//	EnvironmentId | EnvironmentStatement | EmptyEnvironment;
		public ParserRule getRule() { return rule; }

		//EnvironmentId | EnvironmentStatement | EmptyEnvironment
		public Alternatives getAlternatives() { return cAlternatives; }

		//EnvironmentId
		public RuleCall getEnvironmentIdParserRuleCall_0() { return cEnvironmentIdParserRuleCall_0; }

		//EnvironmentStatement
		public RuleCall getEnvironmentStatementParserRuleCall_1() { return cEnvironmentStatementParserRuleCall_1; }

		//EmptyEnvironment
		public RuleCall getEmptyEnvironmentParserRuleCall_2() { return cEmptyEnvironmentParserRuleCall_2; }
	}

	public class EnvironmentIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnvironmentId");
		private final Assignment cEnvironmentIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEnvironmentIdIDTerminalRuleCall_0 = (RuleCall)cEnvironmentIdAssignment.eContents().get(0);
		
		//EnvironmentId:
		//	environmentId=ID;
		public ParserRule getRule() { return rule; }

		//environmentId=ID
		public Assignment getEnvironmentIdAssignment() { return cEnvironmentIdAssignment; }

		//ID
		public RuleCall getEnvironmentIdIDTerminalRuleCall_0() { return cEnvironmentIdIDTerminalRuleCall_0; }
	}

	public class EnvironmentStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnvironmentStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftTypingStatementExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cRelationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRelationMappingRelationParserRuleCall_1_0 = (RuleCall)cRelationAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightTypingStatementExpressionParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//EnvironmentStatement:
		//	left=TypingStatementExpression relation=MappingRelation right=TypingStatementExpression;
		public ParserRule getRule() { return rule; }

		//left=TypingStatementExpression relation=MappingRelation right=TypingStatementExpression
		public Group getGroup() { return cGroup; }

		//left=TypingStatementExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//TypingStatementExpression
		public RuleCall getLeftTypingStatementExpressionParserRuleCall_0_0() { return cLeftTypingStatementExpressionParserRuleCall_0_0; }

		//relation=MappingRelation
		public Assignment getRelationAssignment_1() { return cRelationAssignment_1; }

		//MappingRelation
		public RuleCall getRelationMappingRelationParserRuleCall_1_0() { return cRelationMappingRelationParserRuleCall_1_0; }

		//right=TypingStatementExpression
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//TypingStatementExpression
		public RuleCall getRightTypingStatementExpressionParserRuleCall_2_0() { return cRightTypingStatementExpressionParserRuleCall_2_0; }
	}

	public class EmptyEnvironmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EmptyEnvironment");
		private final Assignment cEmptyAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cEmptyEmptyKeyword_0 = (Keyword)cEmptyAssignment.eContents().get(0);
		
		//EmptyEnvironment:
		//	empty="empty";
		public ParserRule getRule() { return rule; }

		//empty="empty"
		public Assignment getEmptyAssignment() { return cEmptyAssignment; }

		//"empty"
		public Keyword getEmptyEmptyKeyword_0() { return cEmptyEmptyKeyword_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDeclarationWithTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cEnvironmentAccessAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEnvKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cEnvIdAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cEnvIdEnvironmentIdParserRuleCall_1_3_0 = (RuleCall)cEnvIdAssignment_1_3.eContents().get(0);
		private final Keyword cCommaKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cArgumentAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cArgumentExpressionParserRuleCall_1_5_0 = (RuleCall)cArgumentAssignment_1_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cLengthAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cLenKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cArgumentAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cArgumentExpressionParserRuleCall_2_3_0 = (RuleCall)cArgumentAssignment_2_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cGetAllAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cGetallKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cExpressionAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_3_0 = (RuleCall)cExpressionAssignment_3_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cMainfeatureAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final CrossReference cMainfeatureEStructuralFeatureCrossReference_3_5_0 = (CrossReference)cMainfeatureAssignment_3_5.eContents().get(0);
		private final RuleCall cMainfeatureEStructuralFeatureIDTerminalRuleCall_3_5_0_1 = (RuleCall)cMainfeatureEStructuralFeatureCrossReference_3_5_0.eContents().get(1);
		private final Keyword cCommaKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		private final Assignment cExtendfeatureAssignment_3_7 = (Assignment)cGroup_3.eContents().get(7);
		private final CrossReference cExtendfeatureEStructuralFeatureCrossReference_3_7_0 = (CrossReference)cExtendfeatureAssignment_3_7.eContents().get(0);
		private final RuleCall cExtendfeatureEStructuralFeatureIDTerminalRuleCall_3_7_0_1 = (RuleCall)cExtendfeatureEStructuralFeatureCrossReference_3_7_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_8 = (Keyword)cGroup_3.eContents().get(8);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cContainerAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cContainerKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cArgumentAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cArgumentExpressionParserRuleCall_4_3_0 = (RuleCall)cArgumentAssignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cCastToAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cTypeAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cTypeExpressionTypeParserRuleCall_5_2_0 = (RuleCall)cTypeAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Assignment cExpressionAssignment_5_4 = (Assignment)cGroup_5.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_5_4_0 = (RuleCall)cExpressionAssignment_5_4.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cNullAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cNullKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cNewNameAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cNewnameKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cArgumentAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cArgumentSTRINGTerminalRuleCall_7_3_0 = (RuleCall)cArgumentAssignment_7_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cCloneAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cCloneKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cArgumentAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cArgumentExpressionParserRuleCall_8_3_0 = (RuleCall)cArgumentAssignment_8_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final RuleCall cTerminalExpressionParserRuleCall_9_0 = (RuleCall)cGroup_9.eContents().get(0);
		private final Group cGroup_9_1 = (Group)cGroup_9.eContents().get(1);
		private final Action cCompoundExpressionMainExpressionAction_9_1_0 = (Action)cGroup_9_1.eContents().get(0);
		private final Assignment cOpAssignment_9_1_1 = (Assignment)cGroup_9_1.eContents().get(1);
		private final Keyword cOpFullStopKeyword_9_1_1_0 = (Keyword)cOpAssignment_9_1_1.eContents().get(0);
		private final Assignment cSubExpressionAssignment_9_1_2 = (Assignment)cGroup_9_1.eContents().get(2);
		private final RuleCall cSubExpressionSubExpressionParserRuleCall_9_1_2_0 = (RuleCall)cSubExpressionAssignment_9_1_2.eContents().get(0);
		
		//Expression:
		//	VariableDeclarationWithType | {EnvironmentAccess} "env" "(" envId=EnvironmentId "," argument=Expression ")" | {Length}
		//	"len" "(" argument=Expression ")" | {GetAll} "getall" "(" expression=Expression ","
		//	mainfeature=[ecore::EStructuralFeature] "," extendfeature=[ecore::EStructuralFeature] ")" | {Container} "container"
		//	"(" argument=Expression ")" | {CastTo} "(" type=ExpressionType ")" expression=Expression | {Null} "null" | {NewName}
		//	"newname" "(" argument=STRING ")" | {Clone} "clone" "(" argument=Expression ")" | TerminalExpression
		//	({CompoundExpression.mainExpression=current} op="." subExpression=SubExpression)*;
		public ParserRule getRule() { return rule; }

		//VariableDeclarationWithType | {EnvironmentAccess} "env" "(" envId=EnvironmentId "," argument=Expression ")" | {Length}
		//"len" "(" argument=Expression ")" | {GetAll} "getall" "(" expression=Expression ","
		//mainfeature=[ecore::EStructuralFeature] "," extendfeature=[ecore::EStructuralFeature] ")" | {Container} "container" "("
		//argument=Expression ")" | {CastTo} "(" type=ExpressionType ")" expression=Expression | {Null} "null" | {NewName}
		//"newname" "(" argument=STRING ")" | {Clone} "clone" "(" argument=Expression ")" | TerminalExpression
		//({CompoundExpression.mainExpression=current} op="." subExpression=SubExpression)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableDeclarationWithType
		public RuleCall getVariableDeclarationWithTypeParserRuleCall_0() { return cVariableDeclarationWithTypeParserRuleCall_0; }

		//{EnvironmentAccess} "env" "(" envId=EnvironmentId "," argument=Expression ")"
		public Group getGroup_1() { return cGroup_1; }

		//{EnvironmentAccess}
		public Action getEnvironmentAccessAction_1_0() { return cEnvironmentAccessAction_1_0; }

		//"env"
		public Keyword getEnvKeyword_1_1() { return cEnvKeyword_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }

		//envId=EnvironmentId
		public Assignment getEnvIdAssignment_1_3() { return cEnvIdAssignment_1_3; }

		//EnvironmentId
		public RuleCall getEnvIdEnvironmentIdParserRuleCall_1_3_0() { return cEnvIdEnvironmentIdParserRuleCall_1_3_0; }

		//","
		public Keyword getCommaKeyword_1_4() { return cCommaKeyword_1_4; }

		//argument=Expression
		public Assignment getArgumentAssignment_1_5() { return cArgumentAssignment_1_5; }

		//Expression
		public RuleCall getArgumentExpressionParserRuleCall_1_5_0() { return cArgumentExpressionParserRuleCall_1_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_6() { return cRightParenthesisKeyword_1_6; }

		//{Length} "len" "(" argument=Expression ")"
		public Group getGroup_2() { return cGroup_2; }

		//{Length}
		public Action getLengthAction_2_0() { return cLengthAction_2_0; }

		//"len"
		public Keyword getLenKeyword_2_1() { return cLenKeyword_2_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }

		//argument=Expression
		public Assignment getArgumentAssignment_2_3() { return cArgumentAssignment_2_3; }

		//Expression
		public RuleCall getArgumentExpressionParserRuleCall_2_3_0() { return cArgumentExpressionParserRuleCall_2_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }

		//{GetAll} "getall" "(" expression=Expression "," mainfeature=[ecore::EStructuralFeature] ","
		//extendfeature=[ecore::EStructuralFeature] ")"
		public Group getGroup_3() { return cGroup_3; }

		//{GetAll}
		public Action getGetAllAction_3_0() { return cGetAllAction_3_0; }

		//"getall"
		public Keyword getGetallKeyword_3_1() { return cGetallKeyword_3_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }

		//expression=Expression
		public Assignment getExpressionAssignment_3_3() { return cExpressionAssignment_3_3; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_3_0() { return cExpressionExpressionParserRuleCall_3_3_0; }

		//","
		public Keyword getCommaKeyword_3_4() { return cCommaKeyword_3_4; }

		//mainfeature=[ecore::EStructuralFeature]
		public Assignment getMainfeatureAssignment_3_5() { return cMainfeatureAssignment_3_5; }

		//[ecore::EStructuralFeature]
		public CrossReference getMainfeatureEStructuralFeatureCrossReference_3_5_0() { return cMainfeatureEStructuralFeatureCrossReference_3_5_0; }

		//ID
		public RuleCall getMainfeatureEStructuralFeatureIDTerminalRuleCall_3_5_0_1() { return cMainfeatureEStructuralFeatureIDTerminalRuleCall_3_5_0_1; }

		//","
		public Keyword getCommaKeyword_3_6() { return cCommaKeyword_3_6; }

		//extendfeature=[ecore::EStructuralFeature]
		public Assignment getExtendfeatureAssignment_3_7() { return cExtendfeatureAssignment_3_7; }

		//[ecore::EStructuralFeature]
		public CrossReference getExtendfeatureEStructuralFeatureCrossReference_3_7_0() { return cExtendfeatureEStructuralFeatureCrossReference_3_7_0; }

		//ID
		public RuleCall getExtendfeatureEStructuralFeatureIDTerminalRuleCall_3_7_0_1() { return cExtendfeatureEStructuralFeatureIDTerminalRuleCall_3_7_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3_8() { return cRightParenthesisKeyword_3_8; }

		//{Container} "container" "(" argument=Expression ")"
		public Group getGroup_4() { return cGroup_4; }

		//{Container}
		public Action getContainerAction_4_0() { return cContainerAction_4_0; }

		//"container"
		public Keyword getContainerKeyword_4_1() { return cContainerKeyword_4_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }

		//argument=Expression
		public Assignment getArgumentAssignment_4_3() { return cArgumentAssignment_4_3; }

		//Expression
		public RuleCall getArgumentExpressionParserRuleCall_4_3_0() { return cArgumentExpressionParserRuleCall_4_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }

		//{CastTo} "(" type=ExpressionType ")" expression=Expression
		public Group getGroup_5() { return cGroup_5; }

		//{CastTo}
		public Action getCastToAction_5_0() { return cCastToAction_5_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }

		//type=ExpressionType
		public Assignment getTypeAssignment_5_2() { return cTypeAssignment_5_2; }

		//ExpressionType
		public RuleCall getTypeExpressionTypeParserRuleCall_5_2_0() { return cTypeExpressionTypeParserRuleCall_5_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }

		//expression=Expression
		public Assignment getExpressionAssignment_5_4() { return cExpressionAssignment_5_4; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_5_4_0() { return cExpressionExpressionParserRuleCall_5_4_0; }

		//{Null} "null"
		public Group getGroup_6() { return cGroup_6; }

		//{Null}
		public Action getNullAction_6_0() { return cNullAction_6_0; }

		//"null"
		public Keyword getNullKeyword_6_1() { return cNullKeyword_6_1; }

		//{NewName} "newname" "(" argument=STRING ")"
		public Group getGroup_7() { return cGroup_7; }

		//{NewName}
		public Action getNewNameAction_7_0() { return cNewNameAction_7_0; }

		//"newname"
		public Keyword getNewnameKeyword_7_1() { return cNewnameKeyword_7_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_7_2() { return cLeftParenthesisKeyword_7_2; }

		//argument=STRING
		public Assignment getArgumentAssignment_7_3() { return cArgumentAssignment_7_3; }

		//STRING
		public RuleCall getArgumentSTRINGTerminalRuleCall_7_3_0() { return cArgumentSTRINGTerminalRuleCall_7_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7_4() { return cRightParenthesisKeyword_7_4; }

		//{Clone} "clone" "(" argument=Expression ")"
		public Group getGroup_8() { return cGroup_8; }

		//{Clone}
		public Action getCloneAction_8_0() { return cCloneAction_8_0; }

		//"clone"
		public Keyword getCloneKeyword_8_1() { return cCloneKeyword_8_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_8_2() { return cLeftParenthesisKeyword_8_2; }

		//argument=Expression
		public Assignment getArgumentAssignment_8_3() { return cArgumentAssignment_8_3; }

		//Expression
		public RuleCall getArgumentExpressionParserRuleCall_8_3_0() { return cArgumentExpressionParserRuleCall_8_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8_4() { return cRightParenthesisKeyword_8_4; }

		//TerminalExpression ({CompoundExpression.mainExpression=current} op="." subExpression=SubExpression)*
		public Group getGroup_9() { return cGroup_9; }

		//TerminalExpression
		public RuleCall getTerminalExpressionParserRuleCall_9_0() { return cTerminalExpressionParserRuleCall_9_0; }

		//({CompoundExpression.mainExpression=current} op="." subExpression=SubExpression)*
		public Group getGroup_9_1() { return cGroup_9_1; }

		//{CompoundExpression.mainExpression=current}
		public Action getCompoundExpressionMainExpressionAction_9_1_0() { return cCompoundExpressionMainExpressionAction_9_1_0; }

		//op="."
		public Assignment getOpAssignment_9_1_1() { return cOpAssignment_9_1_1; }

		//"."
		public Keyword getOpFullStopKeyword_9_1_1_0() { return cOpFullStopKeyword_9_1_1_0; }

		//subExpression=SubExpression
		public Assignment getSubExpressionAssignment_9_1_2() { return cSubExpressionAssignment_9_1_2; }

		//SubExpression
		public RuleCall getSubExpressionSubExpressionParserRuleCall_9_1_2_0() { return cSubExpressionSubExpressionParserRuleCall_9_1_2_0; }
	}

	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableAccessParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TerminalExpression returns Expression:
		//	StringConstant | IntegerConstant | VariableAccess;
		public ParserRule getRule() { return rule; }

		//StringConstant | IntegerConstant | VariableAccess
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringConstant
		public RuleCall getStringConstantParserRuleCall_0() { return cStringConstantParserRuleCall_0; }

		//IntegerConstant
		public RuleCall getIntegerConstantParserRuleCall_1() { return cIntegerConstantParserRuleCall_1; }

		//VariableAccess
		public RuleCall getVariableAccessParserRuleCall_2() { return cVariableAccessParserRuleCall_2; }
	}

	public class StringConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringConstant");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringConstant:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class IntegerConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerConstant");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntegerConstant:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class VariableAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableAccess");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIndexedVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VariableAccess:
		//	VariableReference | IndexedVariable;
		public ParserRule getRule() { return rule; }

		//VariableReference | IndexedVariable
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_0() { return cVariableReferenceParserRuleCall_0; }

		//IndexedVariable
		public RuleCall getIndexedVariableParserRuleCall_1() { return cIndexedVariableParserRuleCall_1; }
	}

	public class VariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVarRefVariableDeclarationCrossReference_1_0 = (CrossReference)cVarRefAssignment_1.eContents().get(0);
		private final RuleCall cVarRefVariableDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cVarRefVariableDeclarationCrossReference_1_0.eContents().get(1);
		
		//VariableReference:
		//	"$" varRef=[VariableDeclaration];
		public ParserRule getRule() { return rule; }

		//"$" varRef=[VariableDeclaration]
		public Group getGroup() { return cGroup; }

		//"$"
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }

		//varRef=[VariableDeclaration]
		public Assignment getVarRefAssignment_1() { return cVarRefAssignment_1; }

		//[VariableDeclaration]
		public CrossReference getVarRefVariableDeclarationCrossReference_1_0() { return cVarRefVariableDeclarationCrossReference_1_0; }

		//ID
		public RuleCall getVarRefVariableDeclarationIDTerminalRuleCall_1_0_1() { return cVarRefVariableDeclarationIDTerminalRuleCall_1_0_1; }
	}

	public class IndexedVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IndexedVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVarRefVariableDeclarationCrossReference_1_0 = (CrossReference)cVarRefAssignment_1.eContents().get(0);
		private final RuleCall cVarRefVariableDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cVarRefVariableDeclarationCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIndexAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIndexArrayIndexParserRuleCall_3_0 = (RuleCall)cIndexAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IndexedVariable:
		//	"$" varRef=[VariableDeclaration] "[" index=ArrayIndex "]";
		public ParserRule getRule() { return rule; }

		//"$" varRef=[VariableDeclaration] "[" index=ArrayIndex "]"
		public Group getGroup() { return cGroup; }

		//"$"
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }

		//varRef=[VariableDeclaration]
		public Assignment getVarRefAssignment_1() { return cVarRefAssignment_1; }

		//[VariableDeclaration]
		public CrossReference getVarRefVariableDeclarationCrossReference_1_0() { return cVarRefVariableDeclarationCrossReference_1_0; }

		//ID
		public RuleCall getVarRefVariableDeclarationIDTerminalRuleCall_1_0_1() { return cVarRefVariableDeclarationIDTerminalRuleCall_1_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//index=ArrayIndex
		public Assignment getIndexAssignment_3() { return cIndexAssignment_3; }

		//ArrayIndex
		public RuleCall getIndexArrayIndexParserRuleCall_3_0() { return cIndexArrayIndexParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class SubExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIndexedAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cFeatureENamedElementCrossReference_0_1_0 = (CrossReference)cFeatureAssignment_0_1.eContents().get(0);
		private final RuleCall cFeatureENamedElementIDTerminalRuleCall_0_1_0_1 = (RuleCall)cFeatureENamedElementCrossReference_0_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cIndexAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cIndexArrayIndexParserRuleCall_0_3_0 = (RuleCall)cIndexAssignment_0_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFeatureAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cFeatureAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cFeatureENamedElementCrossReference_1_1_0 = (CrossReference)cFeatureAssignment_1_1.eContents().get(0);
		private final RuleCall cFeatureENamedElementIDTerminalRuleCall_1_1_0_1 = (RuleCall)cFeatureENamedElementCrossReference_1_1_0.eContents().get(1);
		
		//SubExpression:
		//	{Indexed} feature=[ecore::ENamedElement] "[" index=ArrayIndex "]" | {Feature} feature=[ecore::ENamedElement];
		public ParserRule getRule() { return rule; }

		//{Indexed} feature=[ecore::ENamedElement] "[" index=ArrayIndex "]" | {Feature} feature=[ecore::ENamedElement]
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Indexed} feature=[ecore::ENamedElement] "[" index=ArrayIndex "]"
		public Group getGroup_0() { return cGroup_0; }

		//{Indexed}
		public Action getIndexedAction_0_0() { return cIndexedAction_0_0; }

		//feature=[ecore::ENamedElement]
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }

		//[ecore::ENamedElement]
		public CrossReference getFeatureENamedElementCrossReference_0_1_0() { return cFeatureENamedElementCrossReference_0_1_0; }

		//ID
		public RuleCall getFeatureENamedElementIDTerminalRuleCall_0_1_0_1() { return cFeatureENamedElementIDTerminalRuleCall_0_1_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_2() { return cLeftSquareBracketKeyword_0_2; }

		//index=ArrayIndex
		public Assignment getIndexAssignment_0_3() { return cIndexAssignment_0_3; }

		//ArrayIndex
		public RuleCall getIndexArrayIndexParserRuleCall_0_3_0() { return cIndexArrayIndexParserRuleCall_0_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_4() { return cRightSquareBracketKeyword_0_4; }

		//{Feature} feature=[ecore::ENamedElement]
		public Group getGroup_1() { return cGroup_1; }

		//{Feature}
		public Action getFeatureAction_1_0() { return cFeatureAction_1_0; }

		//feature=[ecore::ENamedElement]
		public Assignment getFeatureAssignment_1_1() { return cFeatureAssignment_1_1; }

		//[ecore::ENamedElement]
		public CrossReference getFeatureENamedElementCrossReference_1_1_0() { return cFeatureENamedElementCrossReference_1_1_0; }

		//ID
		public RuleCall getFeatureENamedElementIDTerminalRuleCall_1_1_0_1() { return cFeatureENamedElementIDTerminalRuleCall_1_1_0_1; }
	}

	public class ArrayIndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayIndex");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ArrayIndex:
		//	IntegerConstant | Expression;
		public ParserRule getRule() { return rule; }

		//IntegerConstant | Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegerConstant
		public RuleCall getIntegerConstantParserRuleCall_0() { return cIntegerConstantParserRuleCall_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}

	public class AlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Alternative");
		private final Keyword cVerticalLineKeyword = (Keyword)rule.eContents().get(1);
		
		//Alternative:
		//	"|";
		public ParserRule getRule() { return rule; }

		//"|"
		public Keyword getVerticalLineKeyword() { return cVerticalLineKeyword; }
	}

	public class OrSeparatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrSeparator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAlternativeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OrSeparator:
		//	Alternative | "or";
		public ParserRule getRule() { return rule; }

		//Alternative | "or"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Alternative
		public RuleCall getAlternativeParserRuleCall_0() { return cAlternativeParserRuleCall_0; }

		//"or"
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
	}

	public class MappingRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingRelation");
		private final Keyword cHyphenMinusGreaterThanSignKeyword = (Keyword)rule.eContents().get(1);
		
		//MappingRelation:
		//	"->";
		public ParserRule getRule() { return rule; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword() { return cHyphenMinusGreaterThanSignKeyword; }
	}

	public class TypeRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeRelation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignOpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEqualsOpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cExclamationMarkKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cHyphenMinusKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final RuleCall cColonParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final Keyword cTildeKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//TypeRelation:
		//	(AssignOp | EqualsOp | "<" | ">" | "!" | "-" | Colon | "~")+;
		public ParserRule getRule() { return rule; }

		//(AssignOp | EqualsOp | "<" | ">" | "!" | "-" | Colon | "~")+
		public Alternatives getAlternatives() { return cAlternatives; }

		//AssignOp
		public RuleCall getAssignOpParserRuleCall_0() { return cAssignOpParserRuleCall_0; }

		//EqualsOp
		public RuleCall getEqualsOpParserRuleCall_1() { return cEqualsOpParserRuleCall_1; }

		//"<"
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }

		//"!"
		public Keyword getExclamationMarkKeyword_4() { return cExclamationMarkKeyword_4; }

		//"-"
		public Keyword getHyphenMinusKeyword_5() { return cHyphenMinusKeyword_5; }

		//Colon
		public RuleCall getColonParserRuleCall_6() { return cColonParserRuleCall_6; }

		//"~"
		public Keyword getTildeKeyword_7() { return cTildeKeyword_7; }
	}

	public class TypeJudgmentSymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeJudgmentSymbol");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAlternativeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTypeRelationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//TypeJudgmentSymbol:
		//	Alternative+ TypeRelation;
		public ParserRule getRule() { return rule; }

		//Alternative+ TypeRelation
		public Group getGroup() { return cGroup; }

		//Alternative+
		public RuleCall getAlternativeParserRuleCall_0() { return cAlternativeParserRuleCall_0; }

		//TypeRelation
		public RuleCall getTypeRelationParserRuleCall_1() { return cTypeRelationParserRuleCall_1; }
	}

	public class AssignOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignOp");
		private final Keyword cColonEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//AssignOp:
		//	":=";
		public ParserRule getRule() { return rule; }

		//":="
		public Keyword getColonEqualsSignKeyword() { return cColonEqualsSignKeyword; }
	}

	public class EqualsOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqualsOp");
		private final Keyword cEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//EqualsOp:
		//	"=";
		public ParserRule getRule() { return rule; }

		//"="
		public Keyword getEqualsSignKeyword() { return cEqualsSignKeyword; }
	}

	public class PlusOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PlusOp");
		private final Keyword cPlusSignKeyword = (Keyword)rule.eContents().get(1);
		
		//PlusOp:
		//	"+";
		public ParserRule getRule() { return rule; }

		//"+"
		public Keyword getPlusSignKeyword() { return cPlusSignKeyword; }
	}

	public class MinusOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MinusOp");
		private final Keyword cHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		//MinusOp:
		//	"-";
		public ParserRule getRule() { return rule; }

		//"-"
		public Keyword getHyphenMinusKeyword() { return cHyphenMinusKeyword; }
	}

	public class NotEqualsOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NotEqualsOp");
		private final Keyword cExclamationMarkEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//NotEqualsOp:
		//	"!=";
		public ParserRule getRule() { return rule; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword() { return cExclamationMarkEqualsSignKeyword; }
	}

	public class CommaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comma");
		private final Keyword cCommaKeyword = (Keyword)rule.eContents().get(1);
		
		//Comma:
		//	",";
		public ParserRule getRule() { return rule; }

		//","
		public Keyword getCommaKeyword() { return cCommaKeyword; }
	}

	public class ListCompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListComposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cColonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cColonParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ListComposition:
		//	Colon Colon;
		public ParserRule getRule() { return rule; }

		//Colon Colon
		public Group getGroup() { return cGroup; }

		//Colon
		public RuleCall getColonParserRuleCall_0() { return cColonParserRuleCall_0; }

		//Colon
		public RuleCall getColonParserRuleCall_1() { return cColonParserRuleCall_1; }
	}

	public class ColonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Colon");
		private final Keyword cColonKeyword = (Keyword)rule.eContents().get(1);
		
		//Colon:
		//	":";
		public ParserRule getRule() { return rule; }

		//":"
		public Keyword getColonKeyword() { return cColonKeyword; }
	}

	public class EnvironmentCompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnvironmentComposition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCommaParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cListCompositionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EnvironmentComposition:
		//	Comma | ListComposition;
		public ParserRule getRule() { return rule; }

		//Comma | ListComposition
		public Alternatives getAlternatives() { return cAlternatives; }

		//Comma
		public RuleCall getCommaParserRuleCall_0() { return cCommaParserRuleCall_0; }

		//ListComposition
		public RuleCall getListCompositionParserRuleCall_1() { return cListCompositionParserRuleCall_1; }
	}
	
	
	private TypeSystemDefinitionElements pTypeSystemDefinition;
	private JudgmentDescriptionElements pJudgmentDescription;
	private RuleElements pRule;
	private AxiomElements pAxiom;
	private RuleWithPremisesElements pRuleWithPremises;
	private TypingJudgmentElements pTypingJudgment;
	private OrTypingJudgmentElements pOrTypingJudgment;
	private OrBranchElements pOrBranch;
	private VariableDeclarationElements pVariableDeclaration;
	private VariableDeclarationWithTypeElements pVariableDeclarationWithType;
	private ExpressionTypeElements pExpressionType;
	private CollectionTypeElements pCollectionType;
	private EClassifierTypeElements pEClassifierType;
	private BasicTypeElements pBasicType;
	private VariableSimpleDeclarationElements pVariableSimpleDeclaration;
	private QuantificationElements pQuantification;
	private ForEachElements pForEach;
	private ForAllElements pForAll;
	private ExistsElements pExists;
	private StandardOperationElements pStandardOperation;
	private EnvironmentOperationElements pEnvironmentOperation;
	private ListOperationElements pListOperation;
	private AssignmentElements pAssignment;
	private EqualsElements pEquals;
	private FailElements pFail;
	private SuccessElements pSuccess;
	private TypingJudgmentWithEnvironmentElements pTypingJudgmentWithEnvironment;
	private ErrorSpecificationElements pErrorSpecification;
	private FailureErrorElements pFailureError;
	private TerminalErrorElements pTerminalError;
	private TypingStatementElements pTypingStatement;
	private TypingStatementExpressionElements pTypingStatementExpression;
	private EnvironmentElements pEnvironment;
	private TerminalEnvironmentElements pTerminalEnvironment;
	private EnvironmentIdElements pEnvironmentId;
	private EnvironmentStatementElements pEnvironmentStatement;
	private EmptyEnvironmentElements pEmptyEnvironment;
	private ExpressionElements pExpression;
	private TerminalExpressionElements pTerminalExpression;
	private StringConstantElements pStringConstant;
	private IntegerConstantElements pIntegerConstant;
	private VariableAccessElements pVariableAccess;
	private VariableReferenceElements pVariableReference;
	private IndexedVariableElements pIndexedVariable;
	private SubExpressionElements pSubExpression;
	private ArrayIndexElements pArrayIndex;
	private AlternativeElements pAlternative;
	private OrSeparatorElements pOrSeparator;
	private MappingRelationElements pMappingRelation;
	private TypeRelationElements pTypeRelation;
	private TypeJudgmentSymbolElements pTypeJudgmentSymbol;
	private AssignOpElements pAssignOp;
	private EqualsOpElements pEqualsOp;
	private PlusOpElements pPlusOp;
	private MinusOpElements pMinusOp;
	private NotEqualsOpElements pNotEqualsOp;
	private CommaElements pComma;
	private ListCompositionElements pListComposition;
	private ColonElements pColon;
	private EnvironmentCompositionElements pEnvironmentComposition;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public TypeSystemGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TypeSystemDefinition:
	//	("typesystem" name=ID)? "grammar" ePackage=[ecore::EPackage|STRING] ("genmodel" genModel=STRING)? ("judgments"
	//	judgmentDescriptions+=JudgmentDescription+ "end")? rules+=Rule*;
	public TypeSystemDefinitionElements getTypeSystemDefinitionAccess() {
		return (pTypeSystemDefinition != null) ? pTypeSystemDefinition : (pTypeSystemDefinition = new TypeSystemDefinitionElements());
	}
	
	public ParserRule getTypeSystemDefinitionRule() {
		return getTypeSystemDefinitionAccess().getRule();
	}

	//JudgmentDescription:
	//	judgmentsymbol=STRING relation=STRING "kind" EqualsOp kind=STRING (("success" EqualsOp success=STRING)? & ("fail"
	//	EqualsOp fail=STRING)? & ("nomatch" EqualsOp nomatch=STRING)? & binary?="binary"?);
	public JudgmentDescriptionElements getJudgmentDescriptionAccess() {
		return (pJudgmentDescription != null) ? pJudgmentDescription : (pJudgmentDescription = new JudgmentDescriptionElements());
	}
	
	public ParserRule getJudgmentDescriptionRule() {
		return getJudgmentDescriptionAccess().getRule();
	}

	//Rule:
	//	Axiom | RuleWithPremises;
	public RuleElements getRuleAccess() {
		return (pRule != null) ? pRule : (pRule = new RuleElements());
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//Axiom:
	//	"axiom" name=ID typejudgment=TypingJudgmentWithEnvironment;
	public AxiomElements getAxiomAccess() {
		return (pAxiom != null) ? pAxiom : (pAxiom = new AxiomElements());
	}
	
	public ParserRule getAxiomRule() {
		return getAxiomAccess().getRule();
	}

	//RuleWithPremises:
	//	"rule" name=ID "derives" typejudgment=TypingJudgmentWithEnvironment "from" premises+=TypingJudgment+;
	public RuleWithPremisesElements getRuleWithPremisesAccess() {
		return (pRuleWithPremises != null) ? pRuleWithPremises : (pRuleWithPremises = new RuleWithPremisesElements());
	}
	
	public ParserRule getRuleWithPremisesRule() {
		return getRuleWithPremisesAccess().getRule();
	}

	//TypingJudgment:
	//	Quantification | VariableDeclarationWithType | OrTypingJudgment | StandardOperation | TypingJudgmentWithEnvironment;
	public TypingJudgmentElements getTypingJudgmentAccess() {
		return (pTypingJudgment != null) ? pTypingJudgment : (pTypingJudgment = new TypingJudgmentElements());
	}
	
	public ParserRule getTypingJudgmentRule() {
		return getTypingJudgmentAccess().getRule();
	}

	//OrTypingJudgment:
	//	"(" branches+=OrBranch (OrSeparator branches+=OrBranch)+ ")" error=ErrorSpecification?;
	public OrTypingJudgmentElements getOrTypingJudgmentAccess() {
		return (pOrTypingJudgment != null) ? pOrTypingJudgment : (pOrTypingJudgment = new OrTypingJudgmentElements());
	}
	
	public ParserRule getOrTypingJudgmentRule() {
		return getOrTypingJudgmentAccess().getRule();
	}

	//OrBranch:
	//	judgments+=TypingJudgment+;
	public OrBranchElements getOrBranchAccess() {
		return (pOrBranch != null) ? pOrBranch : (pOrBranch = new OrBranchElements());
	}
	
	public ParserRule getOrBranchRule() {
		return getOrBranchAccess().getRule();
	}

	//VariableDeclaration:
	//	VariableSimpleDeclaration | VariableDeclarationWithType;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//VariableDeclarationWithType:
	//	"var" expressionType=ExpressionType name=ID (op=AssignOp right=Expression)?;
	public VariableDeclarationWithTypeElements getVariableDeclarationWithTypeAccess() {
		return (pVariableDeclarationWithType != null) ? pVariableDeclarationWithType : (pVariableDeclarationWithType = new VariableDeclarationWithTypeElements());
	}
	
	public ParserRule getVariableDeclarationWithTypeRule() {
		return getVariableDeclarationWithTypeAccess().getRule();
	}

	//ExpressionType:
	//	CollectionType | EClassifierType | BasicType;
	public ExpressionTypeElements getExpressionTypeAccess() {
		return (pExpressionType != null) ? pExpressionType : (pExpressionType = new ExpressionTypeElements());
	}
	
	public ParserRule getExpressionTypeRule() {
		return getExpressionTypeAccess().getRule();
	}

	//CollectionType:
	//	collection="List" "[" type=ExpressionType "]";
	public CollectionTypeElements getCollectionTypeAccess() {
		return (pCollectionType != null) ? pCollectionType : (pCollectionType = new CollectionTypeElements());
	}
	
	public ParserRule getCollectionTypeRule() {
		return getCollectionTypeAccess().getRule();
	}

	//EClassifierType:
	//	eclassifier=[ecore::EClassifier];
	public EClassifierTypeElements getEClassifierTypeAccess() {
		return (pEClassifierType != null) ? pEClassifierType : (pEClassifierType = new EClassifierTypeElements());
	}
	
	public ParserRule getEClassifierTypeRule() {
		return getEClassifierTypeAccess().getRule();
	}

	//BasicType:
	//	basic=("String" | "Integer" | "Object");
	public BasicTypeElements getBasicTypeAccess() {
		return (pBasicType != null) ? pBasicType : (pBasicType = new BasicTypeElements());
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}

	//VariableSimpleDeclaration:
	//	name=ID;
	public VariableSimpleDeclarationElements getVariableSimpleDeclarationAccess() {
		return (pVariableSimpleDeclaration != null) ? pVariableSimpleDeclaration : (pVariableSimpleDeclaration = new VariableSimpleDeclarationElements());
	}
	
	public ParserRule getVariableSimpleDeclarationRule() {
		return getVariableSimpleDeclarationAccess().getRule();
	}

	//Quantification:
	//	(ForEach | ForAll | Exists) error=ErrorSpecification?;
	public QuantificationElements getQuantificationAccess() {
		return (pQuantification != null) ? pQuantification : (pQuantification = new QuantificationElements());
	}
	
	public ParserRule getQuantificationRule() {
		return getQuantificationAccess().getRule();
	}

	//ForEach:
	//	"foreach" expression=Expression "as" variable=VariableSimpleDeclaration "{" judgments+=TypingJudgment+ "}";
	public ForEachElements getForEachAccess() {
		return (pForEach != null) ? pForEach : (pForEach = new ForEachElements());
	}
	
	public ParserRule getForEachRule() {
		return getForEachAccess().getRule();
	}

	//ForAll:
	//	"forall" variable=VariableSimpleDeclaration "in" expression=Expression "{" judgments+=TypingJudgment+ "}";
	public ForAllElements getForAllAccess() {
		return (pForAll != null) ? pForAll : (pForAll = new ForAllElements());
	}
	
	public ParserRule getForAllRule() {
		return getForAllAccess().getRule();
	}

	//Exists:
	//	not?="!"? "exists" variable=VariableSimpleDeclaration "in" expression=Expression "{" judgments+=TypingJudgment+ "}";
	public ExistsElements getExistsAccess() {
		return (pExists != null) ? pExists : (pExists = new ExistsElements());
	}
	
	public ParserRule getExistsRule() {
		return getExistsAccess().getRule();
	}

	//StandardOperation:
	//	EnvironmentOperation | ListOperation | Assignment | Equals | Fail | Success;
	public StandardOperationElements getStandardOperationAccess() {
		return (pStandardOperation != null) ? pStandardOperation : (pStandardOperation = new StandardOperationElements());
	}
	
	public ParserRule getStandardOperationRule() {
		return getStandardOperationAccess().getRule();
	}

	//EnvironmentOperation:
	//	{EnvironmentAssignment} left=EnvironmentId AssignOp right=Environment | {EnvironmentIncrement} left=EnvironmentId
	//	PlusOp EqualsOp right=EnvironmentStatement | {EnvironmentDecrement} left=EnvironmentId MinusOp EqualsOp
	//	right=TypingStatementExpression;
	public EnvironmentOperationElements getEnvironmentOperationAccess() {
		return (pEnvironmentOperation != null) ? pEnvironmentOperation : (pEnvironmentOperation = new EnvironmentOperationElements());
	}
	
	public ParserRule getEnvironmentOperationRule() {
		return getEnvironmentOperationAccess().getRule();
	}

	//ListOperation:
	//	{ListIncrement} left=Expression PlusOp EqualsOp right=Expression | {ListDecrement} left=Expression MinusOp EqualsOp
	//	right=Expression;
	public ListOperationElements getListOperationAccess() {
		return (pListOperation != null) ? pListOperation : (pListOperation = new ListOperationElements());
	}
	
	public ParserRule getListOperationRule() {
		return getListOperationAccess().getRule();
	}

	//Assignment:
	//	left=Expression AssignOp right=Expression;
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//Equals:
	//	left=Expression op=(EqualsOp | NotEqualsOp) right=Expression error=ErrorSpecification?;
	public EqualsElements getEqualsAccess() {
		return (pEquals != null) ? pEquals : (pEquals = new EqualsElements());
	}
	
	public ParserRule getEqualsRule() {
		return getEqualsAccess().getRule();
	}

	//Fail:
	//	{Fail} "fail" error=ErrorSpecification?;
	public FailElements getFailAccess() {
		return (pFail != null) ? pFail : (pFail = new FailElements());
	}
	
	public ParserRule getFailRule() {
		return getFailAccess().getRule();
	}

	//Success:
	//	{Success} "success";
	public SuccessElements getSuccessAccess() {
		return (pSuccess != null) ? pSuccess : (pSuccess = new SuccessElements());
	}
	
	public ParserRule getSuccessRule() {
		return getSuccessAccess().getRule();
	}

	//TypingJudgmentWithEnvironment:
	//	environment=Environment typejudgmentsymbol=TypeJudgmentSymbol typingstatement=TypingStatement
	//	error=ErrorSpecification?;
	public TypingJudgmentWithEnvironmentElements getTypingJudgmentWithEnvironmentAccess() {
		return (pTypingJudgmentWithEnvironment != null) ? pTypingJudgmentWithEnvironment : (pTypingJudgmentWithEnvironment = new TypingJudgmentWithEnvironmentElements());
	}
	
	public ParserRule getTypingJudgmentWithEnvironmentRule() {
		return getTypingJudgmentWithEnvironmentAccess().getRule();
	}

	//ErrorSpecification:
	//	"error" EqualsOp failureError=FailureError;
	public ErrorSpecificationElements getErrorSpecificationAccess() {
		return (pErrorSpecification != null) ? pErrorSpecification : (pErrorSpecification = new ErrorSpecificationElements());
	}
	
	public ParserRule getErrorSpecificationRule() {
		return getErrorSpecificationAccess().getRule();
	}

	//FailureError:
	//	TerminalError ({ComposedError.left=current} op=PlusOp right=FailureError)*;
	public FailureErrorElements getFailureErrorAccess() {
		return (pFailureError != null) ? pFailureError : (pFailureError = new FailureErrorElements());
	}
	
	public ParserRule getFailureErrorRule() {
		return getFailureErrorAccess().getRule();
	}

	//TerminalError returns FailureError:
	//	{ErrorString} errString=STRING | {ErrorExpression} expression=Expression;
	public TerminalErrorElements getTerminalErrorAccess() {
		return (pTerminalError != null) ? pTerminalError : (pTerminalError = new TerminalErrorElements());
	}
	
	public ParserRule getTerminalErrorRule() {
		return getTerminalErrorAccess().getRule();
	}

	//TypingStatement:
	//	left=TypingStatementExpression relation=TypeRelation right=TypingStatementExpression;
	public TypingStatementElements getTypingStatementAccess() {
		return (pTypingStatement != null) ? pTypingStatement : (pTypingStatement = new TypingStatementElements());
	}
	
	public ParserRule getTypingStatementRule() {
		return getTypingStatementAccess().getRule();
	}

	//TypingStatementExpression:
	//	Expression;
	public TypingStatementExpressionElements getTypingStatementExpressionAccess() {
		return (pTypingStatementExpression != null) ? pTypingStatementExpression : (pTypingStatementExpression = new TypingStatementExpressionElements());
	}
	
	public ParserRule getTypingStatementExpressionRule() {
		return getTypingStatementExpressionAccess().getRule();
	}

	//Environment:
	//	TerminalEnvironment ({EnvironmentComposition.currentEnvironment=current} op=EnvironmentComposition
	//	subEnvironment=Environment)*;
	public EnvironmentElements getEnvironmentAccess() {
		return (pEnvironment != null) ? pEnvironment : (pEnvironment = new EnvironmentElements());
	}
	
	public ParserRule getEnvironmentRule() {
		return getEnvironmentAccess().getRule();
	}

	//TerminalEnvironment returns Environment:
	//	EnvironmentId | EnvironmentStatement | EmptyEnvironment;
	public TerminalEnvironmentElements getTerminalEnvironmentAccess() {
		return (pTerminalEnvironment != null) ? pTerminalEnvironment : (pTerminalEnvironment = new TerminalEnvironmentElements());
	}
	
	public ParserRule getTerminalEnvironmentRule() {
		return getTerminalEnvironmentAccess().getRule();
	}

	//EnvironmentId:
	//	environmentId=ID;
	public EnvironmentIdElements getEnvironmentIdAccess() {
		return (pEnvironmentId != null) ? pEnvironmentId : (pEnvironmentId = new EnvironmentIdElements());
	}
	
	public ParserRule getEnvironmentIdRule() {
		return getEnvironmentIdAccess().getRule();
	}

	//EnvironmentStatement:
	//	left=TypingStatementExpression relation=MappingRelation right=TypingStatementExpression;
	public EnvironmentStatementElements getEnvironmentStatementAccess() {
		return (pEnvironmentStatement != null) ? pEnvironmentStatement : (pEnvironmentStatement = new EnvironmentStatementElements());
	}
	
	public ParserRule getEnvironmentStatementRule() {
		return getEnvironmentStatementAccess().getRule();
	}

	//EmptyEnvironment:
	//	empty="empty";
	public EmptyEnvironmentElements getEmptyEnvironmentAccess() {
		return (pEmptyEnvironment != null) ? pEmptyEnvironment : (pEmptyEnvironment = new EmptyEnvironmentElements());
	}
	
	public ParserRule getEmptyEnvironmentRule() {
		return getEmptyEnvironmentAccess().getRule();
	}

	//Expression:
	//	VariableDeclarationWithType | {EnvironmentAccess} "env" "(" envId=EnvironmentId "," argument=Expression ")" | {Length}
	//	"len" "(" argument=Expression ")" | {GetAll} "getall" "(" expression=Expression ","
	//	mainfeature=[ecore::EStructuralFeature] "," extendfeature=[ecore::EStructuralFeature] ")" | {Container} "container"
	//	"(" argument=Expression ")" | {CastTo} "(" type=ExpressionType ")" expression=Expression | {Null} "null" | {NewName}
	//	"newname" "(" argument=STRING ")" | {Clone} "clone" "(" argument=Expression ")" | TerminalExpression
	//	({CompoundExpression.mainExpression=current} op="." subExpression=SubExpression)*;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//TerminalExpression returns Expression:
	//	StringConstant | IntegerConstant | VariableAccess;
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return (pTerminalExpression != null) ? pTerminalExpression : (pTerminalExpression = new TerminalExpressionElements());
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}

	//StringConstant:
	//	value=STRING;
	public StringConstantElements getStringConstantAccess() {
		return (pStringConstant != null) ? pStringConstant : (pStringConstant = new StringConstantElements());
	}
	
	public ParserRule getStringConstantRule() {
		return getStringConstantAccess().getRule();
	}

	//IntegerConstant:
	//	value=INT;
	public IntegerConstantElements getIntegerConstantAccess() {
		return (pIntegerConstant != null) ? pIntegerConstant : (pIntegerConstant = new IntegerConstantElements());
	}
	
	public ParserRule getIntegerConstantRule() {
		return getIntegerConstantAccess().getRule();
	}

	//VariableAccess:
	//	VariableReference | IndexedVariable;
	public VariableAccessElements getVariableAccessAccess() {
		return (pVariableAccess != null) ? pVariableAccess : (pVariableAccess = new VariableAccessElements());
	}
	
	public ParserRule getVariableAccessRule() {
		return getVariableAccessAccess().getRule();
	}

	//VariableReference:
	//	"$" varRef=[VariableDeclaration];
	public VariableReferenceElements getVariableReferenceAccess() {
		return (pVariableReference != null) ? pVariableReference : (pVariableReference = new VariableReferenceElements());
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}

	//IndexedVariable:
	//	"$" varRef=[VariableDeclaration] "[" index=ArrayIndex "]";
	public IndexedVariableElements getIndexedVariableAccess() {
		return (pIndexedVariable != null) ? pIndexedVariable : (pIndexedVariable = new IndexedVariableElements());
	}
	
	public ParserRule getIndexedVariableRule() {
		return getIndexedVariableAccess().getRule();
	}

	//SubExpression:
	//	{Indexed} feature=[ecore::ENamedElement] "[" index=ArrayIndex "]" | {Feature} feature=[ecore::ENamedElement];
	public SubExpressionElements getSubExpressionAccess() {
		return (pSubExpression != null) ? pSubExpression : (pSubExpression = new SubExpressionElements());
	}
	
	public ParserRule getSubExpressionRule() {
		return getSubExpressionAccess().getRule();
	}

	//ArrayIndex:
	//	IntegerConstant | Expression;
	public ArrayIndexElements getArrayIndexAccess() {
		return (pArrayIndex != null) ? pArrayIndex : (pArrayIndex = new ArrayIndexElements());
	}
	
	public ParserRule getArrayIndexRule() {
		return getArrayIndexAccess().getRule();
	}

	//Alternative:
	//	"|";
	public AlternativeElements getAlternativeAccess() {
		return (pAlternative != null) ? pAlternative : (pAlternative = new AlternativeElements());
	}
	
	public ParserRule getAlternativeRule() {
		return getAlternativeAccess().getRule();
	}

	//OrSeparator:
	//	Alternative | "or";
	public OrSeparatorElements getOrSeparatorAccess() {
		return (pOrSeparator != null) ? pOrSeparator : (pOrSeparator = new OrSeparatorElements());
	}
	
	public ParserRule getOrSeparatorRule() {
		return getOrSeparatorAccess().getRule();
	}

	//MappingRelation:
	//	"->";
	public MappingRelationElements getMappingRelationAccess() {
		return (pMappingRelation != null) ? pMappingRelation : (pMappingRelation = new MappingRelationElements());
	}
	
	public ParserRule getMappingRelationRule() {
		return getMappingRelationAccess().getRule();
	}

	//TypeRelation:
	//	(AssignOp | EqualsOp | "<" | ">" | "!" | "-" | Colon | "~")+;
	public TypeRelationElements getTypeRelationAccess() {
		return (pTypeRelation != null) ? pTypeRelation : (pTypeRelation = new TypeRelationElements());
	}
	
	public ParserRule getTypeRelationRule() {
		return getTypeRelationAccess().getRule();
	}

	//TypeJudgmentSymbol:
	//	Alternative+ TypeRelation;
	public TypeJudgmentSymbolElements getTypeJudgmentSymbolAccess() {
		return (pTypeJudgmentSymbol != null) ? pTypeJudgmentSymbol : (pTypeJudgmentSymbol = new TypeJudgmentSymbolElements());
	}
	
	public ParserRule getTypeJudgmentSymbolRule() {
		return getTypeJudgmentSymbolAccess().getRule();
	}

	//AssignOp:
	//	":=";
	public AssignOpElements getAssignOpAccess() {
		return (pAssignOp != null) ? pAssignOp : (pAssignOp = new AssignOpElements());
	}
	
	public ParserRule getAssignOpRule() {
		return getAssignOpAccess().getRule();
	}

	//EqualsOp:
	//	"=";
	public EqualsOpElements getEqualsOpAccess() {
		return (pEqualsOp != null) ? pEqualsOp : (pEqualsOp = new EqualsOpElements());
	}
	
	public ParserRule getEqualsOpRule() {
		return getEqualsOpAccess().getRule();
	}

	//PlusOp:
	//	"+";
	public PlusOpElements getPlusOpAccess() {
		return (pPlusOp != null) ? pPlusOp : (pPlusOp = new PlusOpElements());
	}
	
	public ParserRule getPlusOpRule() {
		return getPlusOpAccess().getRule();
	}

	//MinusOp:
	//	"-";
	public MinusOpElements getMinusOpAccess() {
		return (pMinusOp != null) ? pMinusOp : (pMinusOp = new MinusOpElements());
	}
	
	public ParserRule getMinusOpRule() {
		return getMinusOpAccess().getRule();
	}

	//NotEqualsOp:
	//	"!=";
	public NotEqualsOpElements getNotEqualsOpAccess() {
		return (pNotEqualsOp != null) ? pNotEqualsOp : (pNotEqualsOp = new NotEqualsOpElements());
	}
	
	public ParserRule getNotEqualsOpRule() {
		return getNotEqualsOpAccess().getRule();
	}

	//Comma:
	//	",";
	public CommaElements getCommaAccess() {
		return (pComma != null) ? pComma : (pComma = new CommaElements());
	}
	
	public ParserRule getCommaRule() {
		return getCommaAccess().getRule();
	}

	//ListComposition:
	//	Colon Colon;
	public ListCompositionElements getListCompositionAccess() {
		return (pListComposition != null) ? pListComposition : (pListComposition = new ListCompositionElements());
	}
	
	public ParserRule getListCompositionRule() {
		return getListCompositionAccess().getRule();
	}

	//Colon:
	//	":";
	public ColonElements getColonAccess() {
		return (pColon != null) ? pColon : (pColon = new ColonElements());
	}
	
	public ParserRule getColonRule() {
		return getColonAccess().getRule();
	}

	//EnvironmentComposition:
	//	Comma | ListComposition;
	public EnvironmentCompositionElements getEnvironmentCompositionAccess() {
		return (pEnvironmentComposition != null) ? pEnvironmentComposition : (pEnvironmentComposition = new EnvironmentCompositionElements());
	}
	
	public ParserRule getEnvironmentCompositionRule() {
		return getEnvironmentCompositionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
