module it.xtypes.TypeSystem

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/it/xtypes/TypeSystem.xtext"
var file.extensions = "xtypes"
var projectName = "it.xtypes"
var runtimeProject = "../${projectName}"

Workflow {
    bean = StandaloneSetup {
    	scanClassPath = true
		platformUri = "${runtimeProject}/.."
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		language = {
			uri = grammarURI
			fileExtensions = file.extensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment {}

			// generates Java API for the generated EPackages 
			fragment = ecore.EcoreGeneratorFragment {
			// referencedGenModels = "uri to genmodel, uri to next genmodel"
			}

            // Serializer 2.0
            fragment = serializer.SerializerFragment {}
            
            // the serialization component (1.0)
            // fragment = parseTreeConstructor.ParseTreeConstructorFragment {}

			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = file.extensions
			}

			// The antlr parser generator fragment.
			fragment = parser.antlr.XtextAntlrGeneratorFragment {
				options = {
					backtrack = true
				}
			}

			// java-based API for validation 
			fragment = validation.JavaValidatorFragment {
				composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
				composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
				// registerForImportedPackages = true
			}

			// scoping and exporting API
			// fragment = scoping.ImportURIScopingFragment {}
			// fragment = exporting.SimpleNamesFragment {}

			// scoping and exporting API 
			fragment = scoping.ImportNamespacesScopingFragment {}
			fragment = exporting.QualifiedNamesFragment {}
			fragment = builder.BuilderIntegrationFragment {}

			// formatter API 
			fragment = formatting.FormatterFragment {}

			// labeling API 
			fragment = labeling.LabelProviderFragment {}

			// outline API 
			fragment = outline.OutlineTreeProviderFragment {}
            fragment = outline.QuickOutlineFragment {}

			// quickfix API 
			fragment = quickfix.QuickfixProviderFragment {}

			// content assist API  
			fragment = contentAssist.JavaBasedContentAssistFragment {}

			// generates a more lightweight Antlr parser and lexer tailored for content assist  
			fragment = parser.antlr.XtextAntlrUiGeneratorFragment {
				options = {
					backtrack = true
				}
			}

			// project wizard (optional) 
			//fragment = projectWizard.SimpleProjectWizardFragment {
				//generatorProjectName = "${projectName}.generator" 
				//modelFileExtension = file.extensions
			//}
			
			// rename refactoring
            fragment = refactoring.RefactorElementNameFragment {}
			
			// provides a compare view
            fragment = compare.CompareFragment {
                 fileExtensions = file.extensions
            }
            
            fragment = gpp.boxmodel.defaultboxmodel.DefaultBoxModelGeneratorFragment
			{ 
				defaultBoxModelDefinitionFileURI = "platform:/resource/gpp/settings/defaultFormattingSettings.ppd"
			}
			
			fragment = gpp.boxmodel.provider.BoxModelProviderFragment
			{
				boxModelFileURI = "platform:/resource/it.xtypes/src/it/xtypes/TypeSystem.ppf"
			} 
			
			fragment = gpp.highlighting.HighlightingFragment {} 
			
			fragment = gpp.formatting.FormatterFragment {}
		}
	}
}
